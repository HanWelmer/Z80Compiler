debug = true
z80CodeGeneration = false
binaryCodeGeneration = false

prog start
{Program to test some compiler constructs}

VAR A, B, C, D;

lexeme=VAR
lexeme=name A
idlist start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
name A@0
lexeme=,
idlist var declared
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
idlist ; or , ignored
idlist , skipped
lexeme=name B
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
name B@1
lexeme=,
idlist var declared
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
idlist ; or , ignored
idlist , skipped
lexeme=name C
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
name C@2
lexeme=,
idlist var declared
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
idlist ; or , ignored
idlist , skipped
lexeme=name D
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
name D@3
lexeme=;
idlist var declared
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
idlist ; or , ignored
idlist end of id list reached
idlist ; skipped
BEGIN

  A := 1;

lexeme=BEGIN
idlist end
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name A@0
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=false):
  0 :acc= constant 1
->plant (accInUse=true):
  1 :acc=> variable 0
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  A := READ;

lexeme=name A@0
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=false):
  2 :call read
->plant (accInUse=true):
  3 :acc=> variable 0
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := A;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=false):
  4 :acc= variable 0
->plant (accInUse=true):
  5 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := 2 + 1;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 2
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
->plant (accInUse=false):
  6 :acc= constant 2
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
  7 :acc+ constant 1
->plant (accInUse=true):
  8 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := 1 + A;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
->plant (accInUse=false):
  9 :acc= constant 1
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 10 :acc+ variable 0
->plant (accInUse=true):
 11 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := 1 + READ;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
->plant (accInUse=false):
 12 :acc= constant 1
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
->plant (accInUse=true):
 13 :acc=> stack
Accu saved
 14 :call read
->plant (accInUse=true):
 15 :acc+ unstack
->plant (accInUse=true):
 16 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := A + 1;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
->plant (accInUse=false):
 17 :acc= variable 0
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 18 :acc+ constant 1
->plant (accInUse=true):
 19 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := A + A;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
->plant (accInUse=false):
 20 :acc= variable 0
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 21 :acc+ variable 0
->plant (accInUse=true):
 22 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := A + READ;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
->plant (accInUse=false):
 23 :acc= variable 0
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
->plant (accInUse=true):
 24 :acc=> stack
Accu saved
 25 :call read
->plant (accInUse=true):
 26 :acc+ unstack
->plant (accInUse=true):
 27 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := READ + 1;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
->plant (accInUse=false):
 28 :call read
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 29 :acc+ constant 1
->plant (accInUse=true):
 30 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := READ + A;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
->plant (accInUse=false):
 31 :call read
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 32 :acc+ variable 0
->plant (accInUse=true):
 33 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := READ + READ;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
->plant (accInUse=false):
 34 :call read
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
->plant (accInUse=true):
 35 :acc=> stack
Accu saved
 36 :call read
->plant (accInUse=true):
 37 :acc+ unstack
->plant (accInUse=true):
 38 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := 9 - 1;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 9
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - sub
->plant (accInUse=false):
 39 :acc= constant 9
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 40 :acc- constant 1
->plant (accInUse=true):
 41 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := 9 - A;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 9
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - sub
->plant (accInUse=false):
 42 :acc= constant 9
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 43 :acc- variable 0
->plant (accInUse=true):
 44 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := 9 - READ;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 9
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - sub
->plant (accInUse=false):
 45 :acc= constant 9
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
->plant (accInUse=true):
 46 :acc=> stack
Accu saved
 47 :call read
->plant (accInUse=true):
 48 :-acc unstack
->plant (accInUse=true):
 49 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := A - 1;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - sub
->plant (accInUse=false):
 50 :acc= variable 0
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 51 :acc- constant 1
->plant (accInUse=true):
 52 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := A - A;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - sub
->plant (accInUse=false):
 53 :acc= variable 0
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 54 :acc- variable 0
->plant (accInUse=true):
 55 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := A - READ;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - sub
->plant (accInUse=false):
 56 :acc= variable 0
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
->plant (accInUse=true):
 57 :acc=> stack
Accu saved
 58 :call read
->plant (accInUse=true):
 59 :-acc unstack
->plant (accInUse=true):
 60 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := READ - 1;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - sub
->plant (accInUse=false):
 61 :call read
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 62 :acc- constant 1
->plant (accInUse=true):
 63 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := READ - A;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - sub
->plant (accInUse=false):
 64 :call read
lexeme=name A@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
 65 :acc- variable 0
->plant (accInUse=true):
 66 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  B := READ - READ;

lexeme=name B@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - sub
->plant (accInUse=false):
 67 :call read
lexeme=READ
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
->plant (accInUse=true):
->plant (accInUse=true):
 68 :acc=> stack
Accu saved
 69 :call read
->plant (accInUse=true):
 70 :-acc unstack
->plant (accInUse=true):
 71 :acc=> variable 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
END.

lexeme=END
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=.
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
prog end
->plant (accInUse=false):
 72 :stop
Assembly listing of compiled code:
----------------------------------
  0 :acc= constant 1
  1 :acc=> variable 0
  2 :call read
  3 :acc=> variable 0
  4 :acc= variable 0
  5 :acc=> variable 1
  6 :acc= constant 2
  7 :acc+ constant 1
  8 :acc=> variable 1
  9 :acc= constant 1
 10 :acc+ variable 0
 11 :acc=> variable 1
 12 :acc= constant 1
 13 :acc=> stack
 14 :call read
 15 :acc+ unstack
 16 :acc=> variable 1
 17 :acc= variable 0
 18 :acc+ constant 1
 19 :acc=> variable 1
 20 :acc= variable 0
 21 :acc+ variable 0
 22 :acc=> variable 1
 23 :acc= variable 0
 24 :acc=> stack
 25 :call read
 26 :acc+ unstack
 27 :acc=> variable 1
 28 :call read
 29 :acc+ constant 1
 30 :acc=> variable 1
 31 :call read
 32 :acc+ variable 0
 33 :acc=> variable 1
 34 :call read
 35 :acc=> stack
 36 :call read
 37 :acc+ unstack
 38 :acc=> variable 1
 39 :acc= constant 9
 40 :acc- constant 1
 41 :acc=> variable 1
 42 :acc= constant 9
 43 :acc- variable 0
 44 :acc=> variable 1
 45 :acc= constant 9
 46 :acc=> stack
 47 :call read
 48 :-acc unstack
 49 :acc=> variable 1
 50 :acc= variable 0
 51 :acc- constant 1
 52 :acc=> variable 1
 53 :acc= variable 0
 54 :acc- variable 0
 55 :acc=> variable 1
 56 :acc= variable 0
 57 :acc=> stack
 58 :call read
 59 :-acc unstack
 60 :acc=> variable 1
 61 :call read
 62 :acc- constant 1
 63 :acc=> variable 1
 64 :call read
 65 :acc- variable 0
 66 :acc=> variable 1
 67 :call read
 68 :acc=> stack
 69 :call read
 70 :-acc unstack
 71 :acc=> variable 1
 72 :stop


nextVariable:4
vars.length:4
Running compiled code...

pc=0 : acc= constant 1
pc=1 : acc=> variable 0
pc=2 : call read
read:2

pc=3 : acc=> variable 0
pc=4 : acc= variable 0
pc=4 vars[0]
pc=5 : acc=> variable 1
pc=6 : acc= constant 2
pc=7 : acc+ constant 1
pc=8 : acc=> variable 1
pc=9 : acc= constant 1
pc=10 : acc+ variable 0
pc=10 vars[0]
pc=11 : acc=> variable 1
pc=12 : acc= constant 1
pc=13 : acc=> stack
pc=14 : call read
read:3

pc=15 : acc+ unstack
pc=16 : acc=> variable 1
pc=17 : acc= variable 0
pc=17 vars[0]
pc=18 : acc+ constant 1
pc=19 : acc=> variable 1
pc=20 : acc= variable 0
pc=20 vars[0]
pc=21 : acc+ variable 0
pc=21 vars[0]
pc=22 : acc=> variable 1
pc=23 : acc= variable 0
pc=23 vars[0]
pc=24 : acc=> stack
pc=25 : call read
read:4

pc=26 : acc+ unstack
pc=27 : acc=> variable 1
pc=28 : call read
read:5

pc=29 : acc+ constant 1
pc=30 : acc=> variable 1
pc=31 : call read
read:6

pc=32 : acc+ variable 0
pc=32 vars[0]
pc=33 : acc=> variable 1
pc=34 : call read
read:7

pc=35 : acc=> stack
pc=36 : call read
read:8

pc=37 : acc+ unstack
pc=38 : acc=> variable 1
pc=39 : acc= constant 9
pc=40 : acc- constant 1
pc=41 : acc=> variable 1
pc=42 : acc= constant 9
pc=43 : acc- variable 0
pc=43 vars[0]
pc=44 : acc=> variable 1
pc=45 : acc= constant 9
pc=46 : acc=> stack
pc=47 : call read
read:0

pc=48 : -acc unstack
pc=49 : acc=> variable 1
pc=50 : acc= variable 0
pc=50 vars[0]
pc=51 : acc- constant 1
pc=52 : acc=> variable 1
pc=53 : acc= variable 0
pc=53 vars[0]
pc=54 : acc- variable 0
pc=54 vars[0]
pc=55 : acc=> variable 1
pc=56 : acc= variable 0
pc=56 vars[0]
pc=57 : acc=> stack
pc=58 : call read
read:
*** runtime error: read beyond input
pc=58 : call read

variable 0 = 2
variable 1 = 0
variable 2 = null
variable 3 = null

accumulator = 2
stackpointer= 1

stack item 0 = 2

