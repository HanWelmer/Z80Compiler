2000             SOC     equ 02000H        ;start of code, i.e.lowest external RAM address.
2000             TOS     equ 0FD00H        ;top of stack, i.e. bottom of MONITOR user global data.
2000                     .ORG  SOC
2000             start:
2000 31 00 FD            LD    SP,TOS
2003             L0:
2003 CD A8 20            CALL  L81
2006             L1:
2006 C3 71 01            JP    00171H      ;Jump to Zilog Z80183 Monitor.
2009             L2:
2009                     ;;NoModifier.j(0) /*
2009             L3:
2009                     ;;NoModifier.j(1)  * A small program in the miniJava language.
2009             L4:
2009                     ;;NoModifier.j(2)  * Test final modifier in a local variable declaration.
2009             L5:
2009                     ;;NoModifier.j(3)  */
2009             L6:
2009                     ;;NoModifier.j(4) class NoModifier {
2009             L7:
2009                     ;class NoModifier []
2009             L8:
2009                     ;;NoModifier.j(5)   public static void doByte() {
2009             L9:
2009                     ;method doByte [public, static] void ()
2009             L10:
2009 DD E5               PUSH  IX
200B             L11:
200B DD 21 00 00         LD    IX,0x0000
200F DD 39               ADD   IX,SP
2011             L12:
2011 21 FF FF            LD    HL,65535
2014 39                  ADD   HL,SP
2015 F9                  LD    SP,HL
2016             L13:
2016                     ;;NoModifier.j(6)     byte b = 1;
2016             L14:
2016 3E 01               LD    A,1
2018             L15:
2018 DD 77 FF            LD    (IX - 1),A
201B             L16:
201B                     ;;NoModifier.j(7)     println(b);
201B             L17:
201B DD 7E FF            LD    A,(IX - 1)
201E             L18:
201E CD 83 22            CALL  writeLineA
2021             L19:
2021                     ;;NoModifier.j(8)   }
2021             L20:
2021 DD F9               LD    SP,IX
2023             L21:
2023 DD E1               POP   IX
2025             L22:
2025 C9                  return
2026             L23:
2026                     ;;NoModifier.j(9)   public static void doByteWord() {
2026             L24:
2026                     ;method doByteWord [public, static] void ()
2026             L25:
2026 DD E5               PUSH  IX
2028             L26:
2028 DD 21 00 00         LD    IX,0x0000
202C DD 39               ADD   IX,SP
202E             L27:
202E 21 FD FF            LD    HL,65533
2031 39                  ADD   HL,SP
2032 F9                  LD    SP,HL
2033             L28:
2033                     ;;NoModifier.j(10)     byte b = 2;
2033             L29:
2033 3E 02               LD    A,2
2035             L30:
2035 DD 77 FF            LD    (IX - 1),A
2038             L31:
2038                     ;;NoModifier.j(11)     word w = 3333;
2038             L32:
2038 21 05 0D            LD    HL,3333
203B             L33:
203B DD 75 FD            LD    (IX - 3),L
203E DD 74 FE            LD    (IX - 2),H
2041             L34:
2041                     ;;NoModifier.j(12)     println(b);
2041             L35:
2041 DD 7E FF            LD    A,(IX - 1)
2044             L36:
2044 CD 83 22            CALL  writeLineA
2047             L37:
2047                     ;;NoModifier.j(13)     println(w);
2047             L38:
2047 DD 6E FD            LD    L,(IX - 3)
204A DD 66 FE            LD    H,(IX - 2)
204D             L39:
204D CD 5B 22            CALL  writeLineHL
2050             L40:
2050                     ;;NoModifier.j(14)   }
2050             L41:
2050 DD F9               LD    SP,IX
2052             L42:
2052 DD E1               POP   IX
2054             L43:
2054 C9                  return
2055             L44:
2055                     ;;NoModifier.j(15)   public static void doWordByte() {
2055             L45:
2055                     ;method doWordByte [public, static] void ()
2055             L46:
2055 DD E5               PUSH  IX
2057             L47:
2057 DD 21 00 00         LD    IX,0x0000
205B DD 39               ADD   IX,SP
205D             L48:
205D 21 FD FF            LD    HL,65533
2060 39                  ADD   HL,SP
2061 F9                  LD    SP,HL
2062             L49:
2062                     ;;NoModifier.j(16)     word w = 5555;
2062             L50:
2062 21 B3 15            LD    HL,5555
2065             L51:
2065 DD 75 FE            LD    (IX - 2),L
2068 DD 74 FF            LD    (IX - 1),H
206B             L52:
206B                     ;;NoModifier.j(17)     byte b = 4;
206B             L53:
206B 3E 04               LD    A,4
206D             L54:
206D DD 77 FD            LD    (IX - 3),A
2070             L55:
2070                     ;;NoModifier.j(18)     println(b);
2070             L56:
2070 DD 7E FD            LD    A,(IX - 3)
2073             L57:
2073 CD 83 22            CALL  writeLineA
2076             L58:
2076                     ;;NoModifier.j(19)     println(w);
2076             L59:
2076 DD 6E FE            LD    L,(IX - 2)
2079 DD 66 FF            LD    H,(IX - 1)
207C             L60:
207C CD 5B 22            CALL  writeLineHL
207F             L61:
207F                     ;;NoModifier.j(20)   }
207F             L62:
207F DD F9               LD    SP,IX
2081             L63:
2081 DD E1               POP   IX
2083             L64:
2083 C9                  return
2084             L65:
2084                     ;;NoModifier.j(21)   public static void doString() {
2084             L66:
2084                     ;method doString [public, static] void ()
2084             L67:
2084 DD E5               PUSH  IX
2086             L68:
2086 DD 21 00 00         LD    IX,0x0000
208A DD 39               ADD   IX,SP
208C             L69:
208C 21 FE FF            LD    HL,65534
208F 39                  ADD   HL,SP
2090 F9                  LD    SP,HL
2091             L70:
2091                     ;;NoModifier.j(22)     String str = "Hallo Wereld";
2091             L71:
2091 21 D7 20            LD    HL,L107
2094             L72:
2094 DD 75 FE            LD    (IX - 2),L
2097 DD 74 FF            LD    (IX - 1),H
209A             L73:
209A                     ;;NoModifier.j(23)     println(str);
209A             L74:
209A DD 6E FE            LD    L,(IX - 2)
209D DD 66 FF            LD    H,(IX - 1)
20A0             L75:
20A0 CD 08 21            CALL  writeLineStr
20A3             L76:
20A3                     ;;NoModifier.j(24)   }
20A3             L77:
20A3 DD F9               LD    SP,IX
20A5             L78:
20A5 DD E1               POP   IX
20A7             L79:
20A7 C9                  return
20A8             L80:
20A8                     ;;NoModifier.j(25)   public static void main() {
20A8             L81:
20A8                     ;method main [public, static] void ()
20A8             L82:
20A8 DD E5               PUSH  IX
20AA             L83:
20AA DD 21 00 00         LD    IX,0x0000
20AE DD 39               ADD   IX,SP
20B0             L84:
20B0 21 FF FF            LD    HL,65535
20B3 39                  ADD   HL,SP
20B4 F9                  LD    SP,HL
20B5             L85:
20B5                     ;;NoModifier.j(26)     byte b = 0;
20B5             L86:
20B5 3E 00               LD    A,0
20B7             L87:
20B7 DD 77 FF            LD    (IX - 1),A
20BA             L88:
20BA                     ;;NoModifier.j(27)     println(b);
20BA             L89:
20BA DD 7E FF            LD    A,(IX - 1)
20BD             L90:
20BD CD 83 22            CALL  writeLineA
20C0             L91:
20C0                     ;;NoModifier.j(28)     doString();
20C0             L92:
20C0 CD 84 20            CALL  L66
20C3             L93:
20C3                     ;;NoModifier.j(29)     doByte();
20C3             L94:
20C3 CD 09 20            CALL  L9
20C6             L95:
20C6                     ;;NoModifier.j(30)     doByteWord();
20C6             L96:
20C6 CD 26 20            CALL  L24
20C9             L97:
20C9                     ;;NoModifier.j(31)     doWordByte();
20C9             L98:
20C9 CD 55 20            CALL  L45
20CC             L99:
20CC                     ;;NoModifier.j(32)     println("klaar");
20CC             L100:
20CC 21 E4 20            LD    HL,L108
20CF             L101:
20CF CD 08 21            CALL  writeLineStr
20D2             L102:
20D2                     ;;NoModifier.j(33)   }
20D2             L103:
20D2 DD F9               LD    SP,IX
20D4             L104:
20D4 DD E1               POP   IX
20D6             L105:
20D6 C9                  return
20D7             L106:
20D7                     ;;NoModifier.j(34) }
20D7             L107:
20D7 48 61 6C 6C
     6F 20 57 65
     72 65 6C 64
     00                  .ASCIZ  "Hallo Wereld"
20E4             L108:
20E4 6B 6C 61 61
     72 00               .ASCIZ  "klaar"
20EA             CNTLA0  equ 000H          ;144 ASCI0 Control Register A.
20EA             STAT0   equ 004H          ;147 ASCI0 Status register.
20EA             TDR0    equ 006H          ;148 ASCI0 Transmit Data Register.
20EA             RDR0    equ 008H          ;149 ASCI0 Receive Data Register.
20EA             ERROR   equ 3             ;CNTLA0->OVRN,FE,PE,BRK error flags.
20EA             TDRE    equ 1             ;STAT0->Tx data register empty bit.
20EA             OVERRUN equ 6             ;STAT0->OVERRUN bit.
20EA             RDRF    equ 7             ;STAT0->Rx data register full bit.
20EA             ;****************
20EA             ;getChar
20EA             ;Check if an input character from ASCI0 is available.
20EA             ;  IN:  none
20EA             ;  OUT: F: ZERO flag set if no character is available.
20EA             ;          ZERO flag reset if a character is available.
20EA             ;       A : character from ASCI0, if available.
20EA             ;  USES:AF
20EA             ;****************
20EA             getChar:
20EA ED 38 04            IN0   A,(STAT0)   ;read ASCI0 status
20ED CB 77               BIT   OVERRUN,A   ;check if ASCIO OVERRUN bit is set
20EF 20 07               JR    NZ,getChar1 ;-yes: reset error flags
20F1 CB 7F               BIT   RDRF,A      ;check if ASCIO RDRF bit is set
20F3 C8                  RET   Z           ;-no: return without a character
20F4 ED 38 08            IN0   A,(RDR0)    ;-yes:read ASCIO Rx data register
20F7 C9                  RET
20F8             getChar1:
20F8 ED 38 00            IN0   A,(CNTLA0)  ;read ASCI0 control register
20FB CB 9F               RES   ERROR,A     ;reset OVRN,FE,PE,BRK flags
20FD ED 39 00            OUT0  (CNTLA0),A  ;write back to ASCI0 CTRL
2100 AF                  XOR   A,A
2101 C9                  RET               ;return without a character
2102             ;****************
2102             ;putMsg
2102             ;Print via ASCI0 a zero terminated string, starting at the return address on the stack.
2102             ;  IN:  none.
2102             ;  OUT: none.
2102             ;  USES:none.
2102             ;****************
2102             putMsg:
2102 E3                  EX    (SP),HL     ;save HL and load return address into HL.
2103 CD 0F 21            CALL  writeStr
2106 E3                  EX    (SP),HL     ;put return address onto stack and restore HL.
2107 C9                  RET
2108             ;****************
2108             ;writeLineStr
2108             ;Print via ASCI0 a zero terminated string, pointed to by HL, followed by a carriage return.
2108             ;  IN:  HL:address of zero terminated string to be printed.
2108             ;  OUT: none.
2108             ;  USES:HL (point to byte after zero terminated string)
2108             ;****************
2108             writeLineStr:
2108 CD 0F 21            CALL  writeStr
210B CD 2B 21            CALL  putCRLF
210E C9                  RET
210F             ;****************
210F             ;writeStr
210F             ;Print via ASCI0 a zero terminated string, pointed to by HL.
210F             ;  IN:  HL:address of zero terminated string to be printed.
210F             ;  OUT: none.
210F             ;  USES:HL (point to byte after zero terminated string)
210F             ;****************
210F             writeStr:
210F F5                  PUSH  AF          ;save registers
2110             putStr1:
2110 7E                  LD    A,(HL)      ;get next character
2111 23                  INC   HL
2112 B7                  OR    A,A         ;is it zer0?
2113 28 05               JR    Z,putStr2   ;yes ->return
2115 CD 1E 21            CALL  putChar     ;no->put it to ASCI0
2118 18 F6               JR    putStr1
211A             putStr2:
211A F1                  POP   AF
211B C9                  RET
211C             ;****************
211C             ;putSpace
211C             ;Send a space character to ASCI0
211C             ;  IN:  none.
211C             ;  OUT: none.
211C             ;  USES:AF
211C             ;****************
211C             putSpace:
211C 3E 20               LD    A,' '       ;load space and continue with putChar.
211E             ;****************
211E             ;putChar
211E             ;Send one character to ASCI0.
211E             ;  IN:  A = character
211E             ;  OUT: none.
211E             ;  USES:none.
211E             ;****************
211E             putChar:
211E F5                  PUSH  AF          ;send the character via ASCI0
211F             putChar1:
211F ED 38 04            IN0   A,(STAT0)   ;read ASCI0 status register
2122 CB 4F               BIT   TDRE,A      ;wait until TDRE <> 0
2124 28 F9               JR    Z,putChar1
2126 F1                  POP   AF          ;restore AF registers
2127 ED 39 06            OUT0  (TDR0),A    ;write character to ASCI0
212A C9                  RET
212B             ;****************
212B             ;putCRLF
212B             ;Send CR and LF to ASCI0
212B             ;  IN:  none.
212B             ;  OUT: none.
212B             ;  USES:none.
212B             ;****************
212B             putCRLF:
212B F5                  PUSH  AF
212C 3E 0D               LD    A,'\r'       ;print carriage return
212E CD 1E 21            CALL  putChar
2131 3E 0A               LD    A,'\n'       ;print line feed
2133 CD 1E 21            CALL  putChar
2136 F1                  POP   AF
2137 C9                  RET
2138             ;****************
2138             ;putErase
2138             ;Erase the latest character at ASCI0
2138             ;  IN:  none.
2138             ;  OUT: none.
2138             ;  USES:AF
2138             ;****************
2138             putErase:
2138 3E 08               LD    A,'\b'       ;print backspace
213A CD 1E 21            CALL  putChar
213D CD 1C 21            CALL  putSpace    ;print space (erase character)
2140 3E 08               LD    A,'\b'      ;print backspace
2142 18 DA               JR    putChar
2144             ;****************
2144             ;putBell
2144             ;Send a Bell character to ASCI0
2144             ;  IN:  none.
2144             ;  OUT: none.
2144             ;  USES:AF
2144             ;****************
2144             putBell:
2144 3E 07               LD    A,07        ;ring the bell at ASCI0
2146 18 D6               JR    putChar
2148             ;****************
2148             ;putHexHL
2148             ;Print HL register pair as 4 hex digits
2148             ;  IN:  HL = word to be printed.
2148             ;  OUT: none.
2148             ;  USES:none.
2148             ;****************
2148             putHexHL:
2148 F5                  PUSH  AF          ;save used registers
2149 7C                  LD    A,H         ;print H as 2 hex digits
214A CD 53 21            CALL  putHexA
214D 7D                  LD    A,L         ;print L as 2 hex digits
214E CD 53 21            CALL  putHexA
2151 F1                  POP   AF          ;restore used registers
2152 C9                  RET
2153             ;****************
2153             ;putHexA
2153             ;Print A register as 2 hex digits
2153             ;  IN:  A = byte to be printed
2153             ;  OUT: none.
2153             ;  USES:none.
2153             ;****************
2153             putHexA:
2153 F5                  PUSH  AF          ;save input
2154 1F                  RRA               ;shift upper nibble to the right
2155 1F                  RRA
2156 1F                  RRA
2157 1F                  RRA
2158 CD 5C 21            CALL  putHexA1    ;print upper nibble
215B F1                  POP   AF          ;restore input & print lower nibble
215C             putHexA1:
215C F5                  PUSH  AF          ;save input
215D E6 0F               AND   A,00FH      ;mask lower nibble
215F C6 30               ADD   A,'0'       ;convert to hex digit
2161 FE 3A               CP    A,'9'+1
2163 38 02               JR    C,putHexA2
2165 C6 07               ADD   A,07
2167             putHexA2:
2167 CD 1E 21            CALL  putChar
216A F1                  POP   AF          ;restore input
216B C9                  RET               ;and return
216C             ;****************
216C             ;mul16
216C             ;16 by 16 bit unsigned multiplication with 16 bit result.
216C             ;  IN:  HL = operand 1
216C             ;       DE = operand 2
216C             ;  OUT: HL = HL * DE low part
216C             ;  USES:DE
216C             ;  Size   25 bytes
216C             ;  Time  160 cycles
216C             ;****************
216C             mul16:
216C                     ;HL = HL * DE
216C                     ;        H  L
216C                     ;        D  E
216C                     ;    --------*
216C                     ;          EL
216C                     ;       EH  0
216C                     ;       DL  0
216C                     ; -----------+
216C                     ;        R  S
216C                     ;S = ELlow
216C                     ;R = ELhigh+EHlow+DLlow
216C C5                  PUSH  BC          ;11  11 save BC
216D 44                  LD    B,H         ; 4  15 copy HL to BC
216E 4D                  LD    C,L         ; 4  19
216F 63                  LD    H,E         ; 4  23 HL contains EL
2170 ED 6C               MLT   HL          ;17  40
2172 E5                  PUSH  HL          ;11  51
2173 63                  LD    H,E         ; 4  55 HL contains EH aka EB
2174 68                  LD    L,B         ; 4  59
2175 ED 6C               MLT   HL          ;17  76
2177 45                  LD    B,L         ; 4  80 save EHlow in B
2178 62                  LD    H,D         ; 4  84 HL contains DL aka DC
2179 69                  LD    L,C         ; 4  88
217A ED 6C               MLT   HL          ;17 105
217C 55                  LD    D,L         ; 4 109 DLlow into DE
217D 1E 00               LD    E,0         ; 6 115
217F E1                  POP   HL          ; 9 124 add EL+DElow
2180 19                  ADD   HL,DE       ; 7 131
2181 50                  LD    D,B         ; 4 135 add EL+DElow+EHlow
2182 19                  ADD   HL,DE       ; 7 142
2183 C1                  POP   BC          ; 9 151 restore BC
2184 C9                  RET               ; 9 160
2185             ;****************
2185             ;mul16_10
2185             ;multiply a 16 bit unsigned number by 10 with a 16 bit result.
2185             ;  IN:  HL = operand
2185             ;  OUT: HL = HL * 10; low part
2185             ;  USES:Flags
2185             ;  Size   9 bytes
2185             ;  Time   65 cycles
2185             ;****************
2185             mul16_10:
2185 D5                  PUSH  DE          ;11 11
2186 54                  LD    D,H         ; 4 15
2187 5D                  LD    E,L         ; 4 19
2188 29                  ADD   HL,HL       ; 7 26 times 2
2189 29                  ADD   HL,HL       ; 7 33 times 4
218A 19                  ADD   HL,DE       ; 7 40 times 5
218B 29                  ADD   HL,HL       ; 7 47 times 10
218C D1                  POP   DE          ; 9 56
218D C9                  RET               ; 9 65
218E             ;****************
218E             ;mul16_8
218E             ;16 by 8 bit unsigned multiplication with 16 bit result.
218E             ;  IN:  HL = operand 1
218E             ;        A = operand 2
218E             ;  OUT: HL = HL * A low part
218E             ;  USES:AF
218E             ;  Size   .. bytes
218E             ;  Time  ... cycles
218E             ;****************
218E             mul16_8:
218E                     ;HL = HL * A
218E                     ;        H  L
218E                     ;           A
218E                     ;    --------*
218E                     ;          AL
218E                     ;       AH  0
218E                     ; -----------+
218E                     ;        R  S
218E                     ;S = ALlow
218E                     ;R = ALhigh+AHlow
218E C5                  PUSH  BC          ;11  11 save BC
218F 44                  LD    B,H         ; 4  15
2190 4F                  LD    C,A         ; 4  19
2191 67                  LD    H,A         ; 4  23
2192 ED 6C               MLT   HL          ;17  40 HL = AL
2194 ED 4C               MLT   BC          ;17  57 BC = AH
2196 7C                  LD    A,H         ; 4  61 A = S = ALhigh+AHlow
2197 81                  ADD   A,C         ; 4  65
2198 67                  LD    H,A         ; 4  69
2199 C1                  POP   BC          ; 9  78 | 289 restore BC
219A C9                  RET               ; 9  87 | 307
219B             ;****************
219B             ;mul1632
219B             ;16 by 16 bit unsigned multiplication with 32 bit result.
219B             ;  IN:  HL = operand 1
219B             ;       DE = operand 2
219B             ;  OUT: HL = HL * DE low part
219B             ;       DE = HL * DE high part
219B             ;  USES:-
219B             ;  Size 49 bytes
219B             ;  Time between 303 en 307 cycles
219B             ;****************
219B             mul1632:
219B                     ;HL = HL * DE
219B                     ;        H  L
219B                     ;        D  E
219B                     ;    --------*
219B                     ;          EL
219B                     ;       EH  0
219B                     ;       DL  0
219B                     ;    DH  0  0
219B                     ; -----------+
219B                     ;  P  Q  R  S
219B                     ;S = ELlow
219B                     ;R = ELhigh+EHlow+DLlow
219B                     ;Q = DHlow+EHhigh+DLhigh
219B                     ;P = DHhigh
219B F5                  PUSH  AF          ;11  11 save AF
219C C5                  PUSH  BC          ;11  22 save BC
219D 44                  LD    B,H         ; 4  26
219E 4D                  LD    C,L         ; 4  30
219F 62                  LD    H,D         ; 4  34 HL contains DH aka DB
21A0 68                  LD    L,B         ; 4  38
21A1 ED 6C               MLT   HL          ;17  55
21A3 E5                  PUSH  HL          ;11  66
21A4 62                  LD    H,D         ; 4  70 HL contains DL aka DC
21A5 69                  LD    L,C         ; 4  74
21A6 ED 6C               MLT   HL          ;17  91
21A8 E5                  PUSH  HL          ;11 102
21A9 63                  LD    H,E         ; 4 106 HL contains EH aka EB
21AA 68                  LD    L,B         ; 4 110
21AB ED 6C               MLT   HL          ;17 127
21AD E5                  PUSH  HL          ;11 138
21AE 63                  LD    H,E         ; 4 142 HL contains EL aka EC
21AF 69                  LD    L,C         ; 4 146
21B0 ED 6C               MLT   HL          ;17 163
21B2 D1                  POP   DE          ; 9 172 calculate RS=EL+EH0
21B3 06 00               LD    B,0         ; 6 178
21B5 4A                  LD    C,D         ; 4 182 ..C=EHhigh
21B6 53                  LD    D,E         ; 4 186 ..D=EHlow
21B7 1E 00               LD    E,0         ; 6 192
21B9 19                  ADD   HL,DE       ; 7 199
21BA 30 01               JR    NC,mul16321 ; 8 207 | 6 205 add carry to PQ
21BC 03                  INC   BC          ;         4 209
21BD             mul16321:
21BD D1                  POP   DE          ; 9 209 | 211 calculate RS=EL+EH0+DL0
21BE 7A                  LD    A,D         ; 4 220 | 222 ..A=DLhigh
21BF 53                  LD    D,E         ; 4 224 | 226 ..D=DLlow
21C0 19                  ADD   HL,DE       ; 7 231 | 233
21C1 30 01               JR    NC,mul16322 ; 8 239 | 6 239 add carry to PQ
21C3 03                  INC   BC          ;         4 243
21C4             mul16322:
21C4                                       ;HL=RS=EL+EH0+DL0
21C4                                       ;C=EHhigh
21C4                                       ;A=DLhigh
21C4                                       ;E=0
21C4 EB                  EX    DE,HL       ; 3 242 | 246
21C5 65                  LD    H,L         ; 4 246 | 250 ..E was 0, so H=L=0
21C6 6F                  LD    L,A         ; 4 250 | 254 ..HL=DLhigh
21C7 09                  ADD   HL,BC       ; 7 257 | 261 PQ=EHhigh+DLhigh+DH
21C8 C1                  POP   BC          ; 9 266 | 270
21C9 09                  ADD   HL,BC       ; 7 273 | 277
21CA EB                  EX    DE,HL       ; 3 276 | 280
21CB                                       ;D=P=DHhigh
21CB                                       ;E=Q=DHlow+EHhigh+DLhigh
21CB                                       ;H=R=ELhigh+EHlow+DLlow
21CB                                       ;L=S=ELlow
21CB C1                  POP   BC          ; 9 285 | 289 restore BC
21CC F1                  POP   AF          ; 9 294 | 298 restore AF
21CD C9                  RET               ; 9 303 | 307
21CE             ;****************
21CE             ;mul16S
21CE             ;16 by 16 bit slow unsigned multiplication with 32 bit result.
21CE             ;  IN:  HL = operand 1
21CE             ;       DE = operand 2
21CE             ;  OUT: DE = HL * DE high part
21CE             ;       HL = HL * DE low part
21CE             ;  USES:none.
21CE             ;  Size 26 bytes
21CE             ;  Time between 726 en 998 cycles
21CE             ;****************
21CE             mul16S:
21CE F5                  PUSH  AF          ;11  11 save AF
21CF C5                  PUSH  BC          ;11  22 save BC
21D0 44                  LD    B,H         ; 4  26
21D1 4D                  LD    C,L         ; 4  30
21D2 21 00 00            LD    HL,0        ; 9  39
21D5 3E 10               LD    A,16        ; 6  45
21D7             mul16S1:
21D7 29                  ADD   HL,HL       ;16*7=112 157
21D8 CB 13               RL    E           ;16*7=112 269
21DA CB 12               RL    D           ;16*7=112 381
21DC 30 04               JR    NC,mul16S2  ;16*8=128 509 16*6= 96 477
21DE 09                  ADD   HL,BC       ;             16*7=112 589
21DF 30 01               JR    NC,mul16S2  ;             16*8=128 717 16*6=96 685
21E1 13                  INC   DE          ;             16*4= 64 781 16*4=64 749 This instruction (with the jump) is like an "ADC DE,0"
21E2             mul16S2:
21E2 3D                  DEC   A           ;16*4=64    573 | 845 | 813
21E3 20 F2               JR    NZ,mul16S1  ;15*8+6=126 699 | 971 | 939
21E5 C1                  POP   BC          ; 9         708 | 980 | 948 restore BC
21E6 F1                  POP   AF          ; 9         717 | 989 | 957 restore AF
21E7 C9                  RET               ; 9         726 | 998 | 966
21E8             ;****************
21E8             ;div16
21E8             ;16 by 16 bit unsigned division.
21E8             ;  IN:  HL = dividend
21E8             ;       DE = divisor
21E8             ;  OUT: HL = quotient
21E8             ;       DE = remainder
21E8             ;  USES:-
21E8             ;  Size   32 bytes
21E8             ;  Time   between 1073 en 1121 cycles
21E8             ;pseudo code:
21E8             ;T = AC = dividend
21E8             ;D = DE = divisor
21E8             ;Q = AC = quotient = 0
21E8             ;R = HL = remainder = 0
21E8             ;invariante betrekking:
21E8             ; D/T\Q     
21E8             ;   R       
21E8             ; T = QD + R
21E8             ; T <= 2^N  
21E8             ;
21E8             ; D/T'.RT\Q'      
21E8             ;   R'             
21E8             ; RT <= 2^N        
21E8             ; 0<=k<=N          
21E8             ; RT = T % 2^k     
21E8             ; T' = (T-RT) / 2^k
21E8             ; Q' = T' / D      
21E8             ; R' = T' % D      
21E8             ;
21E8             ;for (i=16; i>0; i--) {
21E8             ;  T = T * 2 (remember MSB in carry)
21E8             ;  R = R * 2 + carry
21E8             ;  Q = Q * 2
21E8             ;  if (R >= D) {
21E8             ;    R = R - D;
21E8             ;    Q++;
21E8             ;  }
21E8             ;}
21E8             ;return Q (in HL) and R (in DE)
21E8             ;****************
21E8             div16:
21E8 F5                  PUSH  AF          ;11  11 save registers used
21E9 C5                  PUSH  BC          ;11  22
21EA 4D                  LD    C,L         ; 4  26 T(AC) = teller from input (HL)
21EB 7C                  LD    A,H         ; 4  30 D(DE) = deler from input  (DE)
21EC 21 00 00            LD    HL,0        ; 9  39 R(HL) = restant; Q(AC) = quotient
21EF 06 10               LD    B,16        ; 6  45 for (i=16; i>0; i--)
21F1             div16_1:
21F1 CB 21               SLA   C           ;16* 7=112 157   T = T * 2 (remember MSB in carry)
21F3 CB 17               RL    A           ;16* 7=112 269   Q = Q * 2
21F5 ED 6A               ADC   HL,HL       ;16*10=160 429   R = R * 2 + carry
21F7 B7                  OR    A,A         ;16* 4= 64 493   if (R >= D) {
21F8 ED 52               SBC   HL,DE       ;16*10=160 653
21FA 38 03               JR    C,div16_2   ;16* 8=128 781 16*6= 96 749   R = R - D
21FC 0C                  INC   C           ;              16*4= 64 813   Q++
21FD 18 01               JR    div16_3     ;              16*8=128 941
21FF             div16_2:
21FF 19                  ADD   HL,DE       ;16* 7=112 893  (compensate comparison)
2200             div16_3:
2200 10 EF               DJNZ  div16_1     ;15*9+7=142 1035 | 1083 }
2202 EB                  EX    DE,HL       ; 3 1038 | 1086 swap remainder (HL) into DE
2203 67                  LD    H,A         ; 4 1042 | 1090 move quotient (AC) into HL
2204 69                  LD    L,C         ; 4 1046 | 1094
2205 C1                  POP   BC          ; 9 1055 | 1103
2206 F1                  POP   AF          ; 9 1064 | 1112
2207 C9                  RET               ; 9 1073 | 1121
2208             ;****************
2208             ;div16_8
2208             ;16 by 8 bit unsigned division.
2208             ;  IN:  HL = dividend
2208             ;       A  = divisor
2208             ;  OUT: HL = quotient
2208             ;       A  = remainder
2208             ;  USES:F(lags)
2208             ;  Size 18 bytes
2208             ;  Time between 601 en 697 cycles
2208             ;****************
2208             div16_8:
2208 C5                  PUSH  BC          ;11 11 save registers used
2209 06 10               LD    B,16        ; 6 17 the length of the dividend (16 bits)
220B 4F                  LD    C,A         ; 4 21 move divisor to C
220C AF                  XOR   A,A         ; 4 25 clear upper 8 bits of AHL
220D             div16_82:
220D 29                  ADD   HL,HL       ;16*7=112 137 advance dividend (HL) into selected bits (A)
220E CB 17               RL    A           ;16*7=112 249
2210 B9                  CP    A,C         ;16*4= 64 313 check if divisor (E) <= selected digits (A)
2211 38 02               JR    C,div16_83  ;16*8=128 441 16*6=96 409 if not, advance without subtraction
2213 91                  SUB   A,C         ;             16*4=64 473 subtract the divisor
2214 2C                  INC   L           ;             16*4=64 537 and set the next digit of the quotient
2215             div16_83:
2215 10 F6               DJNZ  div16_82    ;15*9+7=142 583 679
2217 C1                  POP   BC          ;9 592 688
2218 C9                  RET               ;9 601 697
2219             ;****************
2219             ;div8
2219             ;8 by 8 bit unsigned division.
2219             ;  IN:  A = dividend
2219             ;       C = divisor
2219             ;  OUT: A = quotient
2219             ;       C = remainder
2219             ;  USES:F(lags)
2219             ;  Size 26 bytes
2219             ;  Time between 411 and 459 cycles
2219             ;****************
2219             ;pseudo code:
2219             ;T = dividend
2219             ;D = divisor
2219             ;Q = quotient = 0
2219             ;R = remainder = 0
2219             ;invariante betrekking:
2219             ; T = QD + R
2219             ; T <= 2^8  
2219             ;
2219             ; D/T'.RT\Q'      
2219             ;   R'             
2219             ; RT <= 2^8        
2219             ; 0<=k<=8          
2219             ; RT = T % 2^k     
2219             ; T' = (T-RT) / 2^k
2219             ; Q' = T' / D      
2219             ; R' = T' % D      
2219             ;
2219             ;for (i=8; i>0; i--) {
2219             ;  T = T * 2 (remember MSB in carry)
2219             ;  R = R * 2 + carry
2219             ;  Q = Q * 2
2219             ;  if (R >= D) {
2219             ;    R = R - D;
2219             ;    Q++;
2219             ;  }
2219             ;}
2219             ;return Q (in A) and R (in C)
2219             ;****************
2219             ;E = T = dividend
2219             ;C = D = divisor
2219             ;D = Q = quotient
2219             ;A = R = remainder
2219             ;****************
2219             ;  IN:  A = dividend
2219             ;       C  = divisor
2219             div8:
2219 D5                  PUSH  DE          ;11 11 save registers used
221A C5                  PUSH  BC          ;11 22 save registers used
221B 06 08               LD    B,8         ; 6 28 the length of the dividend (8 bits)
221D 16 00               LD    D,0         ; 6 34 D = Q = quotient = 0
221F 5F                  LD    E,A         ; 4 38 E = T = dividend
2220 AF                  XOR   A,A         ; 4 42 A = R = remainder = 0
2221             div8_1:
2221 CB 23               SLA   E           ;8*7=56  98            T[E] = T[E] * 2 (remember MSB in carry)
2223 CB 17               RL    A           ;8*7=56 154            R[A] = R[A] * 2 + carry
2225 CB 22               SLA   D           ;8*7=56 210            Q[D] = Q[D] * 2
2227 B9                  CP    A,C         ;8*4=32 242            if (R[A] - D[C] >= 0) {
2228 38 02               JR    C,div8_2    ;8*8=64 306 8*6=48 290
222A 91                  SUB   A,C         ;           8*4=32 322   R[A] = R[A] - D[C];
222B 14                  INC   D           ;           8*4=32 354   Q[D]++;
222C             div8_2:           ;                      }
222C 10 F3               DJNZ  div8_1      ;7*9+7=70 376 424      }
222E C1                  POP   BC          ;9        385 433
222F 4F                  LD    C,A         ;4        389 437      return Remainder[A] in C
2230 7A                  LD    A,D         ;4        393 441      return Quotient[D] in A
2231 D1                  POP   DE          ;9        402 450
2232 C9                  RET               ;9        411 459
2233             ;****************
2233             ;div8_16
2233             ;8 by 16 bit unsigned division.
2233             ;  IN:  A = dividend
2233             ;       HL = divisor
2233             ;  OUT: A = quotient
2233             ;       C = remainder
2233             ;  USES:F(lags)
2233             ;  Size 13 bytes (plus dependency on div8)
2233             ;  Time 31 or between 436 and 484 cycles
2233             ;****************
2233             ;invariante betrekking:
2233             ; T = dividend
2233             ; D = divisor
2233             ; Q = quotient
2233             ; R = remainder
2233             ; T = QD + R
2233             ;pseudo code:
2233             ; if D >= 256 {
2233             ;   R = T
2233             ;   Q = 0
2233             ; } else {
2233             ;   R = T/D (using div8)
2233             ;   Q = T%D (using div8)
2233             ; }
2233             ;****************
2233             
2233             
2233             div8_16:
2233 4F                  LD    C,A         ;  4  4         save dividend(A) in C
2234 7C                  LD    A,H         ;  4  8         if D >= 256 {
2235 B7                  OR    A,A         ;  4 12
2236 28 02               JR    Z,div8_161  ;  6 18  8  20
2238 AF                  XOR   A,A         ;  4 22           R = T;
2239 C9                  RET               ;  9 31           Q = 0;
223A             div8_161:                     ;               } else {
223A 79                  LD    A,C         ;        4  24    restore dividend into A
223B 4D                  LD    C,L         ;        4  28    load divisor (HL) into C
223C CD 19 22            CALL  div8        ; 16+411/16+459               R = T/D; Q = T%D;
223F C9                  RET               ; 9  436/484    }
2240             ;****************
2240             ;read
2240             ;read a 16 bit unsigned number from the input
2240             ;  IN:  none
2240             ;  OUT: HL = 16 bit unsigned number
2240             ;  USES:-
2240             ;****************
2240             read:
2240 F5                  PUSH  AF
2241 21 00 00            LD    HL,0        ;result = 0;
2244             read1:
2244 CD EA 20            CALL  getChar     ;check if a character is available.
2247 28 FB               JR    Z,read1     ;-no: wait for it.
2249 FE 0D               CP    A,'\r'      ;return if char == Carriage Return
224B 28 0C               JR    Z,read2
224D CD 85 21            CALL  mul16_10    ;result *= 10;
2250 D6 30               SUB   A,'0'       ;digit = char - '0';
2252 85                  ADD   A,L         ;result += digit;
2253 6F                  LD    L,A
2254 30 EE               JR    NC,read1     ;get next character
2256 24                  INC   H
2257 18 EB               JR    read1        ;get next character
2259             read2:
2259 F1                  POP   AF
225A C9                  RET
225B             ;****************
225B             ;writeLineHL
225B             ;write a 16 bit unsigned number to the output, followed by a carriage return
225B             ;  IN:  HL = 16 bit unsigned number
225B             ;  OUT: none
225B             ;  USES:HL
225B             ;****************
225B             writeLineHL:
225B CD 62 22            CALL  writeHL
225E CD 2B 21            CALL  putCRLF
2261 C9                  RET
2262             ;****************
2262             ;writeHL
2262             ;write a 16 bit unsigned number to the output
2262             ;  IN:  HL = 16 bit unsigned number
2262             ;  OUT: none
2262             ;  USES:HL
2262             ;****************
2262             writeHL:
2262 C5                  PUSH  BC          ;save registers used
2263 F5                  PUSH  AF
2264 06 00               LD    B,0         ;number of digits on stack
2266 7C                  LD    A,H         ;is HL=0?
2267 B5                  OR    A,L
2268 20 03               JR    NZ,writeHL1
226A 04                  INC   B           ;write a single digit 0
226B 18 0C               JR    writeHL3
226D             writeHL1:
226D 3E 0A               LD    A,10        ;divide HL by 10
226F CD 08 22            CALL  div16_8
2272 F5                  PUSH  AF          ;put remainder on stack
2273 04                  INC   B
2274 7C                  LD    A,H         ;is quotient 0?
2275 B5                  OR    A,L
2276 20 F5               JR    NZ,writeHL1
2278             writeHL2:
2278 F1                  POP   AF          ;write digit
2279             writeHL3:
2279 C6 30               ADD   A,'0'
227B CD 1E 21            CALL  putChar
227E 10 F8               DJNZ  writeHL2
2280 F1                  POP   AF          ;restore registers used
2281 C1                  POP   BC
2282 C9                  RET
2283             ;****************
2283             ;writeLineA
2283             ;write an 8-bit unsigned number to the output, followed by a carriage return
2283             ;  IN:  A = 8-bit unsigned number
2283             ;  OUT: none
2283             ;  USES:none
2283             ;****************
2283             writeLineA:
2283 CD 8A 22            CALL  writeA
2286 CD 2B 21            CALL  putCRLF
2289 C9                  RET
228A             ;****************
228A             ;writeA
228A             ;write an 8-bit unsigned number to the output
228A             ;  IN:  A = 8-bit unsigned number
228A             ;  OUT: none
228A             ;  USES:none
228A             ;****************
228A             writeA:
228A E5                  PUSH  HL          ;save registers used
228B 26 00               LD    H,0
228D 6F                  LD    L,A
228E CD 62 22            CALL  writeHL
2291 E1                  POP   HL
2292 C9                  RET

Labels and cross references:
      L0 = 2003 :
      L1 = 2006 :
     L10 = 2009 :
    L100 = 20CC :
    L101 = 20CF :
    L102 = 20D2 :
    L103 = 20D2 :
    L104 = 20D4 :
    L105 = 20D6 :
    L106 = 20D7 :
    L107 = 20D7 : 2091
    L108 = 20E4 : 20CC
     L11 = 200B :
     L12 = 2011 :
     L13 = 2016 :
     L14 = 2016 :
     L15 = 2018 :
     L16 = 201B :
     L17 = 201B :
     L18 = 201E :
     L19 = 2021 :
      L2 = 2009 :
     L20 = 2021 :
     L21 = 2023 :
     L22 = 2025 :
     L23 = 2026 :
     L24 = 2026 : 20C6
     L25 = 2026 :
     L26 = 2028 :
     L27 = 202E :
     L28 = 2033 :
     L29 = 2033 :
      L3 = 2009 :
     L30 = 2035 :
     L31 = 2038 :
     L32 = 2038 :
     L33 = 203B :
     L34 = 2041 :
     L35 = 2041 :
     L36 = 2044 :
     L37 = 2047 :
     L38 = 2047 :
     L39 = 204D :
      L4 = 2009 :
     L40 = 2050 :
     L41 = 2050 :
     L42 = 2052 :
     L43 = 2054 :
     L44 = 2055 :
     L45 = 2055 : 20C9
     L46 = 2055 :
     L47 = 2057 :
     L48 = 205D :
     L49 = 2062 :
      L5 = 2009 :
     L50 = 2062 :
     L51 = 2065 :
     L52 = 206B :
     L53 = 206B :
     L54 = 206D :
     L55 = 2070 :
     L56 = 2070 :
     L57 = 2073 :
     L58 = 2076 :
     L59 = 2076 :
      L6 = 2009 :
     L60 = 207C :
     L61 = 207F :
     L62 = 207F :
     L63 = 2081 :
     L64 = 2083 :
     L65 = 2084 :
     L66 = 2084 : 20C0
     L67 = 2084 :
     L68 = 2086 :
     L69 = 208C :
      L7 = 2009 :
     L70 = 2091 :
     L71 = 2091 :
     L72 = 2094 :
     L73 = 209A :
     L74 = 209A :
     L75 = 20A0 :
     L76 = 20A3 :
     L77 = 20A3 :
     L78 = 20A5 :
     L79 = 20A7 :
      L8 = 2009 :
     L80 = 20A8 :
     L81 = 20A8 : 2003
     L82 = 20A8 :
     L83 = 20AA :
     L84 = 20B0 :
     L85 = 20B5 :
     L86 = 20B5 :
     L87 = 20B7 :
     L88 = 20BA :
     L89 = 20BA :
      L9 = 2009 : 20C3
     L90 = 20BD :
     L91 = 20C0 :
     L92 = 20C0 :
     L93 = 20C3 :
     L94 = 20C3 :
     L95 = 20C6 :
     L96 = 20C6 :
     L97 = 20C9 :
     L98 = 20C9 :
     L99 = 20CC :
   div16 = 21E8 :
 div16_1 = 21F1 : 2200
 div16_2 = 21FF : 21FA
 div16_3 = 2200 : 21FD
 div16_8 = 2208 : 226F
div16_82 = 220D : 2215
div16_83 = 2215 : 2211
    div8 = 2219 : 223C
  div8_1 = 2221 : 222C
 div8_16 = 2233 :
div8_161 = 223A : 2236
  div8_2 = 222C : 2228
 getChar = 20EA : 2244
getChar1 = 20F8 : 20EF
   mul16 = 216C :
 mul1632 = 219B :
mul16321 = 21BD : 21BA
mul16322 = 21C4 : 21C1
  mul16S = 21CE :
 mul16S1 = 21D7 : 21E3
 mul16S2 = 21E2 : 21DC 21DF
mul16_10 = 2185 : 224D
 mul16_8 = 218E :
 putBell = 2144 :
 putCRLF = 212B : 210B 225E 2286
 putChar = 211E : 2115 212E 2133 213A 2142 2146 2167 227B
putChar1 = 211F : 2124
putErase = 2138 :
 putHexA = 2153 : 214A 214E
putHexA1 = 215C : 2158
putHexA2 = 2167 : 2163
putHexHL = 2148 :
  putMsg = 2102 :
putSpace = 211C : 213D
 putStr1 = 2110 : 2118
 putStr2 = 211A : 2113
    read = 2240 :
   read1 = 2244 : 2247 2254 2257
   read2 = 2259 : 224B
   start = 2000 :
  writeA = 228A : 2283
 writeHL = 2262 : 225B 228E
writeHL1 = 226D : 2268 2276
writeHL2 = 2278 : 227E
writeHL3 = 2279 : 226B
writeLineA = 2283 : 201E 2044 2073 20BD
writeLineHL = 225B : 204D 207C
writeLineStr = 2108 : 20A0 20CF
writeStr = 210F : 2103 2108
