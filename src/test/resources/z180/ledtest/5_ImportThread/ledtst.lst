2000             SOC     equ 02000H        ;start of code, i.e.lowest external RAM address.
2000             TOS     equ 0FD00H        ;top of stack, i.e. bottom of MONITOR user global data.
2000                     .ORG  SOC
2000             start:
2000 31 00 FD            LD    SP,TOS
2003             L0:
2003 CD AC 20            CALL  L223
2006             L1:
2006 C3 71 01            JP    00171H      ;Jump to Zilog Z80183 Monitor.
2009             L2:
2009                     ;;ledtst.j(0) /* Z80S183 program that tests switching on/off the LED at the PWRSWTCH  output. */
2009             L3:
2009                     ;;ledtst.j(1) /* Transcribed from LEDTest.asm to ledtest.j */
2009             L4:
2009                     ;;ledtst.j(2) 
2009             L5:
2009                     ;;ledtst.j(3) import Thread;
2009             L6:
2009             L7:
2009                     ;;Thread.j(0) 
2009             L8:
2009                     ;;Thread.j(1) /* Z80S183 program that tests switching on/off the LED at the PWRSWTCH  output. */
2009             L9:
2009                     ;;Thread.j(2) /* Transcribed from LEDTest.asm to ledtest.j */
2009             L10:
2009                     ;;Thread.j(3) 
2009             L11:
2009                     ;;Thread.j(4) class Thread {
2009             L12:
2009                     ;class Thread []
2009             L13:
2009                     ;;Thread.j(5) 
2009             L14:
2009                     ;;Thread.j(6)   /**
2009             L15:
2009                     ;;Thread.j(7)    * Wait 1 msec at 18,432 MHz with no wait states.
2009             L16:
2009                     ;;Thread.j(8)    * 
2009             L17:
2009                     ;;Thread.j(9)    * Assumes that code can be run from internal RAM with 1 wait state.
2009             L18:
2009                     ;;Thread.j(10)    * Assumes data can be read/written to internal RAM with 1 wait state.
2009             L19:
2009                     ;;Thread.j(11)    * Assumes the Z80S183 is driven by an 18.432 MHz clock at the XTAL pin
2009             L20:
2009                     ;;Thread.j(12)    * 
2009             L21:
2009                     ;;Thread.j(13)    * With b=255 the routine requires 108 + b * 71 = 18213 T-states, 
2009             L22:
2009                     ;;Thread.j(14)    * which is 219 T-states or 11,8 microseconds short of 1 millisecond.
2009             L23:
2009                     ;;Thread.j(15)    * 
2009             L24:
2009                     ;;Thread.j(16)    * Duplicating the for loop with a total of 257 for b and c 
2009             L25:
2009                     ;;Thread.j(17)    * requires 132 + (b + c) * 71 = 18379 T-states,
2009             L26:
2009                     ;;Thread.j(18)    * which is 53 T-states or 2,8 microseconds short of 1 millisecond.
2009             L27:
2009                     ;;Thread.j(19)    */
2009             L28:
2009                     ;;Thread.j(20)   private static void sleepOneMillisecond() {
2009             L29:
2009                     ;method Thread.sleepOneMillisecond [private, static] void ()
2009             L30:
2009 DD E5               PUSH  IX
200B             L31:
200B DD 21 00 00         LD    IX,0x0000
200F DD 39               ADD   IX,SP
2011             L32:
2011 3B                  DEC   SP
2012             L33:
2012                     ;;Thread.j(21)     for (byte b = 255; b!=0; b--) ;
2012             L34:
2012 3E FF               LD    A,255
2014             L35:
2014 DD 77 FF            LD    (IX - 1),A
2017             L36:
2017 DD 7E FF            LD    A,(IX - 1)
201A             L37:
201A D6 00               SUB   A,0
201C             L38:
201C CA 2B 20            JP    Z,L44
201F             L39:
201F C3 28 20            JP    L42
2022             L40:
2022 DD 35 FF            DEC   (IX - 1)
2025             L41:
2025 C3 17 20            JP    L36
2028             L42:
2028 C3 22 20            JP    L40
202B             L43:
202B                     ;;Thread.j(22)   }
202B             L44:
202B DD F9               LD    SP,IX
202D             L45:
202D DD E1               POP   IX
202F             L46:
202F C9                  return
2030             L47:
2030                     ;;Thread.j(23) 
2030             L48:
2030                     ;;Thread.j(24)   /**
2030             L49:
2030                     ;;Thread.j(25)    * sleep for n miliseconds.
2030             L50:
2030                     ;;Thread.j(26)    */
2030             L51:
2030                     ;;Thread.j(27)   public static void sleep(word n) {
2030             L52:
2030                     ;method Thread.sleep [public, static] void (word n {bp+0})
2030             L53:
2030 DD E5               PUSH  IX
2032             L54:
2032 DD 21 00 00         LD    IX,0x0000
2036 DD 39               ADD   IX,SP
2038             L55:
2038             L56:
2038                     ;;Thread.j(28)     while (n != 0) {
2038             L57:
2038 DD 6E 04            LD    L,(IX + 4)
203B DD 66 05            LD    H,(IX + 5)
203E             L58:
203E 3E 00               LD    A,0
2040             L59:
2040 5F                  LD    E,A
2041 16 00               LD    D,0
2043 EB                  EX    DE,HL
2044 B7                  OR    A
2045 ED 52               SBC   HL,DE
2047             L60:
2047 CA 5D 20            JP    Z,L68
204A             L61:
204A                     ;;Thread.j(29)       sleepOneMillisecond();
204A             L62:
204A CD 09 20            CALL  L29
204D             L63:
204D                     ;;Thread.j(30)       n--;
204D             L64:
204D DD 6E 04            LD    L,(IX + 4)
2050 DD 66 05            LD    H,(IX + 5)
2053 2B                  DEC   HL
2054 DD 75 04            LD    (IX + 4),L
2057 DD 74 05            LD    (IX + 5),H
205A             L65:
205A                     ;;Thread.j(31)     }
205A             L66:
205A C3 38 20            JP    L57
205D             L67:
205D                     ;;Thread.j(32)   }
205D             L68:
205D DD F9               LD    SP,IX
205F             L69:
205F DD E1               POP   IX
2061             L70:
2061 C9                  return
2062             L71:
2062                     ;;Thread.j(33) 
2062             L72:
2062                     ;;Thread.j(34) }
2062             L73:
2062                     ;;ledtst.j(4) 
2062             L74:
2062                     ;;ledtst.j(5) class LEDTest {
2062             L75:
2062                     ;class LEDTest []
2062             L76:
2062                     ;;ledtst.j(6)   /*******************************
2062             L77:
2062                     ;;ledtst.j(7)   To compile this class and generate Z80 asm, listing and hex files:
2062             L78:
2062                     ;;ledtst.j(8)   - cd src\test\resources\jCode\ledtest\5_ImportThread
2062             L79:
2062                     ;;ledtst.j(9)   - java -jar ..\..\..\..\..\..\target\z80Compiler-1.0-SNAPSHOT.jar -z -b ledtst.j
2062             L80:
2062                     ;;ledtst.j(10)   Assumes that code can be run from internal RAM with 1 wait state.
2062             L81:
2062                     ;;ledtst.j(11)   Assumes data can be read/written to internal RAM with 1 wait state.
2062             L82:
2062                     ;;ledtst.j(12)   Assumes the Z80S183 is driven by an 18.432 MHz clock at the XTAL pin
2062             L83:
2062                     ;;ledtst.j(13)   Assumes that an active-low LED is available at the PWRSWTCH pin:
2062             L84:
2062                     ;;ledtst.j(14)    - connect anode of low-current (2 mA) LED to VCC
2062             L85:
2062                     ;;ledtst.j(15)    - connect cathode of low-current LED to 1k8 resistor
2062             L86:
2062                     ;;ledtst.j(16)    - connect other end of resistor to PWR_SW (pin 13 of J23).
2062             L87:
2062                     ;;ledtst.j(17)   
2062             L88:
2062                     ;;ledtst.j(18)   Connect Z80S183 evaluation board via DB9 (male-female) cable to RS232 of host computer.
2062             L89:
2062                     ;;ledtst.j(19)   Start hyperterminal or TeraTerm:
2062             L90:
2062                     ;;ledtst.j(20)    - Select serial communication using COM1
2062             L91:
2062                     ;;ledtst.j(21)    - Set up | Serial port
2062             L92:
2062                     ;;ledtst.j(22)      * COM1
2062             L93:
2062                     ;;ledtst.j(23)      * 57600
2062             L94:
2062                     ;;ledtst.j(24)      * 8N2
2062             L95:
2062                     ;;ledtst.j(25)      * no flow control
2062             L96:
2062                     ;;ledtst.j(26)    - connect 9V DC adapter to Z80S183 evaluation board.
2062             L97:
2062                     ;;ledtst.j(27)    - Press RESET on Z80S183 evaluation board
2062             L98:
2062                     ;;ledtst.j(28)      The text Zilog Z80183 Monitor Version 2.8 should appear.
2062             L99:
2062                     ;;ledtst.j(29)   Upload Intel hex file ledtst.hex:
2062             L100:
2062                     ;;ledtst.j(30)    -  type L
2062             L101:
2062                     ;;ledtst.j(31)    -  File | Send file
2062             L102:
2062                     ;;ledtst.j(32)       * Browse to file ledtst.hex and select OK
2062             L103:
2062                     ;;ledtst.j(33)       * The text 10(10) records in Hex file should appear
2062             L104:
2062                     ;;ledtst.j(34)   Check memory contents:
2062             L105:
2062                     ;;ledtst.j(35)    -  D 2000 32
2062             L106:
2062                     ;;ledtst.j(36)   Run program
2062             L107:
2062                     ;;ledtst.j(37)    -  G 2000
2062             L108:
2062                     ;;ledtst.j(38)    - The LED should blink at a rate of 1Hz.
2062             L109:
2062                     ;;ledtst.j(39)   *******************************/
2062             L110:
2062                     ;;ledtst.j(40) 
2062             L111:
2062                     ;;ledtst.j(41)   // Definition of on-chip Z80S183 registers
2062             L112:
2062                     ;;ledtst.j(42)   //                Name  Address  Description
2062             L113:
2062                     ;;ledtst.j(43)   //                ====  =======  =========
2062             L114:
2062                     ;;ledtst.j(44)   static final byte WDTCR = 0x65;  //Watchdog Timer Control Register
2062             L115:
2062                     ;;ledtst.j(45)   static final byte SCR   = 0x7F;  //System Configuration Register P91
2062             L116:
2062                     ;;ledtst.j(46)   static final byte CCR   = 0x1F;  //CPU Control Register P84
2062             L117:
2062                     ;;ledtst.j(47)   static final byte DCNTL = 0x32;  //DMA/Wait Control Register P121
2062             L118:
2062                     ;;ledtst.j(48)   static final byte WSGCR = 0x6B;  //Wait State Generator Control Register P96
2062             L119:
2062                     ;;ledtst.j(49)   static final byte PCR   = 0x7E;  //Power Control Register
2062             L120:
2062                     ;;ledtst.j(50) 
2062             L121:
2062                     ;;ledtst.j(51)   //Device initialisation
2062             L122:
2062                     ;;ledtst.j(52)   public static void init() {
2062             L123:
2062                     ;method LEDTest.init [public, static] void ()
2062             L124:
2062 DD E5               PUSH  IX
2064             L125:
2064 DD 21 00 00         LD    IX,0x0000
2068 DD 39               ADD   IX,SP
206A             L126:
206A             L127:
206A                     ;;ledtst.j(53)     // Enable writing to system ctrl registers
206A             L128:
206A                     ;;ledtst.j(54)     output(WDTCR, 0x00);
206A             L129:
206A 3E 00               LD    A,0
206C ED 39 65            OUT0  (065H),A
206F             L130:
206F                     ;;ledtst.j(55)     // LD      A,00BH
206F             L131:
206F                     ;;ledtst.j(56)     // OUT0    (WDTCR),A
206F             L132:
206F                     ;;ledtst.j(57) 
206F             L133:
206F                     ;;ledtst.j(58)     // System configuration Register P91
206F             L134:
206F                     ;;ledtst.j(59)     // b7 = 0 on-chip ROM disabled
206F             L135:
206F                     ;;ledtst.j(60)     // b6 = 1 on-chip RAM enabled
206F             L136:
206F                     ;;ledtst.j(61)     // b5 = 0 on-chip RAM at xF800H-xFFFFH
206F             L137:
206F                     ;;ledtst.j(62)     // b4 = 1 ROMCS enabled/disabled
206F             L138:
206F                     ;;ledtst.j(63)     // b3 = 1 RAMCS enabled/disabled
206F             L139:
206F                     ;;ledtst.j(64)     // b2 = 1 IOCS  enabled/disabled
206F             L140:
206F                     ;;ledtst.j(65)     // b10=00 PHI = EXTAL clock
206F             L141:
206F                     ;;ledtst.j(66)     output(SCR, 0x5C);
206F             L142:
206F 3E 5C               LD    A,92
2071 ED 39 7F            OUT0  (07FH),A
2074             L143:
2074                     ;;ledtst.j(67)     // LD      A,05CH
2074             L144:
2074                     ;;ledtst.j(68)     // OUT0    (SCR),A
2074             L145:
2074                     ;;ledtst.j(69)   
2074             L146:
2074                     ;;ledtst.j(70)     // CPU Control Register P84
2074             L147:
2074                     ;;ledtst.j(71)     // b7 = 1 PHI = XTAL / 1
2074             L148:
2074                     ;;ledtst.j(72)     // b63=00 SLP instruction enters sleep mode
2074             L149:
2074                     ;;ledtst.j(73)     // b5 = 0 BREQ in standby ignored
2074             L150:
2074                     ;;ledtst.j(74)     // b4 = 0 PHI low noise disabled
2074             L151:
2074                     ;;ledtst.j(75)     // b2 = x reserved
2074             L152:
2074                     ;;ledtst.j(76)     // b1 = 0 IORD/IOWR low noise disabled
2074             L153:
2074                     ;;ledtst.j(77)     // b0 = 0 A19-0/D7-0 low noise disabled
2074             L154:
2074                     ;;ledtst.j(78)     output(CCR, 0x80);    
2074             L155:
2074 3E 80               LD    A,128
2076 ED 39 1F            OUT0  (01FH),A
2079             L156:
2079                     ;;ledtst.j(79)     // LD      A,080H
2079             L157:
2079                     ;;ledtst.j(80)     // OUT0    (CCR),A
2079             L158:
2079                     ;;ledtst.j(81) 
2079             L159:
2079                     ;;ledtst.j(82)     
2079             L160:
2079                     ;;ledtst.j(83)     // DMA/Wait Control Register P121
2079             L161:
2079                     ;;ledtst.j(84)     // b76=00 0 wait state CPU memory cycle
2079             L162:
2079                     ;;ledtst.j(85)     // b54=00 0 wait state CPU I/O cycle
2079             L163:
2079                     ;;ledtst.j(86)     // b3 = 0 level detect on DMA1 Request
2079             L164:
2079                     ;;ledtst.j(87)     // b2 = 0 level detect on DMA0 Request
2079             L165:
2079                     ;;ledtst.j(88)     // b1 = 0 DMA from memory to I/O 
2079             L166:
2079                     ;;ledtst.j(89)     // b0 = 0 DMA increasing memory address
2079             L167:
2079                     ;;ledtst.j(90)     output(DCNTL, 0x00);
2079             L168:
2079 3E 00               LD    A,0
207B ED 39 32            OUT0  (032H),A
207E             L169:
207E                     ;;ledtst.j(91)     // XOR      A
207E             L170:
207E                     ;;ledtst.j(92)     // OUT0    (DCNTL),A
207E             L171:
207E                     ;;ledtst.j(93) 
207E             L172:
207E                     ;;ledtst.j(94)     // Wait State Generator Control Register P96
207E             L173:
207E                     ;;ledtst.j(95)     // b76=00 0 wait states CSROM
207E             L174:
207E                     ;;ledtst.j(96)     // b54=00 0 wait states CSRAM
207E             L175:
207E                     ;;ledtst.j(97)     // b32=00 0 wait states other
207E             L176:
207E                     ;;ledtst.j(98)     // b10=xx reserved
207E             L177:
207E                     ;;ledtst.j(99)     output(WSGCR, 0x00);
207E             L178:
207E 3E 00               LD    A,0
2080 ED 39 6B            OUT0  (06BH),A
2083             L179:
2083                     ;;ledtst.j(100)     // OUT0    (WSGCR),A
2083             L180:
2083                     ;;ledtst.j(101) 
2083             L181:
2083                     ;;ledtst.j(102)     // Block writing to system ctrl registers
2083             L182:
2083                     ;;ledtst.j(103)     output(WDTCR, 0x00);
2083             L183:
2083 3E 00               LD    A,0
2085 ED 39 65            OUT0  (065H),A
2088             L184:
2088                     ;;ledtst.j(104)     // XOR     A
2088             L185:
2088                     ;;ledtst.j(105)     // OUT0    (WDTCR),A
2088             L186:
2088                     ;;ledtst.j(106)   }
2088             L187:
2088 DD F9               LD    SP,IX
208A             L188:
208A DD E1               POP   IX
208C             L189:
208C C9                  return
208D             L190:
208D                     ;;ledtst.j(107) 
208D             L191:
208D                     ;;ledtst.j(108)   public static void toggle() {
208D             L192:
208D                     ;method LEDTest.toggle [public, static] void ()
208D             L193:
208D DD E5               PUSH  IX
208F             L194:
208F DD 21 00 00         LD    IX,0x0000
2093 DD 39               ADD   IX,SP
2095             L195:
2095             L196:
2095                     ;;ledtst.j(109)     // Enable writing to PCR
2095             L197:
2095                     ;;ledtst.j(110)     output(WDTCR, 0x0B);
2095             L198:
2095 3E 0B               LD    A,11
2097 ED 39 65            OUT0  (065H),A
209A             L199:
209A                     ;;ledtst.j(111)     //LD      A,00BH
209A             L200:
209A                     ;;ledtst.j(112)     //OUT0    (WDTCR),A
209A             L201:
209A                     ;;ledtst.j(113) 
209A             L202:
209A                     ;;ledtst.j(114)     // Toggle LED at PWR_SW
209A             L203:
209A                     ;;ledtst.j(115)     output(PCR, input(PCR) ^ 0x20);
209A             L204:
209A ED 38 7E            IN0  A,(07EH)
209D             L205:
209D EE 20               XOR   A,32
209F             L206:
209F ED 39 7E            OUT0  (07EH),A
20A2             L207:
20A2                     ;;ledtst.j(116)     //IN0     A,(PCR)
20A2             L208:
20A2                     ;;ledtst.j(117)     //XOR     A,020H
20A2             L209:
20A2                     ;;ledtst.j(118)     //OUT0    (PCR),A
20A2             L210:
20A2                     ;;ledtst.j(119) 
20A2             L211:
20A2                     ;;ledtst.j(120)     // Disable writing to PCR
20A2             L212:
20A2                     ;;ledtst.j(121)     output(WDTCR, 0x00);
20A2             L213:
20A2 3E 00               LD    A,0
20A4 ED 39 65            OUT0  (065H),A
20A7             L214:
20A7                     ;;ledtst.j(122)     //XOR     A,A
20A7             L215:
20A7                     ;;ledtst.j(123)     //OUT0    (WDTCR),A
20A7             L216:
20A7                     ;;ledtst.j(124)   }
20A7             L217:
20A7 DD F9               LD    SP,IX
20A9             L218:
20A9 DD E1               POP   IX
20AB             L219:
20AB C9                  return
20AC             L220:
20AC                     ;;ledtst.j(125) 
20AC             L221:
20AC                     ;;ledtst.j(126)   // Blink LED on/off in a XXxxXXxx pattern at 1 Hz.
20AC             L222:
20AC                     ;;ledtst.j(127)   public static void main() {
20AC             L223:
20AC                     ;method LEDTest.main [public, static] void ()
20AC             L224:
20AC DD E5               PUSH  IX
20AE             L225:
20AE DD 21 00 00         LD    IX,0x0000
20B2 DD 39               ADD   IX,SP
20B4             L226:
20B4             L227:
20B4                     ;;ledtst.j(128)     init();
20B4             L228:
20B4 CD 62 20            CALL  L123
20B7             L229:
20B7                     ;;ledtst.j(129)     while (1==1) {
20B7             L230:
20B7 3E 01               LD    A,1
20B9             L231:
20B9 D6 01               SUB   A,1
20BB             L232:
20BB C2 CD 20            JP    NZ,L243
20BE             L233:
20BE                     ;;ledtst.j(130)       toggle();
20BE             L234:
20BE CD 8D 20            CALL  L192
20C1             L235:
20C1                     ;;ledtst.j(131)       Thread.sleep(500); // Sleep for 500 miliseconds.
20C1             L236:
20C1 21 F4 01            LD    HL,500
20C4             L237:
20C4 E5                  PUSH HL
20C5             L238:
20C5 CD 30 20            CALL  L52
20C8             L239:
20C8 33                  INC   SP
20C9 33                  INC   SP
20CA             L240:
20CA                     ;;ledtst.j(132)     }
20CA             L241:
20CA C3 B7 20            JP    L230
20CD             L242:
20CD                     ;;ledtst.j(133)   }
20CD             L243:
20CD DD F9               LD    SP,IX
20CF             L244:
20CF DD E1               POP   IX
20D1             L245:
20D1 C9                  return
20D2             L246:
20D2                     ;;ledtst.j(134) }
20D2             CNTLA0  equ 000H          ;144 ASCI0 Control Register A.
20D2             STAT0   equ 004H          ;147 ASCI0 Status register.
20D2             TDR0    equ 006H          ;148 ASCI0 Transmit Data Register.
20D2             RDR0    equ 008H          ;149 ASCI0 Receive Data Register.
20D2             ERROR   equ 3             ;CNTLA0->OVRN,FE,PE,BRK error flags.
20D2             TDRE    equ 1             ;STAT0->Tx data register empty bit.
20D2             OVERRUN equ 6             ;STAT0->OVERRUN bit.
20D2             RDRF    equ 7             ;STAT0->Rx data register full bit.
20D2             ;****************
20D2             ;getChar
20D2             ;Check if an input character from ASCI0 is available.
20D2             ;  IN:  none
20D2             ;  OUT: F: ZERO flag set if no character is available.
20D2             ;          ZERO flag reset if a character is available.
20D2             ;       A : character from ASCI0, if available.
20D2             ;  USES:AF
20D2             ;****************
20D2             getChar:
20D2 ED 38 04            IN0   A,(STAT0)   ;read ASCI0 status
20D5 CB 77               BIT   OVERRUN,A   ;check if ASCIO OVERRUN bit is set
20D7 20 07               JR    NZ,getChar1 ;-yes: reset error flags
20D9 CB 7F               BIT   RDRF,A      ;check if ASCIO RDRF bit is set
20DB C8                  RET   Z           ;-no: return without a character
20DC ED 38 08            IN0   A,(RDR0)    ;-yes:read ASCIO Rx data register
20DF C9                  RET
20E0             getChar1:
20E0 ED 38 00            IN0   A,(CNTLA0)  ;read ASCI0 control register
20E3 CB 9F               RES   ERROR,A     ;reset OVRN,FE,PE,BRK flags
20E5 ED 39 00            OUT0  (CNTLA0),A  ;write back to ASCI0 CTRL
20E8 AF                  XOR   A,A
20E9 C9                  RET               ;return without a character
20EA             ;****************
20EA             ;putMsg
20EA             ;Print via ASCI0 a zero terminated string, starting at the return address on the stack.
20EA             ;  IN:  none.
20EA             ;  OUT: none.
20EA             ;  USES:none.
20EA             ;****************
20EA             putMsg:
20EA E3                  EX    (SP),HL     ;save HL and load return address into HL.
20EB CD F7 20            CALL  writeStr
20EE E3                  EX    (SP),HL     ;put return address onto stack and restore HL.
20EF C9                  RET
20F0             ;****************
20F0             ;writeLineStr
20F0             ;Print via ASCI0 a zero terminated string, pointed to by HL, followed by a carriage return.
20F0             ;  IN:  HL:address of zero terminated string to be printed.
20F0             ;  OUT: none.
20F0             ;  USES:HL (point to byte after zero terminated string)
20F0             ;****************
20F0             writeLineStr:
20F0 CD F7 20            CALL  writeStr
20F3 CD 13 21            CALL  putCRLF
20F6 C9                  RET
20F7             ;****************
20F7             ;writeStr
20F7             ;Print via ASCI0 a zero terminated string, pointed to by HL.
20F7             ;  IN:  HL:address of zero terminated string to be printed.
20F7             ;  OUT: none.
20F7             ;  USES:HL (point to byte after zero terminated string)
20F7             ;****************
20F7             writeStr:
20F7 F5                  PUSH  AF          ;save registers
20F8             putStr1:
20F8 7E                  LD    A,(HL)      ;get next character
20F9 23                  INC   HL
20FA B7                  OR    A,A         ;is it zer0?
20FB 28 05               JR    Z,putStr2   ;yes ->return
20FD CD 06 21            CALL  putChar     ;no->put it to ASCI0
2100 18 F6               JR    putStr1
2102             putStr2:
2102 F1                  POP   AF
2103 C9                  RET
2104             ;****************
2104             ;putSpace
2104             ;Send a space character to ASCI0
2104             ;  IN:  none.
2104             ;  OUT: none.
2104             ;  USES:AF
2104             ;****************
2104             putSpace:
2104 3E 20               LD    A,' '       ;load space and continue with putChar.
2106             ;****************
2106             ;putChar
2106             ;Send one character to ASCI0.
2106             ;  IN:  A = character
2106             ;  OUT: none.
2106             ;  USES:none.
2106             ;****************
2106             putChar:
2106 F5                  PUSH  AF          ;send the character via ASCI0
2107             putChar1:
2107 ED 38 04            IN0   A,(STAT0)   ;read ASCI0 status register
210A CB 4F               BIT   TDRE,A      ;wait until TDRE <> 0
210C 28 F9               JR    Z,putChar1
210E F1                  POP   AF          ;restore AF registers
210F ED 39 06            OUT0  (TDR0),A    ;write character to ASCI0
2112 C9                  RET
2113             ;****************
2113             ;putCRLF
2113             ;Send CR and LF to ASCI0
2113             ;  IN:  none.
2113             ;  OUT: none.
2113             ;  USES:none.
2113             ;****************
2113             putCRLF:
2113 F5                  PUSH  AF
2114 3E 0D               LD    A,'\r'       ;print carriage return
2116 CD 06 21            CALL  putChar
2119 3E 0A               LD    A,'\n'       ;print line feed
211B CD 06 21            CALL  putChar
211E F1                  POP   AF
211F C9                  RET
2120             ;****************
2120             ;putErase
2120             ;Erase the latest character at ASCI0
2120             ;  IN:  none.
2120             ;  OUT: none.
2120             ;  USES:AF
2120             ;****************
2120             putErase:
2120 3E 08               LD    A,'\b'       ;print backspace
2122 CD 06 21            CALL  putChar
2125 CD 04 21            CALL  putSpace    ;print space (erase character)
2128 3E 08               LD    A,'\b'      ;print backspace
212A 18 DA               JR    putChar
212C             ;****************
212C             ;putBell
212C             ;Send a Bell character to ASCI0
212C             ;  IN:  none.
212C             ;  OUT: none.
212C             ;  USES:AF
212C             ;****************
212C             putBell:
212C 3E 07               LD    A,07        ;ring the bell at ASCI0
212E 18 D6               JR    putChar
2130             ;****************
2130             ;putHexHL
2130             ;Print HL register pair as 4 hex digits
2130             ;  IN:  HL = word to be printed.
2130             ;  OUT: none.
2130             ;  USES:none.
2130             ;****************
2130             putHexHL:
2130 F5                  PUSH  AF          ;save used registers
2131 7C                  LD    A,H         ;print H as 2 hex digits
2132 CD 3B 21            CALL  putHexA
2135 7D                  LD    A,L         ;print L as 2 hex digits
2136 CD 3B 21            CALL  putHexA
2139 F1                  POP   AF          ;restore used registers
213A C9                  RET
213B             ;****************
213B             ;putHexA
213B             ;Print A register as 2 hex digits
213B             ;  IN:  A = byte to be printed
213B             ;  OUT: none.
213B             ;  USES:none.
213B             ;****************
213B             putHexA:
213B F5                  PUSH  AF          ;save input
213C 1F                  RRA               ;shift upper nibble to the right
213D 1F                  RRA
213E 1F                  RRA
213F 1F                  RRA
2140 CD 44 21            CALL  putHexA1    ;print upper nibble
2143 F1                  POP   AF          ;restore input & print lower nibble
2144             putHexA1:
2144 F5                  PUSH  AF          ;save input
2145 E6 0F               AND   A,00FH      ;mask lower nibble
2147 C6 30               ADD   A,'0'       ;convert to hex digit
2149 FE 3A               CP    A,'9'+1
214B 38 02               JR    C,putHexA2
214D C6 07               ADD   A,07
214F             putHexA2:
214F CD 06 21            CALL  putChar
2152 F1                  POP   AF          ;restore input
2153 C9                  RET               ;and return
2154             ;****************
2154             ;mul16
2154             ;16 by 16 bit unsigned multiplication with 16 bit result.
2154             ;  IN:  HL = operand 1
2154             ;       DE = operand 2
2154             ;  OUT: HL = HL * DE low part
2154             ;  USES:DE
2154             ;  Size   25 bytes
2154             ;  Time  160 cycles
2154             ;****************
2154             mul16:
2154                     ;HL = HL * DE
2154                     ;        H  L
2154                     ;        D  E
2154                     ;    --------*
2154                     ;          EL
2154                     ;       EH  0
2154                     ;       DL  0
2154                     ; -----------+
2154                     ;        R  S
2154                     ;S = ELlow
2154                     ;R = ELhigh+EHlow+DLlow
2154 C5                  PUSH  BC          ;11  11 save BC
2155 44                  LD    B,H         ; 4  15 copy HL to BC
2156 4D                  LD    C,L         ; 4  19
2157 63                  LD    H,E         ; 4  23 HL contains EL
2158 ED 6C               MLT   HL          ;17  40
215A E5                  PUSH  HL          ;11  51
215B 63                  LD    H,E         ; 4  55 HL contains EH aka EB
215C 68                  LD    L,B         ; 4  59
215D ED 6C               MLT   HL          ;17  76
215F 45                  LD    B,L         ; 4  80 save EHlow in B
2160 62                  LD    H,D         ; 4  84 HL contains DL aka DC
2161 69                  LD    L,C         ; 4  88
2162 ED 6C               MLT   HL          ;17 105
2164 55                  LD    D,L         ; 4 109 DLlow into DE
2165 1E 00               LD    E,0         ; 6 115
2167 E1                  POP   HL          ; 9 124 add EL+DElow
2168 19                  ADD   HL,DE       ; 7 131
2169 50                  LD    D,B         ; 4 135 add EL+DElow+EHlow
216A 19                  ADD   HL,DE       ; 7 142
216B C1                  POP   BC          ; 9 151 restore BC
216C C9                  RET               ; 9 160
216D             ;****************
216D             ;mul16_10
216D             ;multiply a 16 bit unsigned number by 10 with a 16 bit result.
216D             ;  IN:  HL = operand
216D             ;  OUT: HL = HL * 10; low part
216D             ;  USES:Flags
216D             ;  Size   9 bytes
216D             ;  Time   65 cycles
216D             ;****************
216D             mul16_10:
216D D5                  PUSH  DE          ;11 11
216E 54                  LD    D,H         ; 4 15
216F 5D                  LD    E,L         ; 4 19
2170 29                  ADD   HL,HL       ; 7 26 times 2
2171 29                  ADD   HL,HL       ; 7 33 times 4
2172 19                  ADD   HL,DE       ; 7 40 times 5
2173 29                  ADD   HL,HL       ; 7 47 times 10
2174 D1                  POP   DE          ; 9 56
2175 C9                  RET               ; 9 65
2176             ;****************
2176             ;mul16_8
2176             ;16 by 8 bit unsigned multiplication with 16 bit result.
2176             ;  IN:  HL = operand 1
2176             ;        A = operand 2
2176             ;  OUT: HL = HL * A low part
2176             ;  USES:AF
2176             ;  Size   .. bytes
2176             ;  Time  ... cycles
2176             ;****************
2176             mul16_8:
2176                     ;HL = HL * A
2176                     ;        H  L
2176                     ;           A
2176                     ;    --------*
2176                     ;          AL
2176                     ;       AH  0
2176                     ; -----------+
2176                     ;        R  S
2176                     ;S = ALlow
2176                     ;R = ALhigh+AHlow
2176 C5                  PUSH  BC          ;11  11 save BC
2177 44                  LD    B,H         ; 4  15
2178 4F                  LD    C,A         ; 4  19
2179 67                  LD    H,A         ; 4  23
217A ED 6C               MLT   HL          ;17  40 HL = AL
217C ED 4C               MLT   BC          ;17  57 BC = AH
217E 7C                  LD    A,H         ; 4  61 A = S = ALhigh+AHlow
217F 81                  ADD   A,C         ; 4  65
2180 67                  LD    H,A         ; 4  69
2181 C1                  POP   BC          ; 9  78 | 289 restore BC
2182 C9                  RET               ; 9  87 | 307
2183             ;****************
2183             ;mul1632
2183             ;16 by 16 bit unsigned multiplication with 32 bit result.
2183             ;  IN:  HL = operand 1
2183             ;       DE = operand 2
2183             ;  OUT: HL = HL * DE low part
2183             ;       DE = HL * DE high part
2183             ;  USES:-
2183             ;  Size 49 bytes
2183             ;  Time between 303 en 307 cycles
2183             ;****************
2183             mul1632:
2183                     ;HL = HL * DE
2183                     ;        H  L
2183                     ;        D  E
2183                     ;    --------*
2183                     ;          EL
2183                     ;       EH  0
2183                     ;       DL  0
2183                     ;    DH  0  0
2183                     ; -----------+
2183                     ;  P  Q  R  S
2183                     ;S = ELlow
2183                     ;R = ELhigh+EHlow+DLlow
2183                     ;Q = DHlow+EHhigh+DLhigh
2183                     ;P = DHhigh
2183 F5                  PUSH  AF          ;11  11 save AF
2184 C5                  PUSH  BC          ;11  22 save BC
2185 44                  LD    B,H         ; 4  26
2186 4D                  LD    C,L         ; 4  30
2187 62                  LD    H,D         ; 4  34 HL contains DH aka DB
2188 68                  LD    L,B         ; 4  38
2189 ED 6C               MLT   HL          ;17  55
218B E5                  PUSH  HL          ;11  66
218C 62                  LD    H,D         ; 4  70 HL contains DL aka DC
218D 69                  LD    L,C         ; 4  74
218E ED 6C               MLT   HL          ;17  91
2190 E5                  PUSH  HL          ;11 102
2191 63                  LD    H,E         ; 4 106 HL contains EH aka EB
2192 68                  LD    L,B         ; 4 110
2193 ED 6C               MLT   HL          ;17 127
2195 E5                  PUSH  HL          ;11 138
2196 63                  LD    H,E         ; 4 142 HL contains EL aka EC
2197 69                  LD    L,C         ; 4 146
2198 ED 6C               MLT   HL          ;17 163
219A D1                  POP   DE          ; 9 172 calculate RS=EL+EH0
219B 06 00               LD    B,0         ; 6 178
219D 4A                  LD    C,D         ; 4 182 ..C=EHhigh
219E 53                  LD    D,E         ; 4 186 ..D=EHlow
219F 1E 00               LD    E,0         ; 6 192
21A1 19                  ADD   HL,DE       ; 7 199
21A2 30 01               JR    NC,mul16321 ; 8 207 | 6 205 add carry to PQ
21A4 03                  INC   BC          ;         4 209
21A5             mul16321:
21A5 D1                  POP   DE          ; 9 209 | 211 calculate RS=EL+EH0+DL0
21A6 7A                  LD    A,D         ; 4 220 | 222 ..A=DLhigh
21A7 53                  LD    D,E         ; 4 224 | 226 ..D=DLlow
21A8 19                  ADD   HL,DE       ; 7 231 | 233
21A9 30 01               JR    NC,mul16322 ; 8 239 | 6 239 add carry to PQ
21AB 03                  INC   BC          ;         4 243
21AC             mul16322:
21AC                                       ;HL=RS=EL+EH0+DL0
21AC                                       ;C=EHhigh
21AC                                       ;A=DLhigh
21AC                                       ;E=0
21AC EB                  EX    DE,HL       ; 3 242 | 246
21AD 65                  LD    H,L         ; 4 246 | 250 ..E was 0, so H=L=0
21AE 6F                  LD    L,A         ; 4 250 | 254 ..HL=DLhigh
21AF 09                  ADD   HL,BC       ; 7 257 | 261 PQ=EHhigh+DLhigh+DH
21B0 C1                  POP   BC          ; 9 266 | 270
21B1 09                  ADD   HL,BC       ; 7 273 | 277
21B2 EB                  EX    DE,HL       ; 3 276 | 280
21B3                                       ;D=P=DHhigh
21B3                                       ;E=Q=DHlow+EHhigh+DLhigh
21B3                                       ;H=R=ELhigh+EHlow+DLlow
21B3                                       ;L=S=ELlow
21B3 C1                  POP   BC          ; 9 285 | 289 restore BC
21B4 F1                  POP   AF          ; 9 294 | 298 restore AF
21B5 C9                  RET               ; 9 303 | 307
21B6             ;****************
21B6             ;mul16S
21B6             ;16 by 16 bit slow unsigned multiplication with 32 bit result.
21B6             ;  IN:  HL = operand 1
21B6             ;       DE = operand 2
21B6             ;  OUT: DE = HL * DE high part
21B6             ;       HL = HL * DE low part
21B6             ;  USES:none.
21B6             ;  Size 26 bytes
21B6             ;  Time between 726 en 998 cycles
21B6             ;****************
21B6             mul16S:
21B6 F5                  PUSH  AF          ;11  11 save AF
21B7 C5                  PUSH  BC          ;11  22 save BC
21B8 44                  LD    B,H         ; 4  26
21B9 4D                  LD    C,L         ; 4  30
21BA 21 00 00            LD    HL,0        ; 9  39
21BD 3E 10               LD    A,16        ; 6  45
21BF             mul16S1:
21BF 29                  ADD   HL,HL       ;16*7=112 157
21C0 CB 13               RL    E           ;16*7=112 269
21C2 CB 12               RL    D           ;16*7=112 381
21C4 30 04               JR    NC,mul16S2  ;16*8=128 509 16*6= 96 477
21C6 09                  ADD   HL,BC       ;             16*7=112 589
21C7 30 01               JR    NC,mul16S2  ;             16*8=128 717 16*6=96 685
21C9 13                  INC   DE          ;             16*4= 64 781 16*4=64 749 This instruction (with the jump) is like an "ADC DE,0"
21CA             mul16S2:
21CA 3D                  DEC   A           ;16*4=64    573 | 845 | 813
21CB 20 F2               JR    NZ,mul16S1  ;15*8+6=126 699 | 971 | 939
21CD C1                  POP   BC          ; 9         708 | 980 | 948 restore BC
21CE F1                  POP   AF          ; 9         717 | 989 | 957 restore AF
21CF C9                  RET               ; 9         726 | 998 | 966
21D0             ;****************
21D0             ;div16
21D0             ;16 by 16 bit unsigned division.
21D0             ;  IN:  HL = dividend
21D0             ;       DE = divisor
21D0             ;  OUT: HL = quotient
21D0             ;       DE = remainder
21D0             ;  USES:-
21D0             ;  Size   32 bytes
21D0             ;  Time   between 1073 en 1121 cycles
21D0             ;pseudo code:
21D0             ;T = AC = dividend
21D0             ;D = DE = divisor
21D0             ;Q = AC = quotient = 0
21D0             ;R = HL = remainder = 0
21D0             ;invariante betrekking:
21D0             ; D/T\Q     
21D0             ;   R       
21D0             ; T = QD + R
21D0             ; T <= 2^N  
21D0             ;
21D0             ; D/T'.RT\Q'      
21D0             ;   R'             
21D0             ; RT <= 2^N        
21D0             ; 0<=k<=N          
21D0             ; RT = T % 2^k     
21D0             ; T' = (T-RT) / 2^k
21D0             ; Q' = T' / D      
21D0             ; R' = T' % D      
21D0             ;
21D0             ;for (i=16; i>0; i--) {
21D0             ;  T = T * 2 (remember MSB in carry)
21D0             ;  R = R * 2 + carry
21D0             ;  Q = Q * 2
21D0             ;  if (R >= D) {
21D0             ;    R = R - D;
21D0             ;    Q++;
21D0             ;  }
21D0             ;}
21D0             ;return Q (in HL) and R (in DE)
21D0             ;****************
21D0             div16:
21D0 F5                  PUSH  AF          ;11  11 save registers used
21D1 C5                  PUSH  BC          ;11  22
21D2 4D                  LD    C,L         ; 4  26 T(AC) = teller from input (HL)
21D3 7C                  LD    A,H         ; 4  30 D(DE) = deler from input  (DE)
21D4 21 00 00            LD    HL,0        ; 9  39 R(HL) = restant; Q(AC) = quotient
21D7 06 10               LD    B,16        ; 6  45 for (i=16; i>0; i--)
21D9             div16_1:
21D9 CB 21               SLA   C           ;16* 7=112 157   T = T * 2 (remember MSB in carry)
21DB CB 17               RL    A           ;16* 7=112 269   Q = Q * 2
21DD ED 6A               ADC   HL,HL       ;16*10=160 429   R = R * 2 + carry
21DF B7                  OR    A,A         ;16* 4= 64 493   if (R >= D) {
21E0 ED 52               SBC   HL,DE       ;16*10=160 653
21E2 38 03               JR    C,div16_2   ;16* 8=128 781 16*6= 96 749   R = R - D
21E4 0C                  INC   C           ;              16*4= 64 813   Q++
21E5 18 01               JR    div16_3     ;              16*8=128 941
21E7             div16_2:
21E7 19                  ADD   HL,DE       ;16* 7=112 893  (compensate comparison)
21E8             div16_3:
21E8 10 EF               DJNZ  div16_1     ;15*9+7=142 1035 | 1083 }
21EA EB                  EX    DE,HL       ; 3 1038 | 1086 swap remainder (HL) into DE
21EB 67                  LD    H,A         ; 4 1042 | 1090 move quotient (AC) into HL
21EC 69                  LD    L,C         ; 4 1046 | 1094
21ED C1                  POP   BC          ; 9 1055 | 1103
21EE F1                  POP   AF          ; 9 1064 | 1112
21EF C9                  RET               ; 9 1073 | 1121
21F0             ;****************
21F0             ;div16_8
21F0             ;16 by 8 bit unsigned division.
21F0             ;  IN:  HL = dividend
21F0             ;       A  = divisor
21F0             ;  OUT: HL = quotient
21F0             ;       A  = remainder
21F0             ;  USES:F(lags)
21F0             ;  Size 18 bytes
21F0             ;  Time between 601 en 697 cycles
21F0             ;****************
21F0             div16_8:
21F0 C5                  PUSH  BC          ;11 11 save registers used
21F1 06 10               LD    B,16        ; 6 17 the length of the dividend (16 bits)
21F3 4F                  LD    C,A         ; 4 21 move divisor to C
21F4 AF                  XOR   A,A         ; 4 25 clear upper 8 bits of AHL
21F5             div16_82:
21F5 29                  ADD   HL,HL       ;16*7=112 137 advance dividend (HL) into selected bits (A)
21F6 CB 17               RL    A           ;16*7=112 249
21F8 B9                  CP    A,C         ;16*4= 64 313 check if divisor (E) <= selected digits (A)
21F9 38 02               JR    C,div16_83  ;16*8=128 441 16*6=96 409 if not, advance without subtraction
21FB 91                  SUB   A,C         ;             16*4=64 473 subtract the divisor
21FC 2C                  INC   L           ;             16*4=64 537 and set the next digit of the quotient
21FD             div16_83:
21FD 10 F6               DJNZ  div16_82    ;15*9+7=142 583 679
21FF C1                  POP   BC          ;9 592 688
2200 C9                  RET               ;9 601 697
2201             ;****************
2201             ;div8
2201             ;8 by 8 bit unsigned division.
2201             ;  IN:  A = dividend
2201             ;       C = divisor
2201             ;  OUT: A = quotient
2201             ;       C = remainder
2201             ;  USES:F(lags)
2201             ;  Size 26 bytes
2201             ;  Time between 411 and 459 cycles
2201             ;****************
2201             ;pseudo code:
2201             ;T = dividend
2201             ;D = divisor
2201             ;Q = quotient = 0
2201             ;R = remainder = 0
2201             ;invariante betrekking:
2201             ; T = QD + R
2201             ; T <= 2^8  
2201             ;
2201             ; D/T'.RT\Q'      
2201             ;   R'             
2201             ; RT <= 2^8        
2201             ; 0<=k<=8          
2201             ; RT = T % 2^k     
2201             ; T' = (T-RT) / 2^k
2201             ; Q' = T' / D      
2201             ; R' = T' % D      
2201             ;
2201             ;for (i=8; i>0; i--) {
2201             ;  T = T * 2 (remember MSB in carry)
2201             ;  R = R * 2 + carry
2201             ;  Q = Q * 2
2201             ;  if (R >= D) {
2201             ;    R = R - D;
2201             ;    Q++;
2201             ;  }
2201             ;}
2201             ;return Q (in A) and R (in C)
2201             ;****************
2201             ;E = T = dividend
2201             ;C = D = divisor
2201             ;D = Q = quotient
2201             ;A = R = remainder
2201             ;****************
2201             ;  IN:  A = dividend
2201             ;       C  = divisor
2201             div8:
2201 D5                  PUSH  DE          ;11 11 save registers used
2202 C5                  PUSH  BC          ;11 22 save registers used
2203 06 08               LD    B,8         ; 6 28 the length of the dividend (8 bits)
2205 16 00               LD    D,0         ; 6 34 D = Q = quotient = 0
2207 5F                  LD    E,A         ; 4 38 E = T = dividend
2208 AF                  XOR   A,A         ; 4 42 A = R = remainder = 0
2209             div8_1:
2209 CB 23               SLA   E           ;8*7=56  98            T[E] = T[E] * 2 (remember MSB in carry)
220B CB 17               RL    A           ;8*7=56 154            R[A] = R[A] * 2 + carry
220D CB 22               SLA   D           ;8*7=56 210            Q[D] = Q[D] * 2
220F B9                  CP    A,C         ;8*4=32 242            if (R[A] - D[C] >= 0) {
2210 38 02               JR    C,div8_2    ;8*8=64 306 8*6=48 290
2212 91                  SUB   A,C         ;           8*4=32 322   R[A] = R[A] - D[C];
2213 14                  INC   D           ;           8*4=32 354   Q[D]++;
2214             div8_2:           ;                      }
2214 10 F3               DJNZ  div8_1      ;7*9+7=70 376 424      }
2216 C1                  POP   BC          ;9        385 433
2217 4F                  LD    C,A         ;4        389 437      return Remainder[A] in C
2218 7A                  LD    A,D         ;4        393 441      return Quotient[D] in A
2219 D1                  POP   DE          ;9        402 450
221A C9                  RET               ;9        411 459
221B             ;****************
221B             ;div8_16
221B             ;8 by 16 bit unsigned division.
221B             ;  IN:  A = dividend
221B             ;       HL = divisor
221B             ;  OUT: A = quotient
221B             ;       C = remainder
221B             ;  USES:F(lags)
221B             ;  Size 13 bytes (plus dependency on div8)
221B             ;  Time 31 or between 436 and 484 cycles
221B             ;****************
221B             ;invariante betrekking:
221B             ; T = dividend
221B             ; D = divisor
221B             ; Q = quotient
221B             ; R = remainder
221B             ; T = QD + R
221B             ;pseudo code:
221B             ; if D >= 256 {
221B             ;   R = T
221B             ;   Q = 0
221B             ; } else {
221B             ;   R = T/D (using div8)
221B             ;   Q = T%D (using div8)
221B             ; }
221B             ;****************
221B             
221B             
221B             div8_16:
221B 4F                  LD    C,A         ;  4  4         save dividend(A) in C
221C 7C                  LD    A,H         ;  4  8         if D >= 256 {
221D B7                  OR    A,A         ;  4 12
221E 28 02               JR    Z,div8_161  ;  6 18  8  20
2220 AF                  XOR   A,A         ;  4 22           R = T;
2221 C9                  RET               ;  9 31           Q = 0;
2222             div8_161:                     ;               } else {
2222 79                  LD    A,C         ;        4  24    restore dividend into A
2223 4D                  LD    C,L         ;        4  28    load divisor (HL) into C
2224 CD 01 22            CALL  div8        ; 16+411/16+459               R = T/D; Q = T%D;
2227 C9                  RET               ; 9  436/484    }
2228             ;****************
2228             ;read
2228             ;read a 16 bit unsigned number from the input
2228             ;  IN:  none
2228             ;  OUT: HL = 16 bit unsigned number
2228             ;  USES:-
2228             ;****************
2228             read:
2228 F5                  PUSH  AF
2229 21 00 00            LD    HL,0        ;result = 0;
222C             read1:
222C CD D2 20            CALL  getChar     ;check if a character is available.
222F 28 FB               JR    Z,read1     ;-no: wait for it.
2231 FE 0D               CP    A,'\r'      ;return if char == Carriage Return
2233 28 0C               JR    Z,read2
2235 CD 6D 21            CALL  mul16_10    ;result *= 10;
2238 D6 30               SUB   A,'0'       ;digit = char - '0';
223A 85                  ADD   A,L         ;result += digit;
223B 6F                  LD    L,A
223C 30 EE               JR    NC,read1     ;get next character
223E 24                  INC   H
223F 18 EB               JR    read1        ;get next character
2241             read2:
2241 F1                  POP   AF
2242 C9                  RET
2243             ;****************
2243             ;writeLineHL
2243             ;write a 16 bit unsigned number to the output, followed by a carriage return
2243             ;  IN:  HL = 16 bit unsigned number
2243             ;  OUT: none
2243             ;  USES:HL
2243             ;****************
2243             writeLineHL:
2243 CD 4A 22            CALL  writeHL
2246 CD 13 21            CALL  putCRLF
2249 C9                  RET
224A             ;****************
224A             ;writeHL
224A             ;write a 16 bit unsigned number to the output
224A             ;  IN:  HL = 16 bit unsigned number
224A             ;  OUT: none
224A             ;  USES:HL
224A             ;****************
224A             writeHL:
224A C5                  PUSH  BC          ;save registers used
224B F5                  PUSH  AF
224C 06 00               LD    B,0         ;number of digits on stack
224E 7C                  LD    A,H         ;is HL=0?
224F B5                  OR    A,L
2250 20 03               JR    NZ,writeHL1
2252 04                  INC   B           ;write a single digit 0
2253 18 0C               JR    writeHL3
2255             writeHL1:
2255 3E 0A               LD    A,10        ;divide HL by 10
2257 CD F0 21            CALL  div16_8
225A F5                  PUSH  AF          ;put remainder on stack
225B 04                  INC   B
225C 7C                  LD    A,H         ;is quotient 0?
225D B5                  OR    A,L
225E 20 F5               JR    NZ,writeHL1
2260             writeHL2:
2260 F1                  POP   AF          ;write digit
2261             writeHL3:
2261 C6 30               ADD   A,'0'
2263 CD 06 21            CALL  putChar
2266 10 F8               DJNZ  writeHL2
2268 F1                  POP   AF          ;restore registers used
2269 C1                  POP   BC
226A C9                  RET
226B             ;****************
226B             ;writeLineA
226B             ;write an 8-bit unsigned number to the output, followed by a carriage return
226B             ;  IN:  A = 8-bit unsigned number
226B             ;  OUT: none
226B             ;  USES:none
226B             ;****************
226B             writeLineA:
226B CD 72 22            CALL  writeA
226E CD 13 21            CALL  putCRLF
2271 C9                  RET
2272             ;****************
2272             ;writeA
2272             ;write an 8-bit unsigned number to the output
2272             ;  IN:  A = 8-bit unsigned number
2272             ;  OUT: none
2272             ;  USES:none
2272             ;****************
2272             writeA:
2272 E5                  PUSH  HL          ;save registers used
2273 26 00               LD    H,0
2275 6F                  LD    L,A
2276 CD 4A 22            CALL  writeHL
2279 E1                  POP   HL
227A C9                  RET

Labels and cross references:
      L0 = 2003 :
      L1 = 2006 :
     L10 = 2009 :
    L100 = 2062 :
    L101 = 2062 :
    L102 = 2062 :
    L103 = 2062 :
    L104 = 2062 :
    L105 = 2062 :
    L106 = 2062 :
    L107 = 2062 :
    L108 = 2062 :
    L109 = 2062 :
     L11 = 2009 :
    L110 = 2062 :
    L111 = 2062 :
    L112 = 2062 :
    L113 = 2062 :
    L114 = 2062 :
    L115 = 2062 :
    L116 = 2062 :
    L117 = 2062 :
    L118 = 2062 :
    L119 = 2062 :
     L12 = 2009 :
    L120 = 2062 :
    L121 = 2062 :
    L122 = 2062 :
    L123 = 2062 : 20B4
    L124 = 2062 :
    L125 = 2064 :
    L126 = 206A :
    L127 = 206A :
    L128 = 206A :
    L129 = 206A :
     L13 = 2009 :
    L130 = 206F :
    L131 = 206F :
    L132 = 206F :
    L133 = 206F :
    L134 = 206F :
    L135 = 206F :
    L136 = 206F :
    L137 = 206F :
    L138 = 206F :
    L139 = 206F :
     L14 = 2009 :
    L140 = 206F :
    L141 = 206F :
    L142 = 206F :
    L143 = 2074 :
    L144 = 2074 :
    L145 = 2074 :
    L146 = 2074 :
    L147 = 2074 :
    L148 = 2074 :
    L149 = 2074 :
     L15 = 2009 :
    L150 = 2074 :
    L151 = 2074 :
    L152 = 2074 :
    L153 = 2074 :
    L154 = 2074 :
    L155 = 2074 :
    L156 = 2079 :
    L157 = 2079 :
    L158 = 2079 :
    L159 = 2079 :
     L16 = 2009 :
    L160 = 2079 :
    L161 = 2079 :
    L162 = 2079 :
    L163 = 2079 :
    L164 = 2079 :
    L165 = 2079 :
    L166 = 2079 :
    L167 = 2079 :
    L168 = 2079 :
    L169 = 207E :
     L17 = 2009 :
    L170 = 207E :
    L171 = 207E :
    L172 = 207E :
    L173 = 207E :
    L174 = 207E :
    L175 = 207E :
    L176 = 207E :
    L177 = 207E :
    L178 = 207E :
    L179 = 2083 :
     L18 = 2009 :
    L180 = 2083 :
    L181 = 2083 :
    L182 = 2083 :
    L183 = 2083 :
    L184 = 2088 :
    L185 = 2088 :
    L186 = 2088 :
    L187 = 2088 :
    L188 = 208A :
    L189 = 208C :
     L19 = 2009 :
    L190 = 208D :
    L191 = 208D :
    L192 = 208D : 20BE
    L193 = 208D :
    L194 = 208F :
    L195 = 2095 :
    L196 = 2095 :
    L197 = 2095 :
    L198 = 2095 :
    L199 = 209A :
      L2 = 2009 :
     L20 = 2009 :
    L200 = 209A :
    L201 = 209A :
    L202 = 209A :
    L203 = 209A :
    L204 = 209A :
    L205 = 209D :
    L206 = 209F :
    L207 = 20A2 :
    L208 = 20A2 :
    L209 = 20A2 :
     L21 = 2009 :
    L210 = 20A2 :
    L211 = 20A2 :
    L212 = 20A2 :
    L213 = 20A2 :
    L214 = 20A7 :
    L215 = 20A7 :
    L216 = 20A7 :
    L217 = 20A7 :
    L218 = 20A9 :
    L219 = 20AB :
     L22 = 2009 :
    L220 = 20AC :
    L221 = 20AC :
    L222 = 20AC :
    L223 = 20AC : 2003
    L224 = 20AC :
    L225 = 20AE :
    L226 = 20B4 :
    L227 = 20B4 :
    L228 = 20B4 :
    L229 = 20B7 :
     L23 = 2009 :
    L230 = 20B7 : 20CA
    L231 = 20B9 :
    L232 = 20BB :
    L233 = 20BE :
    L234 = 20BE :
    L235 = 20C1 :
    L236 = 20C1 :
    L237 = 20C4 :
    L238 = 20C5 :
    L239 = 20C8 :
     L24 = 2009 :
    L240 = 20CA :
    L241 = 20CA :
    L242 = 20CD :
    L243 = 20CD : 20BB
    L244 = 20CF :
    L245 = 20D1 :
    L246 = 20D2 :
     L25 = 2009 :
     L26 = 2009 :
     L27 = 2009 :
     L28 = 2009 :
     L29 = 2009 : 204A
      L3 = 2009 :
     L30 = 2009 :
     L31 = 200B :
     L32 = 2011 :
     L33 = 2012 :
     L34 = 2012 :
     L35 = 2014 :
     L36 = 2017 : 2025
     L37 = 201A :
     L38 = 201C :
     L39 = 201F :
      L4 = 2009 :
     L40 = 2022 : 2028
     L41 = 2025 :
     L42 = 2028 : 201F
     L43 = 202B :
     L44 = 202B : 201C
     L45 = 202D :
     L46 = 202F :
     L47 = 2030 :
     L48 = 2030 :
     L49 = 2030 :
      L5 = 2009 :
     L50 = 2030 :
     L51 = 2030 :
     L52 = 2030 : 20C5
     L53 = 2030 :
     L54 = 2032 :
     L55 = 2038 :
     L56 = 2038 :
     L57 = 2038 : 205A
     L58 = 203E :
     L59 = 2040 :
      L6 = 2009 :
     L60 = 2047 :
     L61 = 204A :
     L62 = 204A :
     L63 = 204D :
     L64 = 204D :
     L65 = 205A :
     L66 = 205A :
     L67 = 205D :
     L68 = 205D : 2047
     L69 = 205F :
      L7 = 2009 :
     L70 = 2061 :
     L71 = 2062 :
     L72 = 2062 :
     L73 = 2062 :
     L74 = 2062 :
     L75 = 2062 :
     L76 = 2062 :
     L77 = 2062 :
     L78 = 2062 :
     L79 = 2062 :
      L8 = 2009 :
     L80 = 2062 :
     L81 = 2062 :
     L82 = 2062 :
     L83 = 2062 :
     L84 = 2062 :
     L85 = 2062 :
     L86 = 2062 :
     L87 = 2062 :
     L88 = 2062 :
     L89 = 2062 :
      L9 = 2009 :
     L90 = 2062 :
     L91 = 2062 :
     L92 = 2062 :
     L93 = 2062 :
     L94 = 2062 :
     L95 = 2062 :
     L96 = 2062 :
     L97 = 2062 :
     L98 = 2062 :
     L99 = 2062 :
   div16 = 21D0 :
 div16_1 = 21D9 : 21E8
 div16_2 = 21E7 : 21E2
 div16_3 = 21E8 : 21E5
 div16_8 = 21F0 : 2257
div16_82 = 21F5 : 21FD
div16_83 = 21FD : 21F9
    div8 = 2201 : 2224
  div8_1 = 2209 : 2214
 div8_16 = 221B :
div8_161 = 2222 : 221E
  div8_2 = 2214 : 2210
 getChar = 20D2 : 222C
getChar1 = 20E0 : 20D7
   mul16 = 2154 :
 mul1632 = 2183 :
mul16321 = 21A5 : 21A2
mul16322 = 21AC : 21A9
  mul16S = 21B6 :
 mul16S1 = 21BF : 21CB
 mul16S2 = 21CA : 21C4 21C7
mul16_10 = 216D : 2235
 mul16_8 = 2176 :
 putBell = 212C :
 putCRLF = 2113 : 20F3 2246 226E
 putChar = 2106 : 20FD 2116 211B 2122 212A 212E 214F 2263
putChar1 = 2107 : 210C
putErase = 2120 :
 putHexA = 213B : 2132 2136
putHexA1 = 2144 : 2140
putHexA2 = 214F : 214B
putHexHL = 2130 :
  putMsg = 20EA :
putSpace = 2104 : 2125
 putStr1 = 20F8 : 2100
 putStr2 = 2102 : 20FB
    read = 2228 :
   read1 = 222C : 222F 223C 223F
   read2 = 2241 : 2233
   start = 2000 :
  writeA = 2272 : 226B
 writeHL = 224A : 2243 2276
writeHL1 = 2255 : 2250 225E
writeHL2 = 2260 : 2266
writeHL3 = 2261 : 2253
writeLineA = 226B :
writeLineHL = 2243 :
writeLineStr = 20F0 :
writeStr = 20F7 : 20EB 20F0
