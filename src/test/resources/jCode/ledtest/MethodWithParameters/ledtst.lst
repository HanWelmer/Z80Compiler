2000             SOC     equ 02000H        ;start of code, i.e.lowest external RAM address.
2000             TOS     equ 0FD00H        ;top of stack, i.e. bottom of MONITOR user global data.
2000                     .ORG  SOC
2000             start:
2000 31 00 FD            LD    SP,TOS
2003             L0:
2003 CD BF 20            CALL  L207
2006             L1:
2006 C3 71 01            JP    00171H      ;Jump to Zilog Z80183 Monitor.
2009             L2:
2009                     ;;ledtst.j(0) /* Z80S183 program that tests switching on/off the LED at the PWRSWTCH  output. */
2009             L3:
2009                     ;;ledtst.j(1) /* Transcribed from LEDTest.asm to ledtest.j */
2009             L4:
2009                     ;;ledtst.j(2) class LEDTest {
2009             L5:
2009                     ;class LEDTest []
2009             L6:
2009                     ;;ledtst.j(3)   /*******************************
2009             L7:
2009                     ;;ledtst.j(4)   To compile this class and generate Z80 asm, listing and hex files:
2009             L8:
2009                     ;;ledtst.j(5)   - cd src\test\resources\jCode\ledtest\localVariableNoParameter
2009             L9:
2009                     ;;ledtst.j(6)   - java -jar ..\..\..\..\..\..\target\z80Compiler-1.0-SNAPSHOT.jar -z -b ledtst.j
2009             L10:
2009                     ;;ledtst.j(7)   Assumes that code can be run from internal RAM with 1 wait state.
2009             L11:
2009                     ;;ledtst.j(8)   Assumes data can be read/written to internal RAM with 1 wait state.
2009             L12:
2009                     ;;ledtst.j(9)   Assumes the Z80S183 is driven by an 18.432 MHz clock at the XTAL pin
2009             L13:
2009                     ;;ledtst.j(10)   Assumes that an active-low LED is available at the PWRSWTCH pin:
2009             L14:
2009                     ;;ledtst.j(11)    - connect anode of low-current (2 mA) LED to VCC
2009             L15:
2009                     ;;ledtst.j(12)    - connect cathode of low-current LED to 1k8 resistor
2009             L16:
2009                     ;;ledtst.j(13)    - connect other end of resistor to PWR_SW (pin 13 of J23).
2009             L17:
2009                     ;;ledtst.j(14)   
2009             L18:
2009                     ;;ledtst.j(15)   Connect Z80S183 evaluation board via DB9 (male-female) cable to RS232 of host computer.
2009             L19:
2009                     ;;ledtst.j(16)   Start hyperterminal or TeraTerm:
2009             L20:
2009                     ;;ledtst.j(17)    - Select serial communication using COM1
2009             L21:
2009                     ;;ledtst.j(18)    - Set up | Serial port
2009             L22:
2009                     ;;ledtst.j(19)      * COM1
2009             L23:
2009                     ;;ledtst.j(20)      * 57600
2009             L24:
2009                     ;;ledtst.j(21)      * 8N2
2009             L25:
2009                     ;;ledtst.j(22)      * no flow control
2009             L26:
2009                     ;;ledtst.j(23)    - connect 9V DC adapter to Z80S183 evaluation board.
2009             L27:
2009                     ;;ledtst.j(24)    - Press RESET on Z80S183 evaluation board
2009             L28:
2009                     ;;ledtst.j(25)      The text Zilog Z80183 Monitor Version 2.8 should appear.
2009             L29:
2009                     ;;ledtst.j(26)   Upload Intel hex file ledtst.hex:
2009             L30:
2009                     ;;ledtst.j(27)    -  type L
2009             L31:
2009                     ;;ledtst.j(28)    -  File | Send file
2009             L32:
2009                     ;;ledtst.j(29)       * Browse to file ledtst.hex and select OK
2009             L33:
2009                     ;;ledtst.j(30)       * The text 10(10) records in Hex file should appear
2009             L34:
2009                     ;;ledtst.j(31)   Check memory contents:
2009             L35:
2009                     ;;ledtst.j(32)    -  D 2000 32
2009             L36:
2009                     ;;ledtst.j(33)   Run program
2009             L37:
2009                     ;;ledtst.j(34)    -  G 2000
2009             L38:
2009                     ;;ledtst.j(35)    - The LED should blink at a rate of 1Hz.
2009             L39:
2009                     ;;ledtst.j(36)   *******************************/
2009             L40:
2009                     ;;ledtst.j(37) 
2009             L41:
2009                     ;;ledtst.j(38)   // Definition of on-chip Z80S183 registers
2009             L42:
2009                     ;;ledtst.j(39)   //                Name  Address  Description
2009             L43:
2009                     ;;ledtst.j(40)   //                ====  =======  =========
2009             L44:
2009                     ;;ledtst.j(41)   static final byte WDTCR = 0x65;  //Watchdog Timer Control Register
2009             L45:
2009                     ;;ledtst.j(42)   static final byte SCR   = 0x7F;  //System Configuration Register P91
2009             L46:
2009                     ;;ledtst.j(43)   static final byte CCR   = 0x1F;  //CPU Control Register P84
2009             L47:
2009                     ;;ledtst.j(44)   static final byte DCNTL = 0x32;  //DMA/Wait Control Register P121
2009             L48:
2009                     ;;ledtst.j(45)   static final byte WSGCR = 0x6B;  //Wait State Generator Control Register P96
2009             L49:
2009                     ;;ledtst.j(46)   static final byte PCR   = 0x7E;  //Power Control Register
2009             L50:
2009                     ;;ledtst.j(47) 
2009             L51:
2009                     ;;ledtst.j(48)   //Device initialisation
2009             L52:
2009                     ;;ledtst.j(49)   public static void init() {
2009             L53:
2009                     ;method init [public, static] void ()
2009             L54:
2009 DD E5               PUSH  IX
200B             L55:
200B DD 21 00 00         LD    IX,0x0000
200F DD 39               ADD   IX,SP
2011             L56:
2011 21 00 00            LD    HL,65536
2014 39                  ADD   HL,SP
2015 F9                  LD    SP,HL
2016             L57:
2016                     ;;ledtst.j(50)     // Enable writing to system ctrl registers
2016             L58:
2016                     ;;ledtst.j(51)     output(WDTCR, 0x00);
2016             L59:
2016 3E 00               LD    A,0
2018 ED 39 65            OUT0  (065H),A
201B             L60:
201B                     ;;ledtst.j(52)     // LD      A,00BH
201B             L61:
201B                     ;;ledtst.j(53)     // OUT0    (WDTCR),A
201B             L62:
201B                     ;;ledtst.j(54) 
201B             L63:
201B                     ;;ledtst.j(55)     // System configuration Register P91
201B             L64:
201B                     ;;ledtst.j(56)     // b7 = 0 on-chip ROM disabled
201B             L65:
201B                     ;;ledtst.j(57)     // b6 = 1 on-chip RAM enabled
201B             L66:
201B                     ;;ledtst.j(58)     // b5 = 0 on-chip RAM at xF800H-xFFFFH
201B             L67:
201B                     ;;ledtst.j(59)     // b4 = 1 ROMCS enabled/disabled
201B             L68:
201B                     ;;ledtst.j(60)     // b3 = 1 RAMCS enabled/disabled
201B             L69:
201B                     ;;ledtst.j(61)     // b2 = 1 IOCS  enabled/disabled
201B             L70:
201B                     ;;ledtst.j(62)     // b10=00 PHI = EXTAL clock
201B             L71:
201B                     ;;ledtst.j(63)     output(SCR, 0x5C);
201B             L72:
201B 3E 5C               LD    A,92
201D ED 39 7F            OUT0  (07FH),A
2020             L73:
2020                     ;;ledtst.j(64)     // LD      A,05CH
2020             L74:
2020                     ;;ledtst.j(65)     // OUT0    (SCR),A
2020             L75:
2020                     ;;ledtst.j(66)   
2020             L76:
2020                     ;;ledtst.j(67)     // CPU Control Register P84
2020             L77:
2020                     ;;ledtst.j(68)     // b7 = 1 PHI = XTAL / 1
2020             L78:
2020                     ;;ledtst.j(69)     // b63=00 SLP instruction enters sleep mode
2020             L79:
2020                     ;;ledtst.j(70)     // b5 = 0 BREQ in standby ignored
2020             L80:
2020                     ;;ledtst.j(71)     // b4 = 0 PHI low noise disabled
2020             L81:
2020                     ;;ledtst.j(72)     // b2 = x reserved
2020             L82:
2020                     ;;ledtst.j(73)     // b1 = 0 IORD/IOWR low noise disabled
2020             L83:
2020                     ;;ledtst.j(74)     // b0 = 0 A19-0/D7-0 low noise disabled
2020             L84:
2020                     ;;ledtst.j(75)     output(CCR, 0x80);    
2020             L85:
2020 3E 80               LD    A,128
2022 ED 39 1F            OUT0  (01FH),A
2025             L86:
2025                     ;;ledtst.j(76)     // LD      A,080H
2025             L87:
2025                     ;;ledtst.j(77)     // OUT0    (CCR),A
2025             L88:
2025                     ;;ledtst.j(78) 
2025             L89:
2025                     ;;ledtst.j(79)     
2025             L90:
2025                     ;;ledtst.j(80)     // DMA/Wait Control Register P121
2025             L91:
2025                     ;;ledtst.j(81)     // b76=00 0 wait state CPU memory cycle
2025             L92:
2025                     ;;ledtst.j(82)     // b54=00 0 wait state CPU I/O cycle
2025             L93:
2025                     ;;ledtst.j(83)     // b3 = 0 level detect on DMA1 Request
2025             L94:
2025                     ;;ledtst.j(84)     // b2 = 0 level detect on DMA0 Request
2025             L95:
2025                     ;;ledtst.j(85)     // b1 = 0 DMA from memory to I/O 
2025             L96:
2025                     ;;ledtst.j(86)     // b0 = 0 DMA increasing memory address
2025             L97:
2025                     ;;ledtst.j(87)     output(DCNTL, 0x00);
2025             L98:
2025 3E 00               LD    A,0
2027 ED 39 32            OUT0  (032H),A
202A             L99:
202A                     ;;ledtst.j(88)     // XOR      A
202A             L100:
202A                     ;;ledtst.j(89)     // OUT0    (DCNTL),A
202A             L101:
202A                     ;;ledtst.j(90) 
202A             L102:
202A                     ;;ledtst.j(91)     // Wait State Generator Control Register P96
202A             L103:
202A                     ;;ledtst.j(92)     // b76=00 0 wait states CSROM
202A             L104:
202A                     ;;ledtst.j(93)     // b54=00 0 wait states CSRAM
202A             L105:
202A                     ;;ledtst.j(94)     // b32=00 0 wait states other
202A             L106:
202A                     ;;ledtst.j(95)     // b10=xx reserved
202A             L107:
202A                     ;;ledtst.j(96)     output(WSGCR, 0x00);
202A             L108:
202A 3E 00               LD    A,0
202C ED 39 6B            OUT0  (06BH),A
202F             L109:
202F                     ;;ledtst.j(97)     // OUT0    (WSGCR),A
202F             L110:
202F                     ;;ledtst.j(98) 
202F             L111:
202F                     ;;ledtst.j(99)     // Block writing to system ctrl registers
202F             L112:
202F                     ;;ledtst.j(100)     output(WDTCR, 0x00);
202F             L113:
202F 3E 00               LD    A,0
2031 ED 39 65            OUT0  (065H),A
2034             L114:
2034                     ;;ledtst.j(101)     // XOR     A
2034             L115:
2034                     ;;ledtst.j(102)     // OUT0    (WDTCR),A
2034             L116:
2034                     ;;ledtst.j(103)   }
2034             L117:
2034 DD F9               LD    SP,IX
2036             L118:
2036 DD E1               POP   IX
2038             L119:
2038 C9                  return
2039             L120:
2039                     ;;ledtst.j(104) 
2039             L121:
2039                     ;;ledtst.j(105)   public static void toggle() {
2039             L122:
2039                     ;method toggle [public, static] void ()
2039             L123:
2039 DD E5               PUSH  IX
203B             L124:
203B DD 21 00 00         LD    IX,0x0000
203F DD 39               ADD   IX,SP
2041             L125:
2041 21 00 00            LD    HL,65536
2044 39                  ADD   HL,SP
2045 F9                  LD    SP,HL
2046             L126:
2046                     ;;ledtst.j(106)     // Enable writing to PCR
2046             L127:
2046                     ;;ledtst.j(107)     output(WDTCR, 0x0B);
2046             L128:
2046 3E 0B               LD    A,11
2048 ED 39 65            OUT0  (065H),A
204B             L129:
204B                     ;;ledtst.j(108)     //LD      A,00BH
204B             L130:
204B                     ;;ledtst.j(109)     //OUT0    (WDTCR),A
204B             L131:
204B                     ;;ledtst.j(110) 
204B             L132:
204B                     ;;ledtst.j(111)     // Toggle LED at PWR_SW
204B             L133:
204B                     ;;ledtst.j(112)     output(PCR, input(PCR) ^ 0x20);
204B             L134:
204B ED 38 7E            IN0  A,(07EH)
204E             L135:
204E EE 20               XOR   A,32
2050             L136:
2050 ED 39 7E            OUT0  (07EH),A
2053             L137:
2053                     ;;ledtst.j(113)     //IN0     A,(PCR)
2053             L138:
2053                     ;;ledtst.j(114)     //XOR     A,020H
2053             L139:
2053                     ;;ledtst.j(115)     //OUT0    (PCR),A
2053             L140:
2053                     ;;ledtst.j(116) 
2053             L141:
2053                     ;;ledtst.j(117)     // Disable writing to PCR
2053             L142:
2053                     ;;ledtst.j(118)     output(WDTCR, 0x00);
2053             L143:
2053 3E 00               LD    A,0
2055 ED 39 65            OUT0  (065H),A
2058             L144:
2058                     ;;ledtst.j(119)     //XOR     A,A
2058             L145:
2058                     ;;ledtst.j(120)     //OUT0    (WDTCR),A
2058             L146:
2058                     ;;ledtst.j(121)   }
2058             L147:
2058 DD F9               LD    SP,IX
205A             L148:
205A DD E1               POP   IX
205C             L149:
205C C9                  return
205D             L150:
205D                     ;;ledtst.j(122) 
205D             L151:
205D                     ;;ledtst.j(123)   /**
205D             L152:
205D                     ;;ledtst.j(124)    * Wait 1 msec at 18,432 MHz with no wait states.
205D             L153:
205D                     ;;ledtst.j(125)    * 
205D             L154:
205D                     ;;ledtst.j(126)    * With n=255 the routine requires 108 + n * 71 = 18213 T-states, 
205D             L155:
205D                     ;;ledtst.j(127)    * which is 219 T-states or 11,8 microseconds short of 1 millisecond.
205D             L156:
205D                     ;;ledtst.j(128)    * 
205D             L157:
205D                     ;;ledtst.j(129)    * Duplicating the for loop with a total of 257 for n and m 
205D             L158:
205D                     ;;ledtst.j(130)    * requires 132 + (n + m) * 71 = 18379 T-states,
205D             L159:
205D                     ;;ledtst.j(131)    * which is 53 T-states or 2,8 microseconds short of 1 millisecond.
205D             L160:
205D                     ;;ledtst.j(132)    */
205D             L161:
205D                     ;;ledtst.j(133)   public static void sleepOneMillisecond() {
205D             L162:
205D                     ;method sleepOneMillisecond [public, static] void ()
205D             L163:
205D DD E5               PUSH  IX
205F             L164:
205F DD 21 00 00         LD    IX,0x0000
2063 DD 39               ADD   IX,SP
2065             L165:
2065 21 FF FF            LD    HL,65535
2068 39                  ADD   HL,SP
2069 F9                  LD    SP,HL
206A             L166:
206A                     ;;ledtst.j(134)     for (byte b = 255; b!=0; b--) ;
206A             L167:
206A 3E FF               LD    A,255
206C             L168:
206C DD 77 FF            LD    (IX - 1),A
206F             L169:
206F DD 7E FF            LD    A,(IX - 1)
2072             L170:
2072 D6 00               SUB   A,0
2074             L171:
2074 CA 83 20            JP    Z,L177
2077             L172:
2077 C3 80 20            JP    L175
207A             L173:
207A DD 35 FF            DEC   (IX - 1)
207D             L174:
207D C3 6F 20            JP    L169
2080             L175:
2080 C3 7A 20            JP    L173
2083             L176:
2083                     ;;ledtst.j(135)   }
2083             L177:
2083 DD F9               LD    SP,IX
2085             L178:
2085 DD E1               POP   IX
2087             L179:
2087 C9                  return
2088             L180:
2088                     ;;ledtst.j(136) 
2088             L181:
2088                     ;;ledtst.j(137)   /**
2088             L182:
2088                     ;;ledtst.j(138)    * sleep for n miliseconds.
2088             L183:
2088                     ;;ledtst.j(139)    */
2088             L184:
2088                     ;;ledtst.j(140)   public static void sleep(word n) {
2088             L185:
2088                     ;method sleep [public, static] void (word n {bp+4})
2088             L186:
2088 DD E5               PUSH  IX
208A             L187:
208A DD 21 00 00         LD    IX,0x0000
208E DD 39               ADD   IX,SP
2090             L188:
2090 21 00 00            LD    HL,65536
2093 39                  ADD   HL,SP
2094 F9                  LD    SP,HL
2095             L189:
2095                     ;;ledtst.j(141)     while (n != 0) {
2095             L190:
2095 DD 6E 04            LD    L,(IX + 4)
2098 DD 66 05            LD    H,(IX + 5)
209B             L191:
209B 3E 00               LD    A,0
209D             L192:
209D 5F                  LD    E,A
209E 16 00               LD    D,0
20A0 EB                  EX    DE,HL
20A1 B7                  OR    A
20A2 ED 52               SBC   HL,DE
20A4             L193:
20A4 CA BA 20            JP    Z,L201
20A7             L194:
20A7                     ;;ledtst.j(142)       sleepOneMillisecond();
20A7             L195:
20A7 CD 5D 20            CALL  L162
20AA             L196:
20AA                     ;;ledtst.j(143)       n--;
20AA             L197:
20AA DD 6E 04            LD    L,(IX + 4)
20AD DD 66 05            LD    H,(IX + 5)
20B0 2B                  DEC   HL
20B1 DD 75 04            LD    (IX + 4),L
20B4 DD 74 05            LD    (IX + 5),H
20B7             L198:
20B7                     ;;ledtst.j(144)     }
20B7             L199:
20B7 C3 95 20            JP    L190
20BA             L200:
20BA                     ;;ledtst.j(145)   }
20BA             L201:
20BA DD F9               LD    SP,IX
20BC             L202:
20BC DD E1               POP   IX
20BE             L203:
20BE C9                  return
20BF             L204:
20BF                     ;;ledtst.j(146) 
20BF             L205:
20BF                     ;;ledtst.j(147)   // Blink LED on/off in a XXxxXXxx pattern at 1 Hz.
20BF             L206:
20BF                     ;;ledtst.j(148)   public static void main() {
20BF             L207:
20BF                     ;method main [public, static] void ()
20BF             L208:
20BF DD E5               PUSH  IX
20C1             L209:
20C1 DD 21 00 00         LD    IX,0x0000
20C5 DD 39               ADD   IX,SP
20C7             L210:
20C7 21 00 00            LD    HL,65536
20CA 39                  ADD   HL,SP
20CB F9                  LD    SP,HL
20CC             L211:
20CC                     ;;ledtst.j(149)     init();
20CC             L212:
20CC CD 09 20            CALL  L53
20CF             L213:
20CF                     ;;ledtst.j(150)     while (1==1) {
20CF             L214:
20CF 3E 01               LD    A,1
20D1             L215:
20D1 D6 01               SUB   A,1
20D3             L216:
20D3 C2 E3 20            JP    NZ,L227
20D6             L217:
20D6                     ;;ledtst.j(151)       toggle();
20D6             L218:
20D6 CD 39 20            CALL  L122
20D9             L219:
20D9                     ;;ledtst.j(152)       //Thread.sleep(500); // Sleep for 500 miliseconds.
20D9             L220:
20D9                     ;;ledtst.j(153)       sleep(500); // Sleep for 500 miliseconds.
20D9             L221:
20D9 21 F4 01            LD    HL,500
20DC             L222:
20DC E5                  PUSH HL
20DD             L223:
20DD CD 88 20            CALL  L185
20E0             L224:
20E0                     ;;ledtst.j(154)     }
20E0             L225:
20E0 C3 CF 20            JP    L214
20E3             L226:
20E3                     ;;ledtst.j(155)   }
20E3             L227:
20E3 DD F9               LD    SP,IX
20E5             L228:
20E5 DD E1               POP   IX
20E7             L229:
20E7 C9                  return
20E8             L230:
20E8                     ;;ledtst.j(156) }
20E8             CNTLA0  equ 000H          ;144 ASCI0 Control Register A.
20E8             STAT0   equ 004H          ;147 ASCI0 Status register.
20E8             TDR0    equ 006H          ;148 ASCI0 Transmit Data Register.
20E8             RDR0    equ 008H          ;149 ASCI0 Receive Data Register.
20E8             ERROR   equ 3             ;CNTLA0->OVRN,FE,PE,BRK error flags.
20E8             TDRE    equ 1             ;STAT0->Tx data register empty bit.
20E8             OVERRUN equ 6             ;STAT0->OVERRUN bit.
20E8             RDRF    equ 7             ;STAT0->Rx data register full bit.
20E8             ;****************
20E8             ;getChar
20E8             ;Check if an input character from ASCI0 is available.
20E8             ;  IN:  none
20E8             ;  OUT: F: ZERO flag set if no character is available.
20E8             ;          ZERO flag reset if a character is available.
20E8             ;       A : character from ASCI0, if available.
20E8             ;  USES:AF
20E8             ;****************
20E8             getChar:
20E8 ED 38 04            IN0   A,(STAT0)   ;read ASCI0 status
20EB CB 77               BIT   OVERRUN,A   ;check if ASCIO OVERRUN bit is set
20ED 20 07               JR    NZ,getChar1 ;-yes: reset error flags
20EF CB 7F               BIT   RDRF,A      ;check if ASCIO RDRF bit is set
20F1 C8                  RET   Z           ;-no: return without a character
20F2 ED 38 08            IN0   A,(RDR0)    ;-yes:read ASCIO Rx data register
20F5 C9                  RET
20F6             getChar1:
20F6 ED 38 00            IN0   A,(CNTLA0)  ;read ASCI0 control register
20F9 CB 9F               RES   ERROR,A     ;reset OVRN,FE,PE,BRK flags
20FB ED 39 00            OUT0  (CNTLA0),A  ;write back to ASCI0 CTRL
20FE AF                  XOR   A,A
20FF C9                  RET               ;return without a character
2100             ;****************
2100             ;putMsg
2100             ;Print via ASCI0 a zero terminated string, starting at the return address on the stack.
2100             ;  IN:  none.
2100             ;  OUT: none.
2100             ;  USES:none.
2100             ;****************
2100             putMsg:
2100 E3                  EX    (SP),HL     ;save HL and load return address into HL.
2101 CD 0D 21            CALL  writeStr
2104 E3                  EX    (SP),HL     ;put return address onto stack and restore HL.
2105 C9                  RET
2106             ;****************
2106             ;writeLineStr
2106             ;Print via ASCI0 a zero terminated string, pointed to by HL, followed by a carriage return.
2106             ;  IN:  HL:address of zero terminated string to be printed.
2106             ;  OUT: none.
2106             ;  USES:HL (point to byte after zero terminated string)
2106             ;****************
2106             writeLineStr:
2106 CD 0D 21            CALL  writeStr
2109 CD 29 21            CALL  putCRLF
210C C9                  RET
210D             ;****************
210D             ;writeStr
210D             ;Print via ASCI0 a zero terminated string, pointed to by HL.
210D             ;  IN:  HL:address of zero terminated string to be printed.
210D             ;  OUT: none.
210D             ;  USES:HL (point to byte after zero terminated string)
210D             ;****************
210D             writeStr:
210D F5                  PUSH  AF          ;save registers
210E             putStr1:
210E 7E                  LD    A,(HL)      ;get next character
210F 23                  INC   HL
2110 B7                  OR    A,A         ;is it zer0?
2111 28 05               JR    Z,putStr2   ;yes ->return
2113 CD 1C 21            CALL  putChar     ;no->put it to ASCI0
2116 18 F6               JR    putStr1
2118             putStr2:
2118 F1                  POP   AF
2119 C9                  RET
211A             ;****************
211A             ;putSpace
211A             ;Send a space character to ASCI0
211A             ;  IN:  none.
211A             ;  OUT: none.
211A             ;  USES:AF
211A             ;****************
211A             putSpace:
211A 3E 20               LD    A,' '       ;load space and continue with putChar.
211C             ;****************
211C             ;putChar
211C             ;Send one character to ASCI0.
211C             ;  IN:  A = character
211C             ;  OUT: none.
211C             ;  USES:none.
211C             ;****************
211C             putChar:
211C F5                  PUSH  AF          ;send the character via ASCI0
211D             putChar1:
211D ED 38 04            IN0   A,(STAT0)   ;read ASCI0 status register
2120 CB 4F               BIT   TDRE,A      ;wait until TDRE <> 0
2122 28 F9               JR    Z,putChar1
2124 F1                  POP   AF          ;restore AF registers
2125 ED 39 06            OUT0  (TDR0),A    ;write character to ASCI0
2128 C9                  RET
2129             ;****************
2129             ;putCRLF
2129             ;Send CR and LF to ASCI0
2129             ;  IN:  none.
2129             ;  OUT: none.
2129             ;  USES:none.
2129             ;****************
2129             putCRLF:
2129 F5                  PUSH  AF
212A 3E 0D               LD    A,'\r'       ;print carriage return
212C CD 1C 21            CALL  putChar
212F 3E 0A               LD    A,'\n'       ;print line feed
2131 CD 1C 21            CALL  putChar
2134 F1                  POP   AF
2135 C9                  RET
2136             ;****************
2136             ;putErase
2136             ;Erase the latest character at ASCI0
2136             ;  IN:  none.
2136             ;  OUT: none.
2136             ;  USES:AF
2136             ;****************
2136             putErase:
2136 3E 08               LD    A,'\b'       ;print backspace
2138 CD 1C 21            CALL  putChar
213B CD 1A 21            CALL  putSpace    ;print space (erase character)
213E 3E 08               LD    A,'\b'      ;print backspace
2140 18 DA               JR    putChar
2142             ;****************
2142             ;putBell
2142             ;Send a Bell character to ASCI0
2142             ;  IN:  none.
2142             ;  OUT: none.
2142             ;  USES:AF
2142             ;****************
2142             putBell:
2142 3E 07               LD    A,07        ;ring the bell at ASCI0
2144 18 D6               JR    putChar
2146             ;****************
2146             ;putHexHL
2146             ;Print HL register pair as 4 hex digits
2146             ;  IN:  HL = word to be printed.
2146             ;  OUT: none.
2146             ;  USES:none.
2146             ;****************
2146             putHexHL:
2146 F5                  PUSH  AF          ;save used registers
2147 7C                  LD    A,H         ;print H as 2 hex digits
2148 CD 51 21            CALL  putHexA
214B 7D                  LD    A,L         ;print L as 2 hex digits
214C CD 51 21            CALL  putHexA
214F F1                  POP   AF          ;restore used registers
2150 C9                  RET
2151             ;****************
2151             ;putHexA
2151             ;Print A register as 2 hex digits
2151             ;  IN:  A = byte to be printed
2151             ;  OUT: none.
2151             ;  USES:none.
2151             ;****************
2151             putHexA:
2151 F5                  PUSH  AF          ;save input
2152 1F                  RRA               ;shift upper nibble to the right
2153 1F                  RRA
2154 1F                  RRA
2155 1F                  RRA
2156 CD 5A 21            CALL  putHexA1    ;print upper nibble
2159 F1                  POP   AF          ;restore input & print lower nibble
215A             putHexA1:
215A F5                  PUSH  AF          ;save input
215B E6 0F               AND   A,00FH      ;mask lower nibble
215D C6 30               ADD   A,'0'       ;convert to hex digit
215F FE 3A               CP    A,'9'+1
2161 38 02               JR    C,putHexA2
2163 C6 07               ADD   A,07
2165             putHexA2:
2165 CD 1C 21            CALL  putChar
2168 F1                  POP   AF          ;restore input
2169 C9                  RET               ;and return
216A             ;****************
216A             ;mul16
216A             ;16 by 16 bit unsigned multiplication with 16 bit result.
216A             ;  IN:  HL = operand 1
216A             ;       DE = operand 2
216A             ;  OUT: HL = HL * DE low part
216A             ;  USES:DE
216A             ;  Size   25 bytes
216A             ;  Time  160 cycles
216A             ;****************
216A             mul16:
216A                     ;HL = HL * DE
216A                     ;        H  L
216A                     ;        D  E
216A                     ;    --------*
216A                     ;          EL
216A                     ;       EH  0
216A                     ;       DL  0
216A                     ; -----------+
216A                     ;        R  S
216A                     ;S = ELlow
216A                     ;R = ELhigh+EHlow+DLlow
216A C5                  PUSH  BC          ;11  11 save BC
216B 44                  LD    B,H         ; 4  15 copy HL to BC
216C 4D                  LD    C,L         ; 4  19
216D 63                  LD    H,E         ; 4  23 HL contains EL
216E ED 6C               MLT   HL          ;17  40
2170 E5                  PUSH  HL          ;11  51
2171 63                  LD    H,E         ; 4  55 HL contains EH aka EB
2172 68                  LD    L,B         ; 4  59
2173 ED 6C               MLT   HL          ;17  76
2175 45                  LD    B,L         ; 4  80 save EHlow in B
2176 62                  LD    H,D         ; 4  84 HL contains DL aka DC
2177 69                  LD    L,C         ; 4  88
2178 ED 6C               MLT   HL          ;17 105
217A 55                  LD    D,L         ; 4 109 DLlow into DE
217B 1E 00               LD    E,0         ; 6 115
217D E1                  POP   HL          ; 9 124 add EL+DElow
217E 19                  ADD   HL,DE       ; 7 131
217F 50                  LD    D,B         ; 4 135 add EL+DElow+EHlow
2180 19                  ADD   HL,DE       ; 7 142
2181 C1                  POP   BC          ; 9 151 restore BC
2182 C9                  RET               ; 9 160
2183             ;****************
2183             ;mul16_10
2183             ;multiply a 16 bit unsigned number by 10 with a 16 bit result.
2183             ;  IN:  HL = operand
2183             ;  OUT: HL = HL * 10; low part
2183             ;  USES:Flags
2183             ;  Size   9 bytes
2183             ;  Time   65 cycles
2183             ;****************
2183             mul16_10:
2183 D5                  PUSH  DE          ;11 11
2184 54                  LD    D,H         ; 4 15
2185 5D                  LD    E,L         ; 4 19
2186 29                  ADD   HL,HL       ; 7 26 times 2
2187 29                  ADD   HL,HL       ; 7 33 times 4
2188 19                  ADD   HL,DE       ; 7 40 times 5
2189 29                  ADD   HL,HL       ; 7 47 times 10
218A D1                  POP   DE          ; 9 56
218B C9                  RET               ; 9 65
218C             ;****************
218C             ;mul16_8
218C             ;16 by 8 bit unsigned multiplication with 16 bit result.
218C             ;  IN:  HL = operand 1
218C             ;        A = operand 2
218C             ;  OUT: HL = HL * A low part
218C             ;  USES:AF
218C             ;  Size   .. bytes
218C             ;  Time  ... cycles
218C             ;****************
218C             mul16_8:
218C                     ;HL = HL * A
218C                     ;        H  L
218C                     ;           A
218C                     ;    --------*
218C                     ;          AL
218C                     ;       AH  0
218C                     ; -----------+
218C                     ;        R  S
218C                     ;S = ALlow
218C                     ;R = ALhigh+AHlow
218C C5                  PUSH  BC          ;11  11 save BC
218D 44                  LD    B,H         ; 4  15
218E 4F                  LD    C,A         ; 4  19
218F 67                  LD    H,A         ; 4  23
2190 ED 6C               MLT   HL          ;17  40 HL = AL
2192 ED 4C               MLT   BC          ;17  57 BC = AH
2194 7C                  LD    A,H         ; 4  61 A = S = ALhigh+AHlow
2195 81                  ADD   A,C         ; 4  65
2196 67                  LD    H,A         ; 4  69
2197 C1                  POP   BC          ; 9  78 | 289 restore BC
2198 C9                  RET               ; 9  87 | 307
2199             ;****************
2199             ;mul1632
2199             ;16 by 16 bit unsigned multiplication with 32 bit result.
2199             ;  IN:  HL = operand 1
2199             ;       DE = operand 2
2199             ;  OUT: HL = HL * DE low part
2199             ;       DE = HL * DE high part
2199             ;  USES:-
2199             ;  Size 49 bytes
2199             ;  Time between 303 en 307 cycles
2199             ;****************
2199             mul1632:
2199                     ;HL = HL * DE
2199                     ;        H  L
2199                     ;        D  E
2199                     ;    --------*
2199                     ;          EL
2199                     ;       EH  0
2199                     ;       DL  0
2199                     ;    DH  0  0
2199                     ; -----------+
2199                     ;  P  Q  R  S
2199                     ;S = ELlow
2199                     ;R = ELhigh+EHlow+DLlow
2199                     ;Q = DHlow+EHhigh+DLhigh
2199                     ;P = DHhigh
2199 F5                  PUSH  AF          ;11  11 save AF
219A C5                  PUSH  BC          ;11  22 save BC
219B 44                  LD    B,H         ; 4  26
219C 4D                  LD    C,L         ; 4  30
219D 62                  LD    H,D         ; 4  34 HL contains DH aka DB
219E 68                  LD    L,B         ; 4  38
219F ED 6C               MLT   HL          ;17  55
21A1 E5                  PUSH  HL          ;11  66
21A2 62                  LD    H,D         ; 4  70 HL contains DL aka DC
21A3 69                  LD    L,C         ; 4  74
21A4 ED 6C               MLT   HL          ;17  91
21A6 E5                  PUSH  HL          ;11 102
21A7 63                  LD    H,E         ; 4 106 HL contains EH aka EB
21A8 68                  LD    L,B         ; 4 110
21A9 ED 6C               MLT   HL          ;17 127
21AB E5                  PUSH  HL          ;11 138
21AC 63                  LD    H,E         ; 4 142 HL contains EL aka EC
21AD 69                  LD    L,C         ; 4 146
21AE ED 6C               MLT   HL          ;17 163
21B0 D1                  POP   DE          ; 9 172 calculate RS=EL+EH0
21B1 06 00               LD    B,0         ; 6 178
21B3 4A                  LD    C,D         ; 4 182 ..C=EHhigh
21B4 53                  LD    D,E         ; 4 186 ..D=EHlow
21B5 1E 00               LD    E,0         ; 6 192
21B7 19                  ADD   HL,DE       ; 7 199
21B8 30 01               JR    NC,mul16321 ; 8 207 | 6 205 add carry to PQ
21BA 03                  INC   BC          ;         4 209
21BB             mul16321:
21BB D1                  POP   DE          ; 9 209 | 211 calculate RS=EL+EH0+DL0
21BC 7A                  LD    A,D         ; 4 220 | 222 ..A=DLhigh
21BD 53                  LD    D,E         ; 4 224 | 226 ..D=DLlow
21BE 19                  ADD   HL,DE       ; 7 231 | 233
21BF 30 01               JR    NC,mul16322 ; 8 239 | 6 239 add carry to PQ
21C1 03                  INC   BC          ;         4 243
21C2             mul16322:
21C2                                       ;HL=RS=EL+EH0+DL0
21C2                                       ;C=EHhigh
21C2                                       ;A=DLhigh
21C2                                       ;E=0
21C2 EB                  EX    DE,HL       ; 3 242 | 246
21C3 65                  LD    H,L         ; 4 246 | 250 ..E was 0, so H=L=0
21C4 6F                  LD    L,A         ; 4 250 | 254 ..HL=DLhigh
21C5 09                  ADD   HL,BC       ; 7 257 | 261 PQ=EHhigh+DLhigh+DH
21C6 C1                  POP   BC          ; 9 266 | 270
21C7 09                  ADD   HL,BC       ; 7 273 | 277
21C8 EB                  EX    DE,HL       ; 3 276 | 280
21C9                                       ;D=P=DHhigh
21C9                                       ;E=Q=DHlow+EHhigh+DLhigh
21C9                                       ;H=R=ELhigh+EHlow+DLlow
21C9                                       ;L=S=ELlow
21C9 C1                  POP   BC          ; 9 285 | 289 restore BC
21CA F1                  POP   AF          ; 9 294 | 298 restore AF
21CB C9                  RET               ; 9 303 | 307
21CC             ;****************
21CC             ;mul16S
21CC             ;16 by 16 bit slow unsigned multiplication with 32 bit result.
21CC             ;  IN:  HL = operand 1
21CC             ;       DE = operand 2
21CC             ;  OUT: DE = HL * DE high part
21CC             ;       HL = HL * DE low part
21CC             ;  USES:none.
21CC             ;  Size 26 bytes
21CC             ;  Time between 726 en 998 cycles
21CC             ;****************
21CC             mul16S:
21CC F5                  PUSH  AF          ;11  11 save AF
21CD C5                  PUSH  BC          ;11  22 save BC
21CE 44                  LD    B,H         ; 4  26
21CF 4D                  LD    C,L         ; 4  30
21D0 21 00 00            LD    HL,0        ; 9  39
21D3 3E 10               LD    A,16        ; 6  45
21D5             mul16S1:
21D5 29                  ADD   HL,HL       ;16*7=112 157
21D6 CB 13               RL    E           ;16*7=112 269
21D8 CB 12               RL    D           ;16*7=112 381
21DA 30 04               JR    NC,mul16S2  ;16*8=128 509 16*6= 96 477
21DC 09                  ADD   HL,BC       ;             16*7=112 589
21DD 30 01               JR    NC,mul16S2  ;             16*8=128 717 16*6=96 685
21DF 13                  INC   DE          ;             16*4= 64 781 16*4=64 749 This instruction (with the jump) is like an "ADC DE,0"
21E0             mul16S2:
21E0 3D                  DEC   A           ;16*4=64    573 | 845 | 813
21E1 20 F2               JR    NZ,mul16S1  ;15*8+6=126 699 | 971 | 939
21E3 C1                  POP   BC          ; 9         708 | 980 | 948 restore BC
21E4 F1                  POP   AF          ; 9         717 | 989 | 957 restore AF
21E5 C9                  RET               ; 9         726 | 998 | 966
21E6             ;****************
21E6             ;div16
21E6             ;16 by 16 bit unsigned division.
21E6             ;  IN:  HL = dividend
21E6             ;       DE = divisor
21E6             ;  OUT: HL = quotient
21E6             ;       DE = remainder
21E6             ;  USES:-
21E6             ;  Size   32 bytes
21E6             ;  Time   between 1073 en 1121 cycles
21E6             ;pseudo code:
21E6             ;T = AC = dividend
21E6             ;D = DE = divisor
21E6             ;Q = AC = quotient = 0
21E6             ;R = HL = remainder = 0
21E6             ;invariante betrekking:
21E6             ; D/T\Q     
21E6             ;   R       
21E6             ; T = QD + R
21E6             ; T <= 2^N  
21E6             ;
21E6             ; D/T'.RT\Q'      
21E6             ;   R'             
21E6             ; RT <= 2^N        
21E6             ; 0<=k<=N          
21E6             ; RT = T % 2^k     
21E6             ; T' = (T-RT) / 2^k
21E6             ; Q' = T' / D      
21E6             ; R' = T' % D      
21E6             ;
21E6             ;for (i=16; i>0; i--) {
21E6             ;  T = T * 2 (remember MSB in carry)
21E6             ;  R = R * 2 + carry
21E6             ;  Q = Q * 2
21E6             ;  if (R >= D) {
21E6             ;    R = R - D;
21E6             ;    Q++;
21E6             ;  }
21E6             ;}
21E6             ;return Q (in HL) and R (in DE)
21E6             ;****************
21E6             div16:
21E6 F5                  PUSH  AF          ;11  11 save registers used
21E7 C5                  PUSH  BC          ;11  22
21E8 4D                  LD    C,L         ; 4  26 T(AC) = teller from input (HL)
21E9 7C                  LD    A,H         ; 4  30 D(DE) = deler from input  (DE)
21EA 21 00 00            LD    HL,0        ; 9  39 R(HL) = restant; Q(AC) = quotient
21ED 06 10               LD    B,16        ; 6  45 for (i=16; i>0; i--)
21EF             div16_1:
21EF CB 21               SLA   C           ;16* 7=112 157   T = T * 2 (remember MSB in carry)
21F1 CB 17               RL    A           ;16* 7=112 269   Q = Q * 2
21F3 ED 6A               ADC   HL,HL       ;16*10=160 429   R = R * 2 + carry
21F5 B7                  OR    A,A         ;16* 4= 64 493   if (R >= D) {
21F6 ED 52               SBC   HL,DE       ;16*10=160 653
21F8 38 03               JR    C,div16_2   ;16* 8=128 781 16*6= 96 749   R = R - D
21FA 0C                  INC   C           ;              16*4= 64 813   Q++
21FB 18 01               JR    div16_3     ;              16*8=128 941
21FD             div16_2:
21FD 19                  ADD   HL,DE       ;16* 7=112 893  (compensate comparison)
21FE             div16_3:
21FE 10 EF               DJNZ  div16_1     ;15*9+7=142 1035 | 1083 }
2200 EB                  EX    DE,HL       ; 3 1038 | 1086 swap remainder (HL) into DE
2201 67                  LD    H,A         ; 4 1042 | 1090 move quotient (AC) into HL
2202 69                  LD    L,C         ; 4 1046 | 1094
2203 C1                  POP   BC          ; 9 1055 | 1103
2204 F1                  POP   AF          ; 9 1064 | 1112
2205 C9                  RET               ; 9 1073 | 1121
2206             ;****************
2206             ;div16_8
2206             ;16 by 8 bit unsigned division.
2206             ;  IN:  HL = dividend
2206             ;       A  = divisor
2206             ;  OUT: HL = quotient
2206             ;       A  = remainder
2206             ;  USES:F(lags)
2206             ;  Size 18 bytes
2206             ;  Time between 601 en 697 cycles
2206             ;****************
2206             div16_8:
2206 C5                  PUSH  BC          ;11 11 save registers used
2207 06 10               LD    B,16        ; 6 17 the length of the dividend (16 bits)
2209 4F                  LD    C,A         ; 4 21 move divisor to C
220A AF                  XOR   A,A         ; 4 25 clear upper 8 bits of AHL
220B             div16_82:
220B 29                  ADD   HL,HL       ;16*7=112 137 advance dividend (HL) into selected bits (A)
220C CB 17               RL    A           ;16*7=112 249
220E B9                  CP    A,C         ;16*4= 64 313 check if divisor (E) <= selected digits (A)
220F 38 02               JR    C,div16_83  ;16*8=128 441 16*6=96 409 if not, advance without subtraction
2211 91                  SUB   A,C         ;             16*4=64 473 subtract the divisor
2212 2C                  INC   L           ;             16*4=64 537 and set the next digit of the quotient
2213             div16_83:
2213 10 F6               DJNZ  div16_82    ;15*9+7=142 583 679
2215 C1                  POP   BC          ;9 592 688
2216 C9                  RET               ;9 601 697
2217             ;****************
2217             ;div8
2217             ;8 by 8 bit unsigned division.
2217             ;  IN:  A = dividend
2217             ;       C = divisor
2217             ;  OUT: A = quotient
2217             ;       C = remainder
2217             ;  USES:F(lags)
2217             ;  Size 26 bytes
2217             ;  Time between 411 and 459 cycles
2217             ;****************
2217             ;pseudo code:
2217             ;T = dividend
2217             ;D = divisor
2217             ;Q = quotient = 0
2217             ;R = remainder = 0
2217             ;invariante betrekking:
2217             ; T = QD + R
2217             ; T <= 2^8  
2217             ;
2217             ; D/T'.RT\Q'      
2217             ;   R'             
2217             ; RT <= 2^8        
2217             ; 0<=k<=8          
2217             ; RT = T % 2^k     
2217             ; T' = (T-RT) / 2^k
2217             ; Q' = T' / D      
2217             ; R' = T' % D      
2217             ;
2217             ;for (i=8; i>0; i--) {
2217             ;  T = T * 2 (remember MSB in carry)
2217             ;  R = R * 2 + carry
2217             ;  Q = Q * 2
2217             ;  if (R >= D) {
2217             ;    R = R - D;
2217             ;    Q++;
2217             ;  }
2217             ;}
2217             ;return Q (in A) and R (in C)
2217             ;****************
2217             ;E = T = dividend
2217             ;C = D = divisor
2217             ;D = Q = quotient
2217             ;A = R = remainder
2217             ;****************
2217             ;  IN:  A = dividend
2217             ;       C  = divisor
2217             div8:
2217 D5                  PUSH  DE          ;11 11 save registers used
2218 C5                  PUSH  BC          ;11 22 save registers used
2219 06 08               LD    B,8         ; 6 28 the length of the dividend (8 bits)
221B 16 00               LD    D,0         ; 6 34 D = Q = quotient = 0
221D 5F                  LD    E,A         ; 4 38 E = T = dividend
221E AF                  XOR   A,A         ; 4 42 A = R = remainder = 0
221F             div8_1:
221F CB 23               SLA   E           ;8*7=56  98            T[E] = T[E] * 2 (remember MSB in carry)
2221 CB 17               RL    A           ;8*7=56 154            R[A] = R[A] * 2 + carry
2223 CB 22               SLA   D           ;8*7=56 210            Q[D] = Q[D] * 2
2225 B9                  CP    A,C         ;8*4=32 242            if (R[A] - D[C] >= 0) {
2226 38 02               JR    C,div8_2    ;8*8=64 306 8*6=48 290
2228 91                  SUB   A,C         ;           8*4=32 322   R[A] = R[A] - D[C];
2229 14                  INC   D           ;           8*4=32 354   Q[D]++;
222A             div8_2:           ;                      }
222A 10 F3               DJNZ  div8_1      ;7*9+7=70 376 424      }
222C C1                  POP   BC          ;9        385 433
222D 4F                  LD    C,A         ;4        389 437      return Remainder[A] in C
222E 7A                  LD    A,D         ;4        393 441      return Quotient[D] in A
222F D1                  POP   DE          ;9        402 450
2230 C9                  RET               ;9        411 459
2231             ;****************
2231             ;div8_16
2231             ;8 by 16 bit unsigned division.
2231             ;  IN:  A = dividend
2231             ;       HL = divisor
2231             ;  OUT: A = quotient
2231             ;       C = remainder
2231             ;  USES:F(lags)
2231             ;  Size 13 bytes (plus dependency on div8)
2231             ;  Time 31 or between 436 and 484 cycles
2231             ;****************
2231             ;invariante betrekking:
2231             ; T = dividend
2231             ; D = divisor
2231             ; Q = quotient
2231             ; R = remainder
2231             ; T = QD + R
2231             ;pseudo code:
2231             ; if D >= 256 {
2231             ;   R = T
2231             ;   Q = 0
2231             ; } else {
2231             ;   R = T/D (using div8)
2231             ;   Q = T%D (using div8)
2231             ; }
2231             ;****************
2231             
2231             
2231             div8_16:
2231 4F                  LD    C,A         ;  4  4         save dividend(A) in C
2232 7C                  LD    A,H         ;  4  8         if D >= 256 {
2233 B7                  OR    A,A         ;  4 12
2234 28 02               JR    Z,div8_161  ;  6 18  8  20
2236 AF                  XOR   A,A         ;  4 22           R = T;
2237 C9                  RET               ;  9 31           Q = 0;
2238             div8_161:                     ;               } else {
2238 79                  LD    A,C         ;        4  24    restore dividend into A
2239 4D                  LD    C,L         ;        4  28    load divisor (HL) into C
223A CD 17 22            CALL  div8        ; 16+411/16+459               R = T/D; Q = T%D;
223D C9                  RET               ; 9  436/484    }
223E             ;****************
223E             ;read
223E             ;read a 16 bit unsigned number from the input
223E             ;  IN:  none
223E             ;  OUT: HL = 16 bit unsigned number
223E             ;  USES:-
223E             ;****************
223E             read:
223E F5                  PUSH  AF
223F 21 00 00            LD    HL,0        ;result = 0;
2242             read1:
2242 CD E8 20            CALL  getChar     ;check if a character is available.
2245 28 FB               JR    Z,read1     ;-no: wait for it.
2247 FE 0D               CP    A,'\r'      ;return if char == Carriage Return
2249 28 0C               JR    Z,read2
224B CD 83 21            CALL  mul16_10    ;result *= 10;
224E D6 30               SUB   A,'0'       ;digit = char - '0';
2250 85                  ADD   A,L         ;result += digit;
2251 6F                  LD    L,A
2252 30 EE               JR    NC,read1     ;get next character
2254 24                  INC   H
2255 18 EB               JR    read1        ;get next character
2257             read2:
2257 F1                  POP   AF
2258 C9                  RET
2259             ;****************
2259             ;writeLineHL
2259             ;write a 16 bit unsigned number to the output, followed by a carriage return
2259             ;  IN:  HL = 16 bit unsigned number
2259             ;  OUT: none
2259             ;  USES:HL
2259             ;****************
2259             writeLineHL:
2259 CD 60 22            CALL  writeHL
225C CD 29 21            CALL  putCRLF
225F C9                  RET
2260             ;****************
2260             ;writeHL
2260             ;write a 16 bit unsigned number to the output
2260             ;  IN:  HL = 16 bit unsigned number
2260             ;  OUT: none
2260             ;  USES:HL
2260             ;****************
2260             writeHL:
2260 C5                  PUSH  BC          ;save registers used
2261 F5                  PUSH  AF
2262 06 00               LD    B,0         ;number of digits on stack
2264 7C                  LD    A,H         ;is HL=0?
2265 B5                  OR    A,L
2266 20 03               JR    NZ,writeHL1
2268 04                  INC   B           ;write a single digit 0
2269 18 0C               JR    writeHL3
226B             writeHL1:
226B 3E 0A               LD    A,10        ;divide HL by 10
226D CD 06 22            CALL  div16_8
2270 F5                  PUSH  AF          ;put remainder on stack
2271 04                  INC   B
2272 7C                  LD    A,H         ;is quotient 0?
2273 B5                  OR    A,L
2274 20 F5               JR    NZ,writeHL1
2276             writeHL2:
2276 F1                  POP   AF          ;write digit
2277             writeHL3:
2277 C6 30               ADD   A,'0'
2279 CD 1C 21            CALL  putChar
227C 10 F8               DJNZ  writeHL2
227E F1                  POP   AF          ;restore registers used
227F C1                  POP   BC
2280 C9                  RET
2281             ;****************
2281             ;writeLineA
2281             ;write an 8-bit unsigned number to the output, followed by a carriage return
2281             ;  IN:  A = 8-bit unsigned number
2281             ;  OUT: none
2281             ;  USES:none
2281             ;****************
2281             writeLineA:
2281 CD 88 22            CALL  writeA
2284 CD 29 21            CALL  putCRLF
2287 C9                  RET
2288             ;****************
2288             ;writeA
2288             ;write an 8-bit unsigned number to the output
2288             ;  IN:  A = 8-bit unsigned number
2288             ;  OUT: none
2288             ;  USES:none
2288             ;****************
2288             writeA:
2288 E5                  PUSH  HL          ;save registers used
2289 26 00               LD    H,0
228B 6F                  LD    L,A
228C CD 60 22            CALL  writeHL
228F E1                  POP   HL
2290 C9                  RET

Labels and cross references:
      L0 = 2003 :
      L1 = 2006 :
     L10 = 2009 :
    L100 = 202A :
    L101 = 202A :
    L102 = 202A :
    L103 = 202A :
    L104 = 202A :
    L105 = 202A :
    L106 = 202A :
    L107 = 202A :
    L108 = 202A :
    L109 = 202F :
     L11 = 2009 :
    L110 = 202F :
    L111 = 202F :
    L112 = 202F :
    L113 = 202F :
    L114 = 2034 :
    L115 = 2034 :
    L116 = 2034 :
    L117 = 2034 :
    L118 = 2036 :
    L119 = 2038 :
     L12 = 2009 :
    L120 = 2039 :
    L121 = 2039 :
    L122 = 2039 : 20D6
    L123 = 2039 :
    L124 = 203B :
    L125 = 2041 :
    L126 = 2046 :
    L127 = 2046 :
    L128 = 2046 :
    L129 = 204B :
     L13 = 2009 :
    L130 = 204B :
    L131 = 204B :
    L132 = 204B :
    L133 = 204B :
    L134 = 204B :
    L135 = 204E :
    L136 = 2050 :
    L137 = 2053 :
    L138 = 2053 :
    L139 = 2053 :
     L14 = 2009 :
    L140 = 2053 :
    L141 = 2053 :
    L142 = 2053 :
    L143 = 2053 :
    L144 = 2058 :
    L145 = 2058 :
    L146 = 2058 :
    L147 = 2058 :
    L148 = 205A :
    L149 = 205C :
     L15 = 2009 :
    L150 = 205D :
    L151 = 205D :
    L152 = 205D :
    L153 = 205D :
    L154 = 205D :
    L155 = 205D :
    L156 = 205D :
    L157 = 205D :
    L158 = 205D :
    L159 = 205D :
     L16 = 2009 :
    L160 = 205D :
    L161 = 205D :
    L162 = 205D : 20A7
    L163 = 205D :
    L164 = 205F :
    L165 = 2065 :
    L166 = 206A :
    L167 = 206A :
    L168 = 206C :
    L169 = 206F : 207D
     L17 = 2009 :
    L170 = 2072 :
    L171 = 2074 :
    L172 = 2077 :
    L173 = 207A : 2080
    L174 = 207D :
    L175 = 2080 : 2077
    L176 = 2083 :
    L177 = 2083 : 2074
    L178 = 2085 :
    L179 = 2087 :
     L18 = 2009 :
    L180 = 2088 :
    L181 = 2088 :
    L182 = 2088 :
    L183 = 2088 :
    L184 = 2088 :
    L185 = 2088 : 20DD
    L186 = 2088 :
    L187 = 208A :
    L188 = 2090 :
    L189 = 2095 :
     L19 = 2009 :
    L190 = 2095 : 20B7
    L191 = 209B :
    L192 = 209D :
    L193 = 20A4 :
    L194 = 20A7 :
    L195 = 20A7 :
    L196 = 20AA :
    L197 = 20AA :
    L198 = 20B7 :
    L199 = 20B7 :
      L2 = 2009 :
     L20 = 2009 :
    L200 = 20BA :
    L201 = 20BA : 20A4
    L202 = 20BC :
    L203 = 20BE :
    L204 = 20BF :
    L205 = 20BF :
    L206 = 20BF :
    L207 = 20BF : 2003
    L208 = 20BF :
    L209 = 20C1 :
     L21 = 2009 :
    L210 = 20C7 :
    L211 = 20CC :
    L212 = 20CC :
    L213 = 20CF :
    L214 = 20CF : 20E0
    L215 = 20D1 :
    L216 = 20D3 :
    L217 = 20D6 :
    L218 = 20D6 :
    L219 = 20D9 :
     L22 = 2009 :
    L220 = 20D9 :
    L221 = 20D9 :
    L222 = 20DC :
    L223 = 20DD :
    L224 = 20E0 :
    L225 = 20E0 :
    L226 = 20E3 :
    L227 = 20E3 : 20D3
    L228 = 20E5 :
    L229 = 20E7 :
     L23 = 2009 :
    L230 = 20E8 :
     L24 = 2009 :
     L25 = 2009 :
     L26 = 2009 :
     L27 = 2009 :
     L28 = 2009 :
     L29 = 2009 :
      L3 = 2009 :
     L30 = 2009 :
     L31 = 2009 :
     L32 = 2009 :
     L33 = 2009 :
     L34 = 2009 :
     L35 = 2009 :
     L36 = 2009 :
     L37 = 2009 :
     L38 = 2009 :
     L39 = 2009 :
      L4 = 2009 :
     L40 = 2009 :
     L41 = 2009 :
     L42 = 2009 :
     L43 = 2009 :
     L44 = 2009 :
     L45 = 2009 :
     L46 = 2009 :
     L47 = 2009 :
     L48 = 2009 :
     L49 = 2009 :
      L5 = 2009 :
     L50 = 2009 :
     L51 = 2009 :
     L52 = 2009 :
     L53 = 2009 : 20CC
     L54 = 2009 :
     L55 = 200B :
     L56 = 2011 :
     L57 = 2016 :
     L58 = 2016 :
     L59 = 2016 :
      L6 = 2009 :
     L60 = 201B :
     L61 = 201B :
     L62 = 201B :
     L63 = 201B :
     L64 = 201B :
     L65 = 201B :
     L66 = 201B :
     L67 = 201B :
     L68 = 201B :
     L69 = 201B :
      L7 = 2009 :
     L70 = 201B :
     L71 = 201B :
     L72 = 201B :
     L73 = 2020 :
     L74 = 2020 :
     L75 = 2020 :
     L76 = 2020 :
     L77 = 2020 :
     L78 = 2020 :
     L79 = 2020 :
      L8 = 2009 :
     L80 = 2020 :
     L81 = 2020 :
     L82 = 2020 :
     L83 = 2020 :
     L84 = 2020 :
     L85 = 2020 :
     L86 = 2025 :
     L87 = 2025 :
     L88 = 2025 :
     L89 = 2025 :
      L9 = 2009 :
     L90 = 2025 :
     L91 = 2025 :
     L92 = 2025 :
     L93 = 2025 :
     L94 = 2025 :
     L95 = 2025 :
     L96 = 2025 :
     L97 = 2025 :
     L98 = 2025 :
     L99 = 202A :
   div16 = 21E6 :
 div16_1 = 21EF : 21FE
 div16_2 = 21FD : 21F8
 div16_3 = 21FE : 21FB
 div16_8 = 2206 : 226D
div16_82 = 220B : 2213
div16_83 = 2213 : 220F
    div8 = 2217 : 223A
  div8_1 = 221F : 222A
 div8_16 = 2231 :
div8_161 = 2238 : 2234
  div8_2 = 222A : 2226
 getChar = 20E8 : 2242
getChar1 = 20F6 : 20ED
   mul16 = 216A :
 mul1632 = 2199 :
mul16321 = 21BB : 21B8
mul16322 = 21C2 : 21BF
  mul16S = 21CC :
 mul16S1 = 21D5 : 21E1
 mul16S2 = 21E0 : 21DA 21DD
mul16_10 = 2183 : 224B
 mul16_8 = 218C :
 putBell = 2142 :
 putCRLF = 2129 : 2109 225C 2284
 putChar = 211C : 2113 212C 2131 2138 2140 2144 2165 2279
putChar1 = 211D : 2122
putErase = 2136 :
 putHexA = 2151 : 2148 214C
putHexA1 = 215A : 2156
putHexA2 = 2165 : 2161
putHexHL = 2146 :
  putMsg = 2100 :
putSpace = 211A : 213B
 putStr1 = 210E : 2116
 putStr2 = 2118 : 2111
    read = 223E :
   read1 = 2242 : 2245 2252 2255
   read2 = 2257 : 2249
   start = 2000 :
  writeA = 2288 : 2281
 writeHL = 2260 : 2259 228C
writeHL1 = 226B : 2266 2274
writeHL2 = 2276 : 227C
writeHL3 = 2277 : 2269
writeLineA = 2281 :
writeLineHL = 2259 :
writeLineStr = 2106 :
writeStr = 210D : 2101 2106
