/*
Copyright Â© 2023 Han Welmer.

This file is part of Z80Compiler.

Z80Compiler is free software: you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free Software 
Foundation, either version 3 of the License, or (at your option) any later 
version.

Z80Compiler is distributed in the hope that it will be useful, but WITHOUT 
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
Z80Compiler. If not, see <https://www.gnu.org/licenses/>.
*/

package com.github.hanwelmer;

/**
 * This class defines the type and value for an operand in an instruction to be
 * executed by the M machine as generated by the P language. Used in the code
 * generation phase of the compiler.
 */
public class Operand {
  public OperandType opType;
  public DataType dataType;
  public Integer intValue;
  public String strValue;
  public boolean isFinal = false;
  // opType... | dataType... | strValue.. | intValue |
  // ----------+-------------+------------+---------+
  // UNKNOWN.. | X.......... | X......... | X....... |
  // CONSTANT. | byt,integer | X......... | value... |
  // CONSTANT. | string..... | string.... | X....... |
  // STACK.... | byt,integer | X......... | X....... |
  // GLOBAL_VAR| byt,integer | X......... | address. |
  // LOCAL_VAR | byt,integer | X......... | index... |
  // final var | byt,integer | identifier | value... |
  // LABEL.... | integer.... | name...... | address. |
  // ACC...... | byt,integer | X......... | X....... |

  public Operand(OperandType opType) {
    this.opType = opType;
  }

  public Operand(OperandType opType, DataType dataType) {
    this.opType = opType;
    this.dataType = dataType;
  }

  public Operand(String labelName, Integer address) {
    this.opType = OperandType.LABEL;
    this.dataType = DataType.word;
    this.strValue = labelName;
    this.intValue = address;
  }

  public Operand(OperandType opType, DataType dataType, String value) {
    this.opType = opType;
    this.dataType = dataType;
    this.strValue = value;
  }

  public Operand(OperandType opType, DataType dataType, Integer value) {
    this.opType = opType;
    this.dataType = dataType;
    this.intValue = value;
  }

  public Operand(IdentifierType identifierType, DataType dataType, int address) {
    if (identifierType == IdentifierType.CLASS_VARIABLE) {
      this.opType = OperandType.GLOBAL_VAR;
    } else if (identifierType == IdentifierType.LOCAL_VARIABLE) {
      this.opType = OperandType.LOCAL_VAR;
    } else if (identifierType == IdentifierType.FORMAL_PARAMETER) {
      this.opType = OperandType.LOCAL_VAR;
    } else {
      throw new RuntimeException("Internal compiler error: no OperandType for IdentifierType " + identifierType);
    }
    this.dataType = dataType;
    this.intValue = address;
  }

  public String toString() {
    String result = "operand(" + opType;
    if (dataType != null) {
      result += ", type=" + dataType;
    }
    if (strValue != null) {
      if (dataType == DataType.string) {
        result += ", strValue=\"" + strValue + "\"";
      } else {
        result += ", strValue=" + strValue;
      }
    }
    if (intValue != null) {
      result += ", intValue=" + intValue;
    }
    result += ", final=" + isFinal;
    result += ")";
    return result;
  }
}
