2000             TOS     equ 0FD00H        ;User stack grows before user global data.
2000             CNTLA0  equ 000H          ;144 ASCI0 Control Register A.
2000             STAT0   equ 004H          ;147 ASCI0 Status register.
2000             TDR0    equ 006H          ;148 ASCI0 Transmit Data Register.
2000             RDR0    equ 008H          ;149 ASCI0 Receive Data Register.
2000             ERROR   equ 3             ;CNTLA0->OVRN,FE,PE,BRK error flags.
2000             TDRE    equ 1             ;STAT0->Tx data register empty bit.
2000             OVERRUN equ 6             ;STAT0->OVERRUN bit.
2000             RDRF    equ 7             ;STAT0->Rx data register full bit.
2000                     .ORG  02000H      ;lowest external RAM address.
2000             start:
2000 31 00 FD            LD    SP,TOS
2003 C3 78 21            JP    main
2006             ;****************
2006             ;WAIT - Wait DE * 1 msec @ 18,432 MHz with no wait states
2006             ;  IN:  DE number of msec to wait
2006             ;  OUT: none
2006             ;  USES: 4 bytes on stack
2006             ;****************
2006             WAIT:
2006 D5                  PUSH  DE
2007 F5                  PUSH  AF
2008             WAIT1:
2008 CD 13 20            CALL  WAIT1M      ;Wait 1 msec
200B 1B                  DEC   DE
200C 7A                  LD    A,D
200D B3                  OR    A,E
200E 20 F8               JR    NZ,WAIT1
2010 F1                  POP   AF
2011 D1                  POP   DE
2012 C9                  RET
2013             ;****************
2013             ;WAIT1M
2013             ;wait 1 msec at 18,432 MHz with no wait states
2013             ;The routine requires 56+n*22 states, so that with n=834
2013             ;28  clock cycles remain left.
2013             ;****************
2013             WAIT1M:
2013 E5                  PUSH  HL          ;5      11 (11)
2014                                       ;       3 opcode
2014                                       ;       3 mem write
2014                                       ;       1 inc SP
2014                                       ;       3 mem write
2014                                       ;       1 inc SP
2014 F5                  PUSH  AF          ;5      11 (22)
2015                                       ;       3 opcode
2015                                       ;       3 mem write
2015                                       ;       1 inc SP
2015                                       ;       3 mem write
2015                                       ;       1 inc SP
2015 21 42 03            LD    HL, 834     ;3      9 (31)
2018                                       ;       3 opcode
2018                                       ;       3 mem read
2018                                       ;       3 mem read
2018             WAIT1M2:
2018 2B                  DEC   HL          ;2      4 (31+n*4)
2019                                       ;       3 opcode
2019                                       ;       1 execute
2019 7C                  LD    A,H         ;2      6 (31+n*10)
201A                                       ;       3 opcode
201A                                       ;       3 execute
201A B5                  OR    A,L         ;2      4 (31+n*14)
201B                                       ;       3 opcode
201B                                       ;       1 execute
201B 20 FB               JR    NZ,WAIT1M2  ;4      8 (31+n*22) if NZ
201D                                       ;       3 opcode
201D                                       ;       3 mem read
201D                                       ;       1 execute
201D                                       ;       1 execute
201D                                       ;2      6 (29+n*22) if not NZ
201D                                       ;       3 opcode
201D                                       ;       3 mem read
201D F1                  POP   AF          ;3      9 (38+n*22)
201E                                       ;       3 opcode
201E                                       ;       3 mem read
201E                                       ;       3 mem read
201E E1                  POP   HL          ;3      9 (47+n*22)
201F                                       ;       3 opcode
201F                                       ;       3 mem read
201F                                       ;       3 mem read
201F C9                  RET               ;3      9 (56+n*22)
2020                                       ;       3 opcode
2020                                       ;       3 mem read
2020                                       ;       3 mem read
2020             ;****************
2020             ;getChar
2020             ;Check if an input character from ASCI0 is available.
2020             ;  IN:  none
2020             ;  OUT: F: ZERO flag set if no character is available.
2020             ;          ZERO flag reset if a character is available.
2020             ;       A : character from ASCI0, if available.
2020             ;  USES:AF
2020             ;****************
2020             getChar:
2020 ED 38 04            IN0   A,(STAT0)   ;read ASCI0 status
2023 CB 77               BIT   OVERRUN,A   ;check if ASCIO OVERRUN bit is set
2025 20 07               JR    NZ,getChar1 ;-yes: reset error flags
2027 CB 7F               BIT   RDRF,A      ;check if ASCIO RDRF bit is set
2029 C8                  RET   Z           ;-no: return without a character
202A ED 38 08            IN0   A,(RDR0)    ;-yes:read ASCIO Rx data register
202D C9                  RET
202E             getChar1:
202E ED 38 00            IN0   A,(CNTLA0)  ;read ASCI0 control register
2031 CB 9F               RES   ERROR,A     ;reset OVRN,FE,PE,BRK flags
2033 ED 39 00            OUT0  (CNTLA0),A  ;write back to ASCI0 CTRL
2036 AF                  XOR   A
2037 C9                  RET               ;return without a character
2038             ;****************
2038             ;putMsg
2038             ;Print via ASCI0 a zero terminated string, starting at the return address on the stack.
2038             ;  IN:  none.
2038             ;  OUT: none.
2038             ;  USES:none.
2038             ;****************
2038             putMsg:
2038 E3                  EX    (SP),HL     ;save HL and load return address into HL.
2039 CD 3E 20            CALL  putStr
203C E3                  EX    (SP),HL     ;put return address onto stack and restore HL.
203D C9                  RET
203E             ;****************
203E             ;putStr
203E             ;Print via ASCI0 a zero terminated string, pointed to by HL.
203E             ;  IN:  HL:address of zero terminated string to be printed.
203E             ;  OUT: none.
203E             ;  USES:HL (point to byte after zero terminated string)
203E             ;****************
203E             putStr:
203E F5                  PUSH  AF          ;save registers
203F             putStr1:
203F 7E                  LD    A,(HL)      ;get next character
2040 23                  INC   HL
2041 B7                  OR    A,A         ;is it zer0?
2042 28 05               JR    Z,putStr2   ;yes ->return
2044 CD 4D 20            CALL  putChar     ;no->put it to ASCI0
2047 18 F6               JR    putStr1
2049             putStr2:
2049 F1                  POP   AF
204A C9                  RET
204B             ;****************
204B             ;putSpace
204B             ;Send a space character to ASCI0
204B             ;  IN:  none.
204B             ;  OUT: none.
204B             ;  USES:AF
204B             ;****************
204B             putSpace:
204B 3E 20               LD    A,' '       ;load space and continue with putChar.
204D             ;****************
204D             ;putChar
204D             ;Send one character to ASCI0.
204D             ;  IN:  A = character
204D             ;  OUT: none.
204D             ;  USES:AF
204D             ;****************
204D             putChar:
204D F5                  PUSH  AF          ;send the character via ASCI0
204E             putChar1:
204E ED 38 04            IN0   A,(STAT0)   ;read ASCI0 status register
2051 CB 4F               BIT   TDRE,A      ;wait until TDRE <> 0
2053 28 F9               JR    Z,putChar1
2055 F1                  POP   AF          ;restore AF registers
2056 ED 39 06            OUT0  (TDR0),A    ;write character to ASCI0
2059 C9                  RET
205A             ;****************
205A             ;putCRLF
205A             ;Send CR and LF to ASCI0
205A             ;  IN:  none.
205A             ;  OUT: none.
205A             ;  USES:none.
205A             ;****************
205A             putCRLF:
205A F5                  PUSH  AF
205B 3E 0D               LD    A,'\r'       ;print carriage return
205D CD 4D 20            CALL  putChar
2060 3E 0A               LD    A,'\n'       ;print line feed
2062 CD 4D 20            CALL  putChar
2065 F1                  POP   AF
2066 C9                  RET
2067             ;****************
2067             ;putErase
2067             ;Erase the latest character at ASCI0
2067             ;  IN:  none.
2067             ;  OUT: none.
2067             ;  USES:AF
2067             ;****************
2067             putErase:
2067 3E 08               LD    A,'\b'       ;print backspace
2069 CD 4D 20            CALL  putChar
206C CD 4B 20            CALL  putSpace    ;print space (erase character)
206F 3E 08               LD    A,'\b'      ;print backspace
2071 18 DA               JR    putChar
2073             ;****************
2073             ;putBell
2073             ;Send a Bell character to ASCI0
2073             ;  IN:  none.
2073             ;  OUT: none.
2073             ;  USES:AF
2073             ;****************
2073             putBell:
2073 3E 07               LD    A,07        ;ring the bell at ASCI0
2075 18 D6               JR    putChar
2077             ;****************
2077             ;putHexHL
2077             ;Print HL register pair as 4 hex digits
2077             ;  IN:  HL = word to be printed.
2077             ;  OUT: none.
2077             ;  USES:none.
2077             ;****************
2077             putHexHL:
2077 F5                  PUSH  AF          ;save used registers
2078 7C                  LD    A,H         ;print H as 2 hex digits
2079 CD 82 20            CALL  putHexA
207C 7D                  LD    A,L         ;print L as 2 hex digits
207D CD 82 20            CALL  putHexA
2080 F1                  POP   AF          ;restore used registers
2081 C9                  RET
2082             ;****************
2082             ;putHexA
2082             ;Print A register as 2 hex digits
2082             ;  IN:  A = byte to be printed
2082             ;  OUT: none.
2082             ;  USES:none.
2082             ;****************
2082             putHexA:
2082 F5                  PUSH  AF          ;save input
2083 1F                  RRA               ;shift upper nibble to the right
2084 1F                  RRA
2085 1F                  RRA
2086 1F                  RRA
2087 CD 8B 20            CALL  putHexA1    ;print upper nibble
208A F1                  POP   AF          ;restore input & print lower nibble
208B             putHexA1:
208B F5                  PUSH  AF          ;save input
208C E6 0F               AND   A,00FH      ;mask lower nibble
208E C6 30               ADD   A,'0'       ;convert to hex digit
2090 FE 3A               CP    A,'9'+1
2092 38 02               JR    C,putHexA2
2094 C6 07               ADD   A,07
2096             putHexA2:
2096 CD 4D 20            CALL  putChar
2099 F1                  POP   AF          ;restore input
209A C9                  RET               ;and return
209B             ;****************
209B             ;mul16
209B             ;16 by 16 bit unsigned multiplication with 16 bit result.
209B             ;  IN:  HL = operand 1
209B             ;       DE = operand 2
209B             ;  OUT: HL = HL * DE low part
209B             ;  USES:DE
209B             ;  Size   25 bytes
209B             ;  Time  160 cycles
209B             ;****************
209B             mul16:
209B                     ;HL = HL * DE
209B                     ;        H  L
209B                     ;        D  E
209B                     ;    --------*
209B                     ;          EL
209B                     ;       EH  0
209B                     ;       DL  0
209B                     ; -----------+
209B                     ;        R  S
209B                     ;S = ELlow
209B                     ;R = ELhigh+EHlow+DLlow
209B C5                  PUSH  BC          ;11  11 save BC
209C 44                  LD    B,H         ; 4  15 copy HL to BC
209D 4D                  LD    C,L         ; 4  19
209E 63                  LD    H,E         ; 4  23 HL contains EL
209F ED 6C               MLT   HL          ;17  40
20A1 E5                  PUSH  HL          ;11  51
20A2 63                  LD    H,E         ; 4  55 HL contains EH aka EB
20A3 68                  LD    L,B         ; 4  59
20A4 ED 6C               MLT   HL          ;17  76
20A6 45                  LD    B,L         ; 4  80 save EHlow in B
20A7 62                  LD    H,D         ; 4  84 HL contains DL aka DC
20A8 69                  LD    L,C         ; 4  88
20A9 ED 6C               MLT   HL          ;17 105
20AB 55                  LD    D,L         ; 4 109 DLlow into DE
20AC 1E 00               LD    E,0         ; 6 115
20AE E1                  POP   HL          ; 9 124 add EL+DElow
20AF 19                  ADD   HL,DE       ; 7 131
20B0 50                  LD    D,B         ; 4 135 add EL+DElow+EHlow
20B1 19                  ADD   HL,DE       ; 7 142
20B2 C1                  POP   BC          ; 9 151 restore BC
20B3 C9                  RET               ; 9 160
20B4             ;****************
20B4             ;mul1632
20B4             ;16 by 16 bit unsigned multiplication with 32 bit result.
20B4             ;  IN:  HL = operand 1
20B4             ;       DE = operand 2
20B4             ;  OUT: HL = HL * DE low part
20B4             ;       DE = HL * DE high part
20B4             ;  USES:-
20B4             ;  Size 49 bytes
20B4             ;  Time between 303 en 307 cycles
20B4             ;****************
20B4             mul1632:
20B4                     ;HL = HL * DE
20B4                     ;        H  L
20B4                     ;        D  E
20B4                     ;    --------*
20B4                     ;          EL
20B4                     ;       EH  0
20B4                     ;       DL  0
20B4                     ;    DH  0  0
20B4                     ; -----------+
20B4                     ;  P  Q  R  S
20B4                     ;S = ELlow
20B4                     ;R = ELhigh+EHlow+DLlow
20B4                     ;Q = DHlow+EHhigh+DLhigh
20B4                     ;P = DHhigh
20B4 F5                  PUSH  AF          ;11  11 save AF
20B5 C5                  PUSH  BC          ;11  22 save BC
20B6 44                  LD    B,H         ; 4  26
20B7 4D                  LD    C,L         ; 4  30
20B8 62                  LD    H,D         ; 4  34 HL contains DH aka DB
20B9 68                  LD    L,B         ; 4  38
20BA ED 6C               MLT   HL          ;17  55
20BC E5                  PUSH  HL          ;11  66
20BD 62                  LD    H,D         ; 4  70 HL contains DL aka DC
20BE 69                  LD    L,C         ; 4  74
20BF ED 6C               MLT   HL          ;17  91
20C1 E5                  PUSH  HL          ;11 102
20C2 63                  LD    H,E         ; 4 106 HL contains EH aka EB
20C3 68                  LD    L,B         ; 4 110
20C4 ED 6C               MLT   HL          ;17 127
20C6 E5                  PUSH  HL          ;11 138
20C7 63                  LD    H,E         ; 4 142 HL contains EL aka EC
20C8 69                  LD    L,C         ; 4 146
20C9 ED 6C               MLT   HL          ;17 163
20CB D1                  POP   DE          ; 9 172 calculate RS=EL+EH0
20CC 06 00               LD    B,0         ; 6 178
20CE 4A                  LD    C,D         ; 4 182 ..C=EHhigh
20CF 53                  LD    D,E         ; 4 186 ..D=EHlow
20D0 1E 00               LD    E,0         ; 6 192
20D2 19                  ADD   HL,DE       ; 7 199
20D3 30 01               JR    NC,mul16321 ; 8 207 | 6 205 add carry to PQ
20D5 03                  INC   BC          ;         4 209
20D6             mul16321:
20D6 D1                  POP   DE          ; 9 209 | 211 calculate RS=EL+EH0+DL0
20D7 7A                  LD    A,D         ; 4 220 | 222 ..A=DLhigh
20D8 53                  LD    D,E         ; 4 224 | 226 ..D=DLlow
20D9 19                  ADD   HL,DE       ; 7 231 | 233
20DA 30 01               JR    NC,mul16322 ; 8 239 | 6 239 add carry to PQ
20DC 03                  INC   BC          ;         4 243
20DD             mul16322:
20DD                                       ;HL=RS=EL+EH0+DL0
20DD                                       ;C=EHhigh
20DD                                       ;A=DLhigh
20DD                                       ;E=0
20DD EB                  EX    DE,HL       ; 3 242 | 246
20DE 65                  LD    H,L         ; 4 246 | 250 ..E was 0, so H=L=0
20DF 6F                  LD    L,A         ; 4 250 | 254 ..HL=DLhigh
20E0 09                  ADD   HL,BC       ; 7 257 | 261 PQ=EHhigh+DLhigh+DH
20E1 C1                  POP   BC          ; 9 266 | 270
20E2 09                  ADD   HL,BC       ; 7 273 | 277
20E3 EB                  EX    DE,HL       ; 3 276 | 280
20E4                                       ;D=P=DHhigh
20E4                                       ;E=Q=DHlow+EHhigh+DLhigh
20E4                                       ;H=R=ELhigh+EHlow+DLlow
20E4                                       ;L=S=ELlow
20E4 C1                  POP   BC          ; 9 285 | 289 restore BC
20E5 F1                  POP   AF          ; 9 294 | 298 restore AF
20E6 C9                  RET               ; 9 303 | 307
20E7             ;****************
20E7             ;mul16S
20E7             ;16 by 16 bit slow unsigned multiplication with 32 bit result.
20E7             ;  IN:  HL = operand 1
20E7             ;       DE = operand 2
20E7             ;  OUT: DE = HL * DE high part
20E7             ;       HL = HL * DE low part
20E7             ;  USES:none.
20E7             ;  Size 26 bytes
20E7             ;  Time between 726 en 998 cycles
20E7             ;****************
20E7             mul16S:
20E7 F5                  PUSH  AF          ;11  11 save AF
20E8 C5                  PUSH  BC          ;11  22 save BC
20E9 44                  LD    B,H         ; 4  26
20EA 4D                  LD    C,L         ; 4  30
20EB 21 00 00            LD    HL,0        ; 9  39
20EE 3E 10               LD    A,16        ; 6  45
20F0             mul16S1:
20F0 29                  ADD   HL,HL       ;16*7=112 157
20F1 CB 13               RL    E           ;16*7=112 269
20F3 CB 12               RL    D           ;16*7=112 381
20F5 30 04               JR    NC,mul16S2  ;16*8=128 509 16*6= 96 477
20F7 09                  ADD   HL,BC       ;             16*7=112 589
20F8 30 01               JR    NC,mul16S2  ;             16*8=128 717 16*6=96 685
20FA 13                  INC   DE          ;             16*4= 64 781 16*4=64 749 This instruction (with the jump) is like an "ADC DE,0"
20FB             mul16S2:
20FB 3D                  DEC   A           ;16*4=64    573 | 845 | 813
20FC 20 F2               JR    NZ,mul16S1  ;15*8+6=126 699 | 971 | 939
20FE C1                  POP   BC          ; 9         708 | 980 | 948 restore BC
20FF F1                  POP   AF          ; 9         717 | 989 | 957 restore AF
2100 C9                  RET               ; 9         726 | 998 | 966
2101             ;****************
2101             ;div16
2101             ;16 by 16 bit unsigned division.
2101             ;  IN:  HL = dividend
2101             ;       DE = divisor
2101             ;  OUT: HL = quotient
2101             ;       DE = remainder
2101             ;  USES:-
2101             ;  Size   32 bytes
2101             ;  Time   between 1073 en 1121 cycles
2101             ;pseudo code:
2101             ;T = dividend
2101             ;D = divisor
2101             ;Q = quotient = 0
2101             ;R = remainder = 0
2101             ;invariante betrekking:
2101             ; D/T\Q     
2101             ;   R       
2101             ; T = QD + R
2101             ; T <= 2^N  
2101             ;
2101             ; D/T'.RT\Q'        
2101             ;   R'              
2101             ; RT <= 2^N         
2101             ; 0<=k<=N           
2101             ; RT = T % 10^k     
2101             ; T' = (T-RT) / 10^k
2101             ; Q' = T' / D       
2101             ; R' = T' % D       
2101             ;
2101             ;for (i=16; i>0; i--) {
2101             ;  T = T * 2 (remember MSB in carry)
2101             ;  R = R * 2 + carry
2101             ;  Q = Q * 2
2101             ;  if (R >= D) {
2101             ;    R = R - D;
2101             ;    Q++;
2101             ;  }
2101             ;}
2101             ;return Q (in HL) and R (in DE)
2101             ;****************
2101             div16:
2101 F5                  PUSH  AF          ;11  11 save registers used
2102 C5                  PUSH  BC          ;11  22
2103 4D                  LD    C,L         ; 4  26 T(AC) = teller from input (HL)
2104 7C                  LD    A,H         ; 4  30 D(DE) = deler from input  (DE)
2105 21 00 00            LD    HL,0        ; 9  39 R(HL) = restant; Q(AC) = quotient
2108 06 10               LD    B,16        ; 6  45 for (i=16; i>0; i--)
210A             div16_1:
210A CB 21               SLA   C           ;16* 7=112 157   T = T * 2 (remember MSB in carry)
210C CB 17               RL    A           ;16* 7=112 269   Q = Q * 2
210E ED 6A               ADC   HL,HL       ;16*10=160 429   R = R * 2 + carry
2110 B7                  OR    A           ;16* 4= 64 493   if (R >= D) {
2111 ED 52               SBC   HL,DE       ;16*10=160 653
2113 38 03               JR    C,div16_2   ;16* 8=128 781 16*6= 96 749   R = R - D
2115 0C                  INC   C           ;              16*4= 64 813   Q++
2116 18 01               JR    div16_3     ;              16*8=128 941
2118             div16_2:
2118 19                  ADD   HL,DE       ;16* 7=112 893  (compensate comparison)
2119             div16_3:
2119 10 EF               DJNZ  div16_1     ;15*9+7=142 1035 | 1083 }
211B EB                  EX    DE,HL       ; 3 1038 | 1086 swap remainder (HL) into DE
211C 67                  LD    H,A         ; 4 1042 | 1090 move quotient (AC) into HL
211D 69                  LD    L,C         ; 4 1046 | 1094
211E C1                  POP   BC          ; 9 1055 | 1103
211F F1                  POP   AF          ; 9 1064 | 1112
2120 C9                  RET               ; 9 1073 | 1121
2121             ;****************
2121             ;div16_8
2121             ;16 by 8 bit unsigned division.
2121             ;  IN:  HL = dividend
2121             ;       A  = divisor
2121             ;  OUT: HL = quotient
2121             ;       A  = remainder
2121             ;  USES:F(lags)
2121             ;  Size 18 bytes
2121             ;  Time between 601 en 697 cycles
2121             ;****************
2121             div16_8:
2121 C5                  PUSH  BC          ;11  11 save registers used
2122 06 10               LD    B,16        ; 6 17 the length of the dividend (16 bits)
2124 4F                  LD    C,A         ; 4 21 move divisor to C
2125 AF                  XOR   A           ; 4 25 clear upper 8 bits of AHL
2126             div16_82:
2126 29                  ADD   HL,HL       ;16*7=112 137 advance dividend (HL) into selected bits (A)
2127 CB 17               RL    A           ;16*7=112 249
2129 B9                  CP    C           ;16*4= 64 313 check if divisor (E) <= selected digits (A)
212A 38 02               JR    C,div16_83  ;16*8=128 441 16*6=96 409 if not, advance without subtraction
212C 91                  SUB   C           ;             16*4=64 473 subtract the divisor
212D 2C                  INC   L           ;             16*4=64 537 and set the next digit of the quotient
212E             div16_83:
212E 10 F6               DJNZ  div16_82    ;15*9+7=142 583 679
2130 C1                  POP   BC          ;9 592 688
2131 C9                  RET               ;9 601 697
2132             ;****************
2132             ;read
2132             ;read a 16 bit unsigned number from the input
2132             ;  IN:  none
2132             ;  OUT: HL = 16 bit unsigned number
2132             ;  USES:-
2132             ;****************
2132             read:
2132 F5                  PUSH  AF
2133 D5                  PUSH  DE
2134 21 00 00            LD    HL,0        ;result = 0;
2137             read1:
2137 CD 20 20            CALL  getChar     ;check if a character is available.
213A 28 FB               JR    Z,read1     ;-no: wait for it.
213C FE 0D               CP    '\r'        ;return if char == Carriage Return
213E 28 0F               JR    Z,read2
2140 11 0A 00            LD    DE,10
2143 CD 9B 20            CALL  mul16       ;result *= 10;
2146 D6 30               SUB   A,'0'       ;digit = char - '0';
2148 85                  ADD   A,L         ;result += digit;
2149 6F                  LD    L,A
214A 30 EB               JR    NC,read1     ;get next character
214C 24                  INC   H
214D 18 E8               JR    read1        ;get next character
214F             read2:
214F D1                  POP   DE
2150 F1                  POP   AF
2151 C9                  RET
2152             ;****************
2152             ;write
2152             ;write a 16 bit unsigned number to the output
2152             ;  IN:  TOS   = return address
2152             ;       TOS+2 = 16 bit unsigned number
2152             ;  OUT: none
2152             ;  USES:HL
2152             ;****************
2152             write:
2152 E1                  POP   HL          ;return address into HL
2153 E3                  EX    (SP),HL     ;uint in HL; return address on stack
2154 C5                  PUSH  BC          ;save registers used
2155 F5                  PUSH  AF
2156 06 00               LD    B,0         ;number of digits on stack
2158 7C                  LD    A,H         ;is HL=0?
2159 B5                  OR    L
215A 20 03               JR    NZ,write1
215C 04                  INC   B           ;write a single digit 0
215D 18 0C               JR    write3
215F             write1:
215F 3E 0A               LD    A,10        ;divide HL by 10
2161 CD 21 21            CALL  div16_8
2164 F5                  PUSH  AF          ;put remainder on stack
2165 04                  INC   B
2166 7C                  LD    A,H         ;is quotient 0?
2167 B5                  OR    L
2168 20 F5               JR    NZ,write1
216A             write2:
216A F1                  POP   AF          ;write digit
216B             write3:
216B C6 30               ADD   A,'0'
216D CD 4D 20            CALL  putChar
2170 10 F8               DJNZ  write2
2172 F1                  POP   AF          ;restore registers used
2173 C1                  POP   BC
2174 CD 5A 20            CALL  putCRLF
2177 C9                  RET
2178             main:
2178             L0:     ;{A small program in the P-language}
2178                     ;VAR S, N, T;
2178                     ;BEGIN
2178                     ;  S := 0; {sum}
2178 21 00 00            LD    HL,0
217B 22 00 40            LD    (04000H),HL
217E             L2:     ;  N := 0; {number of items}
217E 21 00 00            LD    HL,0
2181 22 02 40            LD    (04002H),HL
2184             L4:     ;  T := READ; {read a digit}
2184 CD 32 21            CALL  read
2187 22 04 40            LD    (04004H),HL
218A             L6:     ;  WRITE (T);
218A 2A 04 40            LD    HL,(04004H)
218D E5                  PUSH  HL
218E CD 52 21            CALL  write
2191             L9:     ;  WHILE T <> 0 {not end of file} DO
2191 2A 04 40            LD    HL,(04004H)
2194             L10:    ;  BEGIN
2194 11 00 00            LD    DE,0
2197 B7                  OR    A
2198 ED 52               SBC   HL,DE
219A CA C2 21            JP    Z,L24
219D             L12:    ;    S := S + T; {sum of numbers read}
219D 2A 00 40            LD    HL,(04000H)
21A0 ED 5B 04 40         LD    DE,(04004H)
21A4 19                  ADD   HL,DE
21A5 22 00 40            LD    (04000H),HL
21A8             L15:    ;    N := N + 1; {number of numbers read}
21A8 2A 02 40            LD    HL,(04002H)
21AB 11 01 00            LD    DE,1
21AE 19                  ADD   HL,DE
21AF 22 02 40            LD    (04002H),HL
21B2             L18:    ;    T := READ;
21B2 CD 32 21            CALL  read
21B5 22 04 40            LD    (04004H),HL
21B8             L20:    ;    WRITE (T);
21B8 2A 04 40            LD    HL,(04004H)
21BB E5                  PUSH  HL
21BC CD 52 21            CALL  write
21BF             L23:    ;  END;
21BF C3 91 21            JP    L9
21C2             L24:    ;  WRITE (N);
21C2 2A 02 40            LD    HL,(04002H)
21C5 E5                  PUSH  HL
21C6 CD 52 21            CALL  write
21C9             L27:    ;  WRITE (S);
21C9 2A 00 40            LD    HL,(04000H)
21CC E5                  PUSH  HL
21CD CD 52 21            CALL  write
21D0             L30:    ;  IF N <> 0 THEN
21D0 2A 02 40            LD    HL,(04002H)
21D3             L31:    ;    WRITE (S / N); {average}
21D3 11 00 00            LD    DE,0
21D6 B7                  OR    A
21D7 ED 52               SBC   HL,DE
21D9 CA EA 21            JP    Z,L37
21DC 2A 00 40            LD    HL,(04000H)
21DF ED 5B 02 40         LD    DE,(04002H)
21E3 CD 01 21            CALL  div16
21E6 E5                  PUSH  HL
21E7 CD 52 21            CALL  write
21EA             L37:    ;END.
21EA C3 71 01            JP    00171H      ;Jump to Zilog Z80183 Monitor.

Labels:
2178 : main
21BB : L21
21B8 : L20
21BF : L23
21BC : L22
21C5 : L25
21C2 : L24
21C9 : L27
21C6 : L26
21CD : L29
21CC : L28
2118 : div16_2
20D6 : mul16321
210A : div16_1
20DD : mul16322
2119 : div16_3
2152 : write
2121 : div16_8
2132 : read
202E : getChar1
203F : putStr1
20E7 : mul16S
21D0 : L30
214F : read2
21D9 : L32
21D3 : L31
21DF : L34
21DC : L33
2137 : read1
21E7 : L36
21E6 : L35
2020 : getChar
21EA : L37
2008 : WAIT1
2018 : WAIT1M2
2038 : putMsg
215F : write1
2049 : putStr2
216A : write2
216B : write3
20B4 : mul1632
204B : putSpace
204E : putChar1
2101 : div16
2077 : putHexHL
2096 : putHexA2
208B : putHexA1
2082 : putHexA
20F0 : mul16S1
2073 : putBell
205A : putCRLF
2006 : WAIT
2013 : WAIT1M
209B : mul16
20FB : mul16S2
2178 : L0
217B : L1
204D : putChar
217E : L2
203E : putStr
2067 : putErase
2181 : L3
2000 : start
212E : div16_83
2184 : L4
2187 : L5
218A : L6
2194 : L10
218D : L7
218E : L8
219D : L12
2191 : L9
219A : L11
21A5 : L14
2126 : div16_82
21A0 : L13
21AB : L16
21A8 : L15
21B2 : L18
21AF : L17
21B5 : L19

Cross references:
putChar1 = 204E : 2053
putSpace = 204B : 206C
   div16 = 2101 : 21E3
putHexA2 = 2096 : 2092
putHexA1 = 208B : 2087
    main = 2178 : 2003
     L24 = 21C2 : 219A
 putHexA = 2082 : 2079 207D
 mul16S1 = 20F0 : 20FC
 div16_2 = 2118 : 2113
mul16321 = 20D6 : 20D3
 div16_1 = 210A : 2119
mul16322 = 20DD : 20DA
 div16_3 = 2119 : 2116
 putCRLF = 205A : 2174
  WAIT1M = 2013 : 2008
   write = 2152 : 218E 21BC 21C6 21CD 21E7
 div16_8 = 2121 : 2161
 mul16S2 = 20FB : 20F5 20F8
   mul16 = 209B : 2143
    read = 2132 : 2184 21B2
getChar1 = 202E : 2025
 putStr1 = 203F : 2047
 putChar = 204D : 2044 205D 2062 2069 2071 2075 2096 216D
  putStr = 203E : 2039
div16_83 = 212E : 212A
   read2 = 214F : 213E
      L9 = 2191 : 21BF
   read1 = 2137 : 213A 214A 214D
div16_82 = 2126 : 212E
 getChar = 2020 : 2137
     L37 = 21EA : 21D9
   WAIT1 = 2008 : 200E
 WAIT1M2 = 2018 : 201B
  write1 = 215F : 215A 2168
 putStr2 = 2049 : 2042
  write2 = 216A : 2170
  write3 = 216B : 215D
