2000             TOS     equ 0FD00H        ;User stack grows before user global data.
2000             CNTLA0  equ 000H          ;144 ASCI0 Control Register A.
2000             STAT0   equ 004H          ;147 ASCI0 Status register.
2000             TDR0    equ 006H          ;148 ASCI0 Transmit Data Register.
2000             RDR0    equ 008H          ;149 ASCI0 Receive Data Register.
2000             ERROR   equ 3             ;CNTLA0->OVRN,FE,PE,BRK error flags.
2000             TDRE    equ 1             ;STAT0->Tx data register empty bit.
2000             OVERRUN equ 6             ;STAT0->OVERRUN bit.
2000             RDRF    equ 7             ;STAT0->Rx data register full bit.
2000                     .ORG  02000H      ;lowest external RAM address.
2000             start:
2000 31 00 FD            LD    SP,TOS
2003 C3 7C 21            JP    main
2006             ;****************
2006             ;WAIT - Wait DE * 1 msec @ 18,432 MHz with no wait states
2006             ;  IN:  DE number of msec to wait
2006             ;  OUT: none
2006             ;  USES: 4 bytes on stack
2006             ;****************
2006             WAIT:
2006 D5                  PUSH  DE
2007 F5                  PUSH  AF
2008             WAIT1:
2008 CD 13 20            CALL  WAIT1M      ;Wait 1 msec
200B 1B                  DEC   DE
200C 7A                  LD    A,D
200D B3                  OR    A,E
200E 20 F8               JR    NZ,WAIT1
2010 F1                  POP   AF
2011 D1                  POP   DE
2012 C9                  RET
2013             ;****************
2013             ;WAIT1M
2013             ;wait 1 msec at 18,432 MHz with no wait states
2013             ;The routine requires 56+n*22 states, so that with n=834
2013             ;28  clock cycles remain left.
2013             ;****************
2013             WAIT1M:
2013 E5                  PUSH  HL          ;5      11 (11)
2014                                       ;       3 opcode
2014                                       ;       3 mem write
2014                                       ;       1 inc SP
2014                                       ;       3 mem write
2014                                       ;       1 inc SP
2014 F5                  PUSH  AF          ;5      11 (22)
2015                                       ;       3 opcode
2015                                       ;       3 mem write
2015                                       ;       1 inc SP
2015                                       ;       3 mem write
2015                                       ;       1 inc SP
2015 21 42 03            LD    HL, 834     ;3      9 (31)
2018                                       ;       3 opcode
2018                                       ;       3 mem read
2018                                       ;       3 mem read
2018             WAIT1M2:
2018 2B                  DEC   HL          ;2      4 (31+n*4)
2019                                       ;       3 opcode
2019                                       ;       1 execute
2019 7C                  LD    A,H         ;2      6 (31+n*10)
201A                                       ;       3 opcode
201A                                       ;       3 execute
201A B5                  OR    A,L         ;2      4 (31+n*14)
201B                                       ;       3 opcode
201B                                       ;       1 execute
201B 20 FB               JR    NZ,WAIT1M2  ;4      8 (31+n*22) if NZ
201D                                       ;       3 opcode
201D                                       ;       3 mem read
201D                                       ;       1 execute
201D                                       ;       1 execute
201D                                       ;2      6 (29+n*22) if not NZ
201D                                       ;       3 opcode
201D                                       ;       3 mem read
201D F1                  POP   AF          ;3      9 (38+n*22)
201E                                       ;       3 opcode
201E                                       ;       3 mem read
201E                                       ;       3 mem read
201E E1                  POP   HL          ;3      9 (47+n*22)
201F                                       ;       3 opcode
201F                                       ;       3 mem read
201F                                       ;       3 mem read
201F C9                  RET               ;3      9 (56+n*22)
2020                                       ;       3 opcode
2020                                       ;       3 mem read
2020                                       ;       3 mem read
2020             ;****************
2020             ;getChar
2020             ;Check if an input character from ASCI0 is available.
2020             ;  IN:  none
2020             ;  OUT: F: ZERO flag set if no character is available.
2020             ;          ZERO flag reset if a character is available.
2020             ;       A : character from ASCI0, if available.
2020             ;  USES:AF
2020             ;****************
2020             getChar:
2020 ED 38 04            IN0   A,(STAT0)   ;read ASCI0 status
2023 CB 77               BIT   OVERRUN,A   ;check if ASCIO OVERRUN bit is set
2025 20 07               JR    NZ,getChar1 ;-yes: reset error flags
2027 CB 7F               BIT   RDRF,A      ;check if ASCIO RDRF bit is set
2029 C8                  RET   Z           ;-no: return without a character
202A ED 38 08            IN0   A,(RDR0)    ;-yes:read ASCIO Rx data register
202D C9                  RET
202E             getChar1:
202E ED 38 00            IN0   A,(CNTLA0)  ;read ASCI0 control register
2031 CB 9F               RES   ERROR,A     ;reset OVRN,FE,PE,BRK flags
2033 ED 39 00            OUT0  (CNTLA0),A  ;write back to ASCI0 CTRL
2036 AF                  XOR   A
2037 C9                  RET               ;return without a character
2038             ;****************
2038             ;putMsg
2038             ;Print via ASCI0 a zero terminated string, starting at the return address on the stack.
2038             ;  IN:  none.
2038             ;  OUT: none.
2038             ;  USES:none.
2038             ;****************
2038             putMsg:
2038 E3                  EX    (SP),HL     ;save HL and load return address into HL.
2039 CD 3E 20            CALL  putStr
203C E3                  EX    (SP),HL     ;put return address onto stack and restore HL.
203D C9                  RET
203E             ;****************
203E             ;putStr
203E             ;Print via ASCI0 a zero terminated string, pointed to by HL.
203E             ;  IN:  HL:address of zero terminated string to be printed.
203E             ;  OUT: none.
203E             ;  USES:HL (point to byte after zero terminated string)
203E             ;****************
203E             putStr:
203E F5                  PUSH  AF          ;save registers
203F             putStr1:
203F 7E                  LD    A,(HL)      ;get next character
2040 23                  INC   HL
2041 B7                  OR    A,A         ;is it zer0?
2042 28 05               JR    Z,putStr2   ;yes ->return
2044 CD 4D 20            CALL  putChar     ;no->put it to ASCI0
2047 18 F6               JR    putStr1
2049             putStr2:
2049 F1                  POP   AF
204A C9                  RET
204B             ;****************
204B             ;putSpace
204B             ;Send a space character to ASCI0
204B             ;  IN:  none.
204B             ;  OUT: none.
204B             ;  USES:AF
204B             ;****************
204B             putSpace:
204B 3E 20               LD    A,' '       ;load space and continue with putChar.
204D             ;****************
204D             ;putChar
204D             ;Send one character to ASCI0.
204D             ;  IN:  A = character
204D             ;  OUT: none.
204D             ;  USES:AF
204D             ;****************
204D             putChar:
204D F5                  PUSH  AF          ;send the character via ASCI0
204E             putChar1:
204E ED 38 04            IN0   A,(STAT0)   ;read ASCI0 status register
2051 CB 4F               BIT   TDRE,A      ;wait until TDRE <> 0
2053 28 F9               JR    Z,putChar1
2055 F1                  POP   AF          ;restore AF registers
2056 ED 39 06            OUT0  (TDR0),A    ;write character to ASCI0
2059 C9                  RET
205A             ;****************
205A             ;putCRLF
205A             ;Send CR and LF to ASCI0
205A             ;  IN:  none.
205A             ;  OUT: none.
205A             ;  USES:none.
205A             ;****************
205A             putCRLF:
205A F5                  PUSH  AF
205B 3E 0D               LD    A,'\r'       ;print carriage return
205D CD 4D 20            CALL  putChar
2060 3E 0A               LD    A,'\n'       ;print line feed
2062 CD 4D 20            CALL  putChar
2065 F1                  POP   AF
2066 C9                  RET
2067             ;****************
2067             ;putErase
2067             ;Erase the latest character at ASCI0
2067             ;  IN:  none.
2067             ;  OUT: none.
2067             ;  USES:AF
2067             ;****************
2067             putErase:
2067 3E 08               LD    A,'\b'       ;print backspace
2069 CD 4D 20            CALL  putChar
206C CD 4B 20            CALL  putSpace    ;print space (erase character)
206F 3E 08               LD    A,'\b'      ;print backspace
2071 18 DA               JR    putChar
2073             ;****************
2073             ;putBell
2073             ;Send a Bell character to ASCI0
2073             ;  IN:  none.
2073             ;  OUT: none.
2073             ;  USES:AF
2073             ;****************
2073             putBell:
2073 3E 07               LD    A,07        ;ring the bell at ASCI0
2075 18 D6               JR    putChar
2077             ;****************
2077             ;putHexHL
2077             ;Print HL register pair as 4 hex digits
2077             ;  IN:  HL = word to be printed.
2077             ;  OUT: none.
2077             ;  USES:none.
2077             ;****************
2077             putHexHL:
2077 F5                  PUSH  AF          ;save used registers
2078 7C                  LD    A,H         ;print H as 2 hex digits
2079 CD 82 20            CALL  putHexA
207C 7D                  LD    A,L         ;print L as 2 hex digits
207D CD 82 20            CALL  putHexA
2080 F1                  POP   AF          ;restore used registers
2081 C9                  RET
2082             ;****************
2082             ;putHexA
2082             ;Print A register as 2 hex digits
2082             ;  IN:  A = byte to be printed
2082             ;  OUT: none.
2082             ;  USES:none.
2082             ;****************
2082             putHexA:
2082 F5                  PUSH  AF          ;save input
2083 1F                  RRA               ;shift upper nibble to the right
2084 1F                  RRA
2085 1F                  RRA
2086 1F                  RRA
2087 CD 8B 20            CALL  putHexA1    ;print upper nibble
208A F1                  POP   AF          ;restore input & print lower nibble
208B             putHexA1:
208B F5                  PUSH  AF          ;save input
208C E6 0F               AND   A,00FH      ;mask lower nibble
208E C6 30               ADD   A,'0'       ;convert to hex digit
2090 FE 3A               CP    A,'9'+1
2092 38 02               JR    C,putHexA2
2094 C6 07               ADD   A,07
2096             putHexA2:
2096 CD 4D 20            CALL  putChar
2099 F1                  POP   AF          ;restore input
209A C9                  RET               ;and return
209B             ;****************
209B             ;mul16
209B             ;16 by 16 bit unsigned multiplication with 16 bit result.
209B             ;  IN:  HL = operand 1
209B             ;       DE = operand 2
209B             ;  OUT: HL = HL * DE low part
209B             ;  USES:DE
209B             ;  Size   25 bytes
209B             ;  Time  160 cycles
209B             ;****************
209B             mul16:
209B                     ;HL = HL * DE
209B                     ;        H  L
209B                     ;        D  E
209B                     ;    --------*
209B                     ;          EL
209B                     ;       EH  0
209B                     ;       DL  0
209B                     ; -----------+
209B                     ;        R  S
209B                     ;S = ELlow
209B                     ;R = ELhigh+EHlow+DLlow
209B C5                  PUSH  BC          ;11  11 save BC
209C 44                  LD    B,H         ; 4  15 copy HL to BC
209D 4D                  LD    C,L         ; 4  19
209E 63                  LD    H,E         ; 4  23 HL contains EL
209F ED 6C               MLT   HL          ;17  40
20A1 E5                  PUSH  HL          ;11  51
20A2 63                  LD    H,E         ; 4  55 HL contains EH aka EB
20A3 68                  LD    L,B         ; 4  59
20A4 ED 6C               MLT   HL          ;17  76
20A6 45                  LD    B,L         ; 4  80 save EHlow in B
20A7 62                  LD    H,D         ; 4  84 HL contains DL aka DC
20A8 69                  LD    L,C         ; 4  88
20A9 ED 6C               MLT   HL          ;17 105
20AB 55                  LD    D,L         ; 4 109 DLlow into DE
20AC 1E 00               LD    E,0         ; 6 115
20AE E1                  POP   HL          ; 9 124 add EL+DElow
20AF 19                  ADD   HL,DE       ; 7 131
20B0 50                  LD    D,B         ; 4 135 add EL+DElow+EHlow
20B1 19                  ADD   HL,DE       ; 7 142
20B2 C1                  POP   BC          ; 9 151 restore BC
20B3 C9                  RET               ; 9 160
20B4             ;****************
20B4             ;mul16_10
20B4             ;multiply a 16 bit unsigned number by 10 with a 16 bit result.
20B4             ;  IN:  HL = operand
20B4             ;  OUT: HL = HL * 10; low part
20B4             ;  USES:Flags
20B4             ;  Size   9 bytes
20B4             ;  Time   65 cycles
20B4             ;****************
20B4             mul16_10:
20B4 D5                  PUSH  DE          ;11 11
20B5 54                  LD    D,H         ; 4 15
20B6 5D                  LD    E,L         ; 4 19
20B7 29                  ADD   HL,HL       ; 7 26 times 2
20B8 29                  ADD   HL,HL       ; 7 33 times 4
20B9 19                  ADD   HL,DE       ; 7 40 times 5
20BA 29                  ADD   HL,HL       ; 7 47 times 10
20BB D1                  POP   DE          ; 9 56
20BC C9                  RET               ; 9 65
20BD             ;****************
20BD             ;mul1632
20BD             ;16 by 16 bit unsigned multiplication with 32 bit result.
20BD             ;  IN:  HL = operand 1
20BD             ;       DE = operand 2
20BD             ;  OUT: HL = HL * DE low part
20BD             ;       DE = HL * DE high part
20BD             ;  USES:-
20BD             ;  Size 49 bytes
20BD             ;  Time between 303 en 307 cycles
20BD             ;****************
20BD             mul1632:
20BD                     ;HL = HL * DE
20BD                     ;        H  L
20BD                     ;        D  E
20BD                     ;    --------*
20BD                     ;          EL
20BD                     ;       EH  0
20BD                     ;       DL  0
20BD                     ;    DH  0  0
20BD                     ; -----------+
20BD                     ;  P  Q  R  S
20BD                     ;S = ELlow
20BD                     ;R = ELhigh+EHlow+DLlow
20BD                     ;Q = DHlow+EHhigh+DLhigh
20BD                     ;P = DHhigh
20BD F5                  PUSH  AF          ;11  11 save AF
20BE C5                  PUSH  BC          ;11  22 save BC
20BF 44                  LD    B,H         ; 4  26
20C0 4D                  LD    C,L         ; 4  30
20C1 62                  LD    H,D         ; 4  34 HL contains DH aka DB
20C2 68                  LD    L,B         ; 4  38
20C3 ED 6C               MLT   HL          ;17  55
20C5 E5                  PUSH  HL          ;11  66
20C6 62                  LD    H,D         ; 4  70 HL contains DL aka DC
20C7 69                  LD    L,C         ; 4  74
20C8 ED 6C               MLT   HL          ;17  91
20CA E5                  PUSH  HL          ;11 102
20CB 63                  LD    H,E         ; 4 106 HL contains EH aka EB
20CC 68                  LD    L,B         ; 4 110
20CD ED 6C               MLT   HL          ;17 127
20CF E5                  PUSH  HL          ;11 138
20D0 63                  LD    H,E         ; 4 142 HL contains EL aka EC
20D1 69                  LD    L,C         ; 4 146
20D2 ED 6C               MLT   HL          ;17 163
20D4 D1                  POP   DE          ; 9 172 calculate RS=EL+EH0
20D5 06 00               LD    B,0         ; 6 178
20D7 4A                  LD    C,D         ; 4 182 ..C=EHhigh
20D8 53                  LD    D,E         ; 4 186 ..D=EHlow
20D9 1E 00               LD    E,0         ; 6 192
20DB 19                  ADD   HL,DE       ; 7 199
20DC 30 01               JR    NC,mul16321 ; 8 207 | 6 205 add carry to PQ
20DE 03                  INC   BC          ;         4 209
20DF             mul16321:
20DF D1                  POP   DE          ; 9 209 | 211 calculate RS=EL+EH0+DL0
20E0 7A                  LD    A,D         ; 4 220 | 222 ..A=DLhigh
20E1 53                  LD    D,E         ; 4 224 | 226 ..D=DLlow
20E2 19                  ADD   HL,DE       ; 7 231 | 233
20E3 30 01               JR    NC,mul16322 ; 8 239 | 6 239 add carry to PQ
20E5 03                  INC   BC          ;         4 243
20E6             mul16322:
20E6                                       ;HL=RS=EL+EH0+DL0
20E6                                       ;C=EHhigh
20E6                                       ;A=DLhigh
20E6                                       ;E=0
20E6 EB                  EX    DE,HL       ; 3 242 | 246
20E7 65                  LD    H,L         ; 4 246 | 250 ..E was 0, so H=L=0
20E8 6F                  LD    L,A         ; 4 250 | 254 ..HL=DLhigh
20E9 09                  ADD   HL,BC       ; 7 257 | 261 PQ=EHhigh+DLhigh+DH
20EA C1                  POP   BC          ; 9 266 | 270
20EB 09                  ADD   HL,BC       ; 7 273 | 277
20EC EB                  EX    DE,HL       ; 3 276 | 280
20ED                                       ;D=P=DHhigh
20ED                                       ;E=Q=DHlow+EHhigh+DLhigh
20ED                                       ;H=R=ELhigh+EHlow+DLlow
20ED                                       ;L=S=ELlow
20ED C1                  POP   BC          ; 9 285 | 289 restore BC
20EE F1                  POP   AF          ; 9 294 | 298 restore AF
20EF C9                  RET               ; 9 303 | 307
20F0             ;****************
20F0             ;mul16S
20F0             ;16 by 16 bit slow unsigned multiplication with 32 bit result.
20F0             ;  IN:  HL = operand 1
20F0             ;       DE = operand 2
20F0             ;  OUT: DE = HL * DE high part
20F0             ;       HL = HL * DE low part
20F0             ;  USES:none.
20F0             ;  Size 26 bytes
20F0             ;  Time between 726 en 998 cycles
20F0             ;****************
20F0             mul16S:
20F0 F5                  PUSH  AF          ;11  11 save AF
20F1 C5                  PUSH  BC          ;11  22 save BC
20F2 44                  LD    B,H         ; 4  26
20F3 4D                  LD    C,L         ; 4  30
20F4 21 00 00            LD    HL,0        ; 9  39
20F7 3E 10               LD    A,16        ; 6  45
20F9             mul16S1:
20F9 29                  ADD   HL,HL       ;16*7=112 157
20FA CB 13               RL    E           ;16*7=112 269
20FC CB 12               RL    D           ;16*7=112 381
20FE 30 04               JR    NC,mul16S2  ;16*8=128 509 16*6= 96 477
2100 09                  ADD   HL,BC       ;             16*7=112 589
2101 30 01               JR    NC,mul16S2  ;             16*8=128 717 16*6=96 685
2103 13                  INC   DE          ;             16*4= 64 781 16*4=64 749 This instruction (with the jump) is like an "ADC DE,0"
2104             mul16S2:
2104 3D                  DEC   A           ;16*4=64    573 | 845 | 813
2105 20 F2               JR    NZ,mul16S1  ;15*8+6=126 699 | 971 | 939
2107 C1                  POP   BC          ; 9         708 | 980 | 948 restore BC
2108 F1                  POP   AF          ; 9         717 | 989 | 957 restore AF
2109 C9                  RET               ; 9         726 | 998 | 966
210A             ;****************
210A             ;div16
210A             ;16 by 16 bit unsigned division.
210A             ;  IN:  HL = dividend
210A             ;       DE = divisor
210A             ;  OUT: HL = quotient
210A             ;       DE = remainder
210A             ;  USES:-
210A             ;  Size   32 bytes
210A             ;  Time   between 1073 en 1121 cycles
210A             ;pseudo code:
210A             ;T = dividend
210A             ;D = divisor
210A             ;Q = quotient = 0
210A             ;R = remainder = 0
210A             ;invariante betrekking:
210A             ; D/T\Q     
210A             ;   R       
210A             ; T = QD + R
210A             ; T <= 2^N  
210A             ;
210A             ; D/T'.RT\Q'        
210A             ;   R'              
210A             ; RT <= 2^N         
210A             ; 0<=k<=N           
210A             ; RT = T % 10^k     
210A             ; T' = (T-RT) / 10^k
210A             ; Q' = T' / D       
210A             ; R' = T' % D       
210A             ;
210A             ;for (i=16; i>0; i--) {
210A             ;  T = T * 2 (remember MSB in carry)
210A             ;  R = R * 2 + carry
210A             ;  Q = Q * 2
210A             ;  if (R >= D) {
210A             ;    R = R - D;
210A             ;    Q++;
210A             ;  }
210A             ;}
210A             ;return Q (in HL) and R (in DE)
210A             ;****************
210A             div16:
210A F5                  PUSH  AF          ;11  11 save registers used
210B C5                  PUSH  BC          ;11  22
210C 4D                  LD    C,L         ; 4  26 T(AC) = teller from input (HL)
210D 7C                  LD    A,H         ; 4  30 D(DE) = deler from input  (DE)
210E 21 00 00            LD    HL,0        ; 9  39 R(HL) = restant; Q(AC) = quotient
2111 06 10               LD    B,16        ; 6  45 for (i=16; i>0; i--)
2113             div16_1:
2113 CB 21               SLA   C           ;16* 7=112 157   T = T * 2 (remember MSB in carry)
2115 CB 17               RL    A           ;16* 7=112 269   Q = Q * 2
2117 ED 6A               ADC   HL,HL       ;16*10=160 429   R = R * 2 + carry
2119 B7                  OR    A           ;16* 4= 64 493   if (R >= D) {
211A ED 52               SBC   HL,DE       ;16*10=160 653
211C 38 03               JR    C,div16_2   ;16* 8=128 781 16*6= 96 749   R = R - D
211E 0C                  INC   C           ;              16*4= 64 813   Q++
211F 18 01               JR    div16_3     ;              16*8=128 941
2121             div16_2:
2121 19                  ADD   HL,DE       ;16* 7=112 893  (compensate comparison)
2122             div16_3:
2122 10 EF               DJNZ  div16_1     ;15*9+7=142 1035 | 1083 }
2124 EB                  EX    DE,HL       ; 3 1038 | 1086 swap remainder (HL) into DE
2125 67                  LD    H,A         ; 4 1042 | 1090 move quotient (AC) into HL
2126 69                  LD    L,C         ; 4 1046 | 1094
2127 C1                  POP   BC          ; 9 1055 | 1103
2128 F1                  POP   AF          ; 9 1064 | 1112
2129 C9                  RET               ; 9 1073 | 1121
212A             ;****************
212A             ;div16_8
212A             ;16 by 8 bit unsigned division.
212A             ;  IN:  HL = dividend
212A             ;       A  = divisor
212A             ;  OUT: HL = quotient
212A             ;       A  = remainder
212A             ;  USES:F(lags)
212A             ;  Size 18 bytes
212A             ;  Time between 601 en 697 cycles
212A             ;****************
212A             div16_8:
212A C5                  PUSH  BC          ;11  11 save registers used
212B 06 10               LD    B,16        ; 6 17 the length of the dividend (16 bits)
212D 4F                  LD    C,A         ; 4 21 move divisor to C
212E AF                  XOR   A           ; 4 25 clear upper 8 bits of AHL
212F             div16_82:
212F 29                  ADD   HL,HL       ;16*7=112 137 advance dividend (HL) into selected bits (A)
2130 CB 17               RL    A           ;16*7=112 249
2132 B9                  CP    C           ;16*4= 64 313 check if divisor (E) <= selected digits (A)
2133 38 02               JR    C,div16_83  ;16*8=128 441 16*6=96 409 if not, advance without subtraction
2135 91                  SUB   C           ;             16*4=64 473 subtract the divisor
2136 2C                  INC   L           ;             16*4=64 537 and set the next digit of the quotient
2137             div16_83:
2137 10 F6               DJNZ  div16_82    ;15*9+7=142 583 679
2139 C1                  POP   BC          ;9 592 688
213A C9                  RET               ;9 601 697
213B             ;****************
213B             ;read
213B             ;read a 16 bit unsigned number from the input
213B             ;  IN:  none
213B             ;  OUT: HL = 16 bit unsigned number
213B             ;  USES:-
213B             ;****************
213B             read:
213B F5                  PUSH  AF
213C 21 00 00            LD    HL,0        ;result = 0;
213F             read1:
213F CD 20 20            CALL  getChar     ;check if a character is available.
2142 28 FB               JR    Z,read1     ;-no: wait for it.
2144 FE 0D               CP    '\r'        ;return if char == Carriage Return
2146 28 0C               JR    Z,read2
2148 CD B4 20            CALL  mul16_10    ;result *= 10;
214B D6 30               SUB   A,'0'       ;digit = char - '0';
214D 85                  ADD   A,L         ;result += digit;
214E 6F                  LD    L,A
214F 30 EE               JR    NC,read1     ;get next character
2151 24                  INC   H
2152 18 EB               JR    read1        ;get next character
2154             read2:
2154 F1                  POP   AF
2155 C9                  RET
2156             ;****************
2156             ;write
2156             ;write a 16 bit unsigned number to the output
2156             ;  IN:  TOS   = return address
2156             ;       TOS+2 = 16 bit unsigned number
2156             ;  OUT: none
2156             ;  USES:HL
2156             ;****************
2156             write:
2156 E1                  POP   HL          ;return address into HL
2157 E3                  EX    (SP),HL     ;uint in HL; return address on stack
2158 C5                  PUSH  BC          ;save registers used
2159 F5                  PUSH  AF
215A 06 00               LD    B,0         ;number of digits on stack
215C 7C                  LD    A,H         ;is HL=0?
215D B5                  OR    L
215E 20 03               JR    NZ,write1
2160 04                  INC   B           ;write a single digit 0
2161 18 0C               JR    write3
2163             write1:
2163 3E 0A               LD    A,10        ;divide HL by 10
2165 CD 2A 21            CALL  div16_8
2168 F5                  PUSH  AF          ;put remainder on stack
2169 04                  INC   B
216A 7C                  LD    A,H         ;is quotient 0?
216B B5                  OR    L
216C 20 F5               JR    NZ,write1
216E             write2:
216E F1                  POP   AF          ;write digit
216F             write3:
216F C6 30               ADD   A,'0'
2171 CD 4D 20            CALL  putChar
2174 10 F8               DJNZ  write2
2176 F1                  POP   AF          ;restore registers used
2177 C1                  POP   BC
2178 CD 5A 20            CALL  putCRLF
217B C9                  RET
217C             main:
217C             L0:     ;{A small program in the P-language}
217C                     ;VAR number, Sum, NUMBER_OF_NUMBERS, _Average;
217C                     ;BEGIN
217C                     ;  Sum := 0;
217C 21 00 00            LD    HL,0
217F 22 02 40            LD    (04002H),HL
2182             L2:     ;  NUMBER_OF_NUMBERS := 0;
2182 21 00 00            LD    HL,0
2185 22 04 40            LD    (04004H),HL
2188             L4:     ;  {read a new number and echo number to output}
2188                     ;  number := READ; 
2188 CD 3B 21            CALL  read
218B 22 00 40            LD    (04000H),HL
218E             L6:     ;  WRITE (number);
218E 2A 00 40            LD    HL,(04000H)
2191 E5                  PUSH  HL
2192 CD 56 21            CALL  write
2195             L9:     ;  WHILE number <> 0 {not end of file} DO
2195 2A 00 40            LD    HL,(04000H)
2198 11 00 00            LD    DE,0
219B B7                  OR    A
219C ED 52               SBC   HL,DE
219E CA C6 21            JP    Z,L24
21A1             L12:    ;  BEGIN
21A1                     ;    Sum := Sum + number;
21A1 2A 02 40            LD    HL,(04002H)
21A4 ED 5B 00 40         LD    DE,(04000H)
21A8 19                  ADD   HL,DE
21A9 22 02 40            LD    (04002H),HL
21AC             L15:    ;    NUMBER_OF_NUMBERS := NUMBER_OF_NUMBERS + 1;
21AC 2A 04 40            LD    HL,(04004H)
21AF 11 01 00            LD    DE,1
21B2 19                  ADD   HL,DE
21B3 22 04 40            LD    (04004H),HL
21B6             L18:    ;    {read a new number and echo number to output}
21B6                     ;    number := READ;
21B6 CD 3B 21            CALL  read
21B9 22 00 40            LD    (04000H),HL
21BC             L20:    ;    WRITE (number);
21BC 2A 00 40            LD    HL,(04000H)
21BF E5                  PUSH  HL
21C0 CD 56 21            CALL  write
21C3             L23:    ;  END;
21C3 C3 95 21            JP    L9
21C6             L24:    ;  WRITE (NUMBER_OF_NUMBERS);
21C6 2A 04 40            LD    HL,(04004H)
21C9 E5                  PUSH  HL
21CA CD 56 21            CALL  write
21CD             L27:    ;  WRITE (Sum);
21CD 2A 02 40            LD    HL,(04002H)
21D0 E5                  PUSH  HL
21D1 CD 56 21            CALL  write
21D4             L30:    ;  IF NUMBER_OF_NUMBERS <> 0 THEN
21D4 2A 04 40            LD    HL,(04004H)
21D7 11 00 00            LD    DE,0
21DA B7                  OR    A
21DB ED 52               SBC   HL,DE
21DD CA F4 21            JP    Z,L39
21E0             L33:    ;  BEGIN
21E0                     ;    _Average := Sum / NUMBER_OF_NUMBERS;
21E0 2A 02 40            LD    HL,(04002H)
21E3 ED 5B 04 40         LD    DE,(04004H)
21E7 CD 0A 21            CALL  div16
21EA 22 06 40            LD    (04006H),HL
21ED             L36:    ;    WRITE (_Average);
21ED 2A 06 40            LD    HL,(04006H)
21F0 E5                  PUSH  HL
21F1 CD 56 21            CALL  write
21F4             L39:    ;  END
21F4                     ;END.
21F4 C3 71 01            JP    00171H      ;Jump to Zilog Z80183 Monitor.

Labels:
20B4 : mul16_10
217C : main
21BF : L21
21BC : L20
21C3 : L23
21C0 : L22
21C9 : L25
21C6 : L24
21CD : L27
21CA : L26
21D1 : L29
21D0 : L28
2121 : div16_2
20DF : mul16321
2113 : div16_1
20E6 : mul16322
2122 : div16_3
2156 : write
212A : div16_8
213B : read
202E : getChar1
203F : putStr1
20F0 : mul16S
21D4 : L30
2154 : read2
21DD : L32
21D7 : L31
21E3 : L34
21E0 : L33
213F : read1
21ED : L36
21EA : L35
21F1 : L38
2020 : getChar
21F0 : L37
21F4 : L39
2008 : WAIT1
2018 : WAIT1M2
2038 : putMsg
2163 : write1
2049 : putStr2
216E : write2
216F : write3
20BD : mul1632
204B : putSpace
204E : putChar1
210A : div16
2077 : putHexHL
2096 : putHexA2
208B : putHexA1
2082 : putHexA
20F9 : mul16S1
2073 : putBell
205A : putCRLF
2006 : WAIT
2013 : WAIT1M
209B : mul16
2104 : mul16S2
217C : L0
217F : L1
204D : putChar
2182 : L2
203E : putStr
2067 : putErase
2185 : L3
2000 : start
2137 : div16_83
2188 : L4
218B : L5
218E : L6
2198 : L10
2191 : L7
2192 : L8
21A1 : L12
2195 : L9
219E : L11
21A9 : L14
212F : div16_82
21A4 : L13
21AF : L16
21AC : L15
21B6 : L18
21B3 : L17
21B9 : L19

Cross references:
putChar1 = 204E : 2053
putSpace = 204B : 206C
mul16_10 = 20B4 : 2148
   div16 = 210A : 21E7
putHexA2 = 2096 : 2092
putHexA1 = 208B : 2087
    main = 217C : 2003
     L24 = 21C6 : 219E
 putHexA = 2082 : 2079 207D
 mul16S1 = 20F9 : 2105
 div16_2 = 2121 : 211C
mul16321 = 20DF : 20DC
 div16_1 = 2113 : 2122
mul16322 = 20E6 : 20E3
 div16_3 = 2122 : 211F
 putCRLF = 205A : 2178
  WAIT1M = 2013 : 2008
   write = 2156 : 2192 21C0 21CA 21D1 21F1
 div16_8 = 212A : 2165
 mul16S2 = 2104 : 20FE 2101
    read = 213B : 2188 21B6
getChar1 = 202E : 2025
 putStr1 = 203F : 2047
 putChar = 204D : 2044 205D 2062 2069 2071 2075 2096 2171
  putStr = 203E : 2039
div16_83 = 2137 : 2133
   read2 = 2154 : 2146
      L9 = 2195 : 21C3
   read1 = 213F : 2142 214F 2152
div16_82 = 212F : 2137
 getChar = 2020 : 213F
     L39 = 21F4 : 21DD
   WAIT1 = 2008 : 200E
 WAIT1M2 = 2018 : 201B
  write1 = 2163 : 215E 216C
 putStr2 = 2049 : 2042
  write2 = 216E : 2174
  write3 = 216F : 2161
