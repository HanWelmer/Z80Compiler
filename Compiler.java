import java.io.BufferedReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

/**
 * Compiler for the P programming language, as described in Compiler Engineering Using Pascal by P.C. Capon and P.J. Jinks.
 * Language extended by H.J. Welmer with the following features:
 * - support multiple character identifiers.
 * - support multiple digit constants.
 * - Java style multi-line comment.
 * - Java style end of line comment.
 * - Multi-line may contain end of line comment.
 * - Multi-line comment may not be nested.
 *
 * program        = ["VAR" idlist] block ".".
 * idlist         = identifier {"," identifier} ";".
 * identifier     = "(A-Za-z0-9_)*".
 * block          = statement | "BEGIN" block {";" block} "END".
 * statement      = assignment | writeStatement | ifStatement | whileStatement.
 * assignment     = identifier ":=" expression.
 * writeStatement = "WRITE" "(" expression ")".
 * ifStatement    = "IF" comparison "THEN" block.
 * whileStatement = "WHILE" comparison "DO" block.
 * comparison     = expression relop expression.
 * expression     = term {addop term}.
 * term           = factor {mulop factor}.
 * factor         = identifier | constant | "READ" | "(" expression ")".
 * addop          = "+" | "-".
 * mulop          = "*" | "/".
 * relop          = "<" | "<=" | "<>" | "=" | ">=" | ">".
 * constant       = "(0-9)*".
 */
public class Compiler {

  /* global variables used by the constructor or the interface functions */
  private static boolean debugMode;
  private static boolean verboseMode;
  private static String fileName;
  private BufferedReader input;
  private ArrayList<Instruction> storeInstruction = new ArrayList<Instruction>();

  //constructor
  public Compiler(boolean debugMode, boolean verboseMode) {
    this.debugMode = debugMode;
    this.verboseMode = verboseMode;
  }
  
  /* Class member methods for lexical analysis phase */
  public ArrayList<Instruction> compile(String fileName, BufferedReader input) throws IOException {
    if (verboseMode) System.out.println("debugMode = " + debugMode);

    this.fileName = fileName;
    this.input = input;
    try {
      init();
      prog();
      plant(new Instruction(FunctionType.stop));
    } catch (FatalError e) {
      error(e.getErrorNumber());
      System.exit(1);
    }
    
    if (errors != 0) { 
      storeInstruction.clear();
      codePos = 0;
    }
    if (verboseMode || (errors != 0) ) {
      System.out.println();
      System.out.print(errors);
      if (errors == 1) {
        System.out.println(" error.");
      } else {
        System.out.println(" errors.");
      }
    }
    return storeInstruction;
  }
  
  private void debug(String message) {
    if (debugMode) {
      System.out.print(message);
    }
  }

  /* 
   * variable containing the branch instructions known by the M machine as generated by the P language.
   * variable used during the code generation phase.
   */
  public EnumSet<FunctionType> brFunctions = EnumSet.of(
    FunctionType.br
    , FunctionType.brEq
    , FunctionType.brNe
    , FunctionType.brLt
    , FunctionType.brLe
    , FunctionType.brGt
    , FunctionType.brGe
    );

  /* Constants and class member variables for lexical analysis phase */
  private static final int MAX_LINE_WIDTH = 128;
  private static final int MAX_IDENTIFIER_LENGTH = MAX_LINE_WIDTH;
  private static final int MAX_CONSTANT = 65535; //16 bit constant
  private static final String VALID_IDENTIFIER_CHARACTERS ="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
  private String line;
  private int lineNumber;
  private int lastLinePrinted;
  private int lineSize;
  private int linePos;
  private ArrayList<String> sourceCode;
  private Lexeme lexeme, firstLexeme, lastLexeme;
  private Map<String, LexemeType> keywords = new HashMap<String, LexemeType>();
  private int errors;

  /* Constants and class member variables for syntax analysis phase */
  EnumSet<LexemeType> startExp = EnumSet.noneOf(LexemeType.class);
  EnumSet<LexemeType> startBlock = EnumSet.noneOf(LexemeType.class);

  /* Constants and class member variables for semantic analysis phase */
  private Identifiers identifiers = new Identifiers();
 
  /* Constants and class member variables for code generation phase */
  private static final int NULL_OP = 0;
  private static final int MAX_M_CODE = 512;
  private boolean accInUse;

  private Map<AddValType, FunctionType> forwardAdd = new HashMap<AddValType, FunctionType>();
  private Map<AddValType, FunctionType> reverseAdd = new HashMap<AddValType, FunctionType>();
  private Map<MulValType, FunctionType> forwardMul = new HashMap<MulValType, FunctionType>();
  private Map<MulValType, FunctionType> reverseMul = new HashMap<MulValType, FunctionType>();
  private Map<RelValType, FunctionType> normalSkip = new HashMap<RelValType, FunctionType>();
  private Map<RelValType, FunctionType> reverseSkip = new HashMap<RelValType, FunctionType>();

  private int codePos; /* position to plant next instruction */

  /*Class member methods for all phases */
  private void init() {
    /* initialisation of lexical analysis variables */
    lineNumber = 0;
    lineSize = 0;
    linePos = 0;
    sourceCode = new ArrayList<String>();
    errors = 0;
    firstLexeme = new Lexeme(LexemeType.dot);
    lexeme = new Lexeme(LexemeType.unknown);
    lastLexeme = new Lexeme(LexemeType.unknown);
    keywords.clear();
    for (LexemeType lexemeType = LexemeType.beginlexeme; lexemeType != LexemeType.unknown; lexemeType = lexemeType.next()) {
      keywords.put(lexemeType.getValue(), lexemeType);
    }


    /* initialisation of syntax analysis variables */
    startExp.clear();
    startExp.add(LexemeType.lbracket);
    startExp.add(LexemeType.identifier);
    startExp.add(LexemeType.constant);
    startExp.add(LexemeType.readlexeme);
    startBlock.clear();
    startBlock.add(LexemeType.beginlexeme);
    startBlock.add(LexemeType.identifier);
    startBlock.add(LexemeType.iflexeme);
    startBlock.add(LexemeType.whilelexeme);
    startBlock.add(LexemeType.writelexeme);

    /* initialisation of semantic analysis variables */
    identifiers.init();

    /* initialisation of code generation variables */
    accInUse = false;
    codePos = 0;
    forwardAdd.clear();
    reverseAdd.clear();
    forwardMul.clear();
    reverseMul.clear();
    normalSkip.clear();
    reverseSkip.clear();
    storeInstruction.clear();

    forwardAdd.put(AddValType.add, FunctionType.accPlus);
    forwardAdd.put(AddValType.sub, FunctionType.accMinus);
    reverseAdd.put(AddValType.add, FunctionType.accPlus);
    reverseAdd.put(AddValType.sub, FunctionType.minusAcc);

    forwardMul.put(MulValType.muld, FunctionType.accTimes);
    forwardMul.put(MulValType.divd, FunctionType.accDiv);
    reverseMul.put(MulValType.muld, FunctionType.accTimes);
    reverseMul.put(MulValType.divd, FunctionType.divAcc);

    normalSkip.put(RelValType.eq, FunctionType.brNe);
    normalSkip.put(RelValType.ne, FunctionType.brEq);
    normalSkip.put(RelValType.gt, FunctionType.brLe);
    normalSkip.put(RelValType.lt, FunctionType.brGe);
    normalSkip.put(RelValType.ge, FunctionType.brLt);
    normalSkip.put(RelValType.le, FunctionType.brGt);
    reverseSkip.put(RelValType.eq, FunctionType.brNe);
    reverseSkip.put(RelValType.ne, FunctionType.brEq);
    reverseSkip.put(RelValType.gt, FunctionType.brGe);
    reverseSkip.put(RelValType.lt, FunctionType.brLe);
    reverseSkip.put(RelValType.ge, FunctionType.brGt);
    reverseSkip.put(RelValType.le, FunctionType.brLt);
  }
  
  private void error(int n) {
    errors++;
    if (lastLinePrinted != lineNumber) {
      //when in debug mode, make sure error message starts at a new line
      if (debugMode) System.out.println();
      System.out.println(fileName + ":" + lineNumber);
      System.out.print(line); //when line of source code was read, it was extended with a linefeed.
      lastLinePrinted = lineNumber;
    }
    for (int i=0; i<linePos-1; i++) {
      System.out.print(' ');
    }
    System.out.print('^');
    switch (n) {
      case 0 : System.out.println("error opening file " + fileName);break;
      case 1 : System.out.println("end of input encountered");break;
      case 2 : System.out.println("line too long; max width=" + MAX_LINE_WIDTH);break;
      case 3 : System.out.print("unexpected symbol;");break;
      case 4 : System.out.println("unknown character");break;
      case 5 : System.out.println("'=' expected after ':' ");break;
      case 6 : System.out.print("unknown keyword : ");break;
      case 7 : System.out.println("lexeme skipped after error");break;
      case 8 : System.out.println("variable already declared");break;
      case 9 : System.out.println("variable not declared");break;
      case 10 : System.out.println("code overflow");break;
      case 11 : System.out.println("lexemetype is null");break;
      case 12 : System.out.println("internal compiler error during code generation");break;
      case 13 : System.out.println("constant too big"); break;
    }
  }
  
  private void getLexeme() throws IOException, FatalError {
    char ch;
    //ignore white space and comments
    ch = getChar();
    while (ch == ' ' || ch == '\t' || ch == '\n' || (ch == '/' && (nextChar() == '*' || nextChar() == '/'))) {
      if (ch == '/' && nextChar() == '*') {
        ch = getChar();
        ch = getChar();
        while (ch != '*' || nextChar() != '/') {
          ch = getChar();
        }
        ch = getChar();
      } else if (ch == '/' && nextChar() == '/') {
        ch = getChar();
        while (nextChar() != '\n') {
          ch = getChar();
        }
      }
      ch = getChar();
    }
    if (ch >= '0' && ch <= '9') {
      /* try to recognise a constant */
      lexeme.type = LexemeType.constant;
      lexeme.constVal = (int)ch - (int)'0';
      boolean noError = true;
      while (nextChar() >= '0' && nextChar() <= '9' && noError) {
        ch = getChar();
        lexeme.constVal = lexeme.constVal * 10 + ((int)ch - (int)'0');
        //assumption: lexeme.constVal can be larger than MAX_CONSTANT.
        if (lexeme.constVal > MAX_CONSTANT) {
          noError = false;
        }
      }
      if (!noError) {
        /* constant too big */
        error(13);
        /* eat up remainder of constant */
        while (ch >= '0' && ch <= '9') {
          ch = getChar();
        }
      }
    } else if (VALID_IDENTIFIER_CHARACTERS.contains("" + ch)){
      /* try to recognise an identifier or a keyword */
      String name = String.valueOf(ch);
      int charno = 0;
      while ( VALID_IDENTIFIER_CHARACTERS.contains("" + nextChar()) && charno <= MAX_IDENTIFIER_LENGTH) {
        if (charno <= MAX_IDENTIFIER_LENGTH) {
          name += String.valueOf(getChar());
          charno++;
        } else {
          ch = getChar();
        }
      }
      /* separate identifiers from keywords */
      LexemeType keyword = keywords.get(name);
      if (keyword == null) {
        lexeme.type = LexemeType.identifier;
      }
      else {
        lexeme.type = keyword;
      }
      lexeme.idVal = name;
    } else {
      /* try to recognise keywords  - , ; := ( ) + - * / <=> */
      switch (ch) {
        case '.' : lexeme.type = LexemeType.dot; break;
        case ',' : lexeme.type = LexemeType.comma; break;
        case ';' : lexeme.type = LexemeType.semicolon; break;
        case ':' :
          if (nextChar() == '=') {
            ch = getChar();
            lexeme.type = LexemeType.assign;
          } else {
            lexeme.type = LexemeType.unknown;
            error(5); /* : not followed by = */
          }
          break;
        case '(' : lexeme.type = LexemeType.lbracket; break;
        case ')' : lexeme.type = LexemeType.rbracket; break;
        case '+' :
          lexeme.type = LexemeType.addop;
          lexeme.addVal = AddValType.add;
          break;
        case '-' :
          lexeme.type = LexemeType.addop;
          lexeme.addVal = AddValType.sub;
          break;
        case '*' :
          lexeme.type = LexemeType.mulop;
          lexeme.mulVal = MulValType.muld;
          break;
        case '/' :
          lexeme.type = LexemeType.mulop;
          lexeme.mulVal = MulValType.divd;
          break;
        case '<' :
          lexeme.type = LexemeType.relop;
          ch = nextChar();
          if (nextChar() == '=') {
            ch = getChar();
            lexeme.relVal = RelValType.le;
          } else if (nextChar() == '>') {
            ch = getChar();
            lexeme.relVal = RelValType.ne;
          } else {
            lexeme.relVal = RelValType.lt;
          }
          break;
        case '=' :
          lexeme.type = LexemeType.relop;
          lexeme.relVal = RelValType.eq;
          break;
        case '>' :
          lexeme.type = LexemeType.relop;
          if (nextChar() == '=') {
            ch = getChar();
            lexeme.relVal = RelValType.ge;
          } else {
            lexeme.relVal = RelValType.gt;
          }
          break;
        default :
          lexeme.type = LexemeType.unknown;
          error(4); /* unknown characters */
      }
    }
    debug("\ngetLexeme: " + lexeme.makeString(identifiers.getId(lexeme.idVal)));
  }

  private char getChar() throws IOException, FatalError {
    char result = nextChar();
    linePos++;
    return result;
  }
  
  private char nextChar() throws IOException, FatalError {
    if (linePos >= lineSize) {
      line = input.readLine();
      
      if (line == null) {
        throw new FatalError(1); //end of file encountered
      };
      
      //when in debug mode, make sure the echoed source code starts on a new line.
      debug("\n");
      debug(line);
      sourceCode.add(line);
      
      lineSize = line.length();
      if (lineSize > MAX_LINE_WIDTH) {
        throw new FatalError(2); //line too long
      }
      line += "\n";
      lineSize++;
      lineNumber++;
      linePos = 0;
    }
    return line.charAt(linePos);
  }
  
  /*Class member methods for syntax analysis phase */
  private boolean checkOrSkip(EnumSet<LexemeType> okSet, EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\ncheckOrSkip: start");
    boolean orFlag = false;
    boolean result = false;
    if (okSet.contains(lexeme.type)) {
      debug("\ncheckOrSkip: lexeme \"" + lexeme.type + "\" in okSet " + okSet);
      result = true;
    } else {
      error(3); /* okset expected */
      System.out.println(" found " + lexeme.type + ", expected " + okSet);
      if (stopSet.size() > 0) {
        while (!stopSet.contains(lexeme.type)) {
          error(7); /* lexeme skipped after error */
          getLexeme();
        }
      }
    }
    debug("\ncheckOrSkip: end");
    return result;
  }
  
  private void idList(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nidlist: start");
    boolean cont;
    EnumSet<LexemeType> continueSet = EnumSet.of(LexemeType.comma, LexemeType.identifier);
    EnumSet<LexemeType> ignoreSet = EnumSet.of(LexemeType.semicolon, LexemeType.comma);
    EnumSet<LexemeType> followSet1 = stopSet.clone();
    followSet1.addAll(ignoreSet);
    EnumSet<LexemeType> followSet2 = stopSet.clone();
    followSet2.addAll(continueSet);
    
    do {
      if (checkOrSkip(EnumSet.of(LexemeType.identifier), followSet1)) {
        /* next line + debug message is part of semantic analysis */
        if (!identifiers.declareId(lexeme.idVal)) error(8);
        debug("\nidlist: var declared: " + lexeme.makeString(identifiers.getId(lexeme.idVal)));
        getLexeme();
      }
      checkOrSkip(ignoreSet, followSet2);
      cont = continueSet.contains(lexeme.type);
      if (lexeme.type == LexemeType.comma) {
        debug("\nidlist: , skipped");
        getLexeme();
      }
    }
    while (cont);
    
    debug("\nidlist: end of id list reached");
    if (lexeme.type == LexemeType.semicolon) {
      debug("\nidlist: ; skipped");
      debug("\nidlist: end");
      getLexeme();
    } else {
      debug("\nidlist: end");
    }
  }
  
  private Operand factor(EnumSet<LexemeType> stopSet, Operand operand) throws IOException, FatalError {
    operand.opType = OperandType.stack;
    if (checkOrSkip(startExp, stopSet)) {
      if (lexeme.type == LexemeType.identifier) {
        /* part of semantic analysis */
        if (!identifiers.checkId(lexeme.idVal)) error(9); /* variable not declared */
        /* part of code generation */
        operand.opType = OperandType.var;
        operand.opValue = identifiers.getId(lexeme.idVal);
        /* part of lexical analysis */
        getLexeme();
      } else if (lexeme.type == LexemeType.constant) {
        /* part of code generation */
        operand.opType = OperandType.constant;
        operand.opValue = lexeme.constVal;
        /* part of lexical analysis */
        getLexeme();
      } else if (lexeme.type == LexemeType.lbracket) {
        getLexeme();
        EnumSet<LexemeType> stopSetCopy = stopSet.clone();
        stopSetCopy.add(LexemeType.rbracket);
        operand = expression(stopSetCopy, operand);
        if (checkOrSkip(EnumSet.of(LexemeType.rbracket), stopSet)) {
          getLexeme();
        }
      } else if (lexeme.type == LexemeType.readlexeme) {
        getLexeme();
        /* part of code generation */
        if (accInUse) {
          plant(new Instruction(FunctionType.accStore, operand));
        }
        plant(new Instruction(FunctionType.read));
        accInUse = true;
      }
    }
    return operand;
  }
  
  private Operand term(EnumSet<LexemeType> stopSet, Operand operand) throws IOException, FatalError {
    /* part of code generation */
    MulValType operator;
    Operand rOperand = new Operand(null, null);

    /* part of lexical analysis */
    EnumSet<LexemeType> followSet = stopSet.clone();
    followSet.add(LexemeType.mulop);
    operand = factor(followSet, operand);
    while (lexeme.type == LexemeType.mulop) {
      /* part of code generation */
      plantAccLoad(operand);
      operand.opType = OperandType.stack;
      operator = lexeme.mulVal;
      /* part of lexical analysis */
      getLexeme();
      rOperand = factor(followSet, rOperand);
      /* part of code generation */
      if (rOperand.opType == OperandType.stack) {
        plant(new Instruction(reverseMul.get(operator), rOperand));
      } else {
        plant(new Instruction(forwardMul.get(operator), rOperand));
      }
    }
    return operand;
  }
  
  private Operand expression(EnumSet<LexemeType> stopSet, Operand operand) throws IOException, FatalError {
    debug("\nexpression: start with stopSet = " + stopSet);
    /* part of lexical analysis */
    AddValType operator;
    Operand rOperand = new Operand(null, null);
    
    /* part of lexical analysis */
    EnumSet<LexemeType> followSet = stopSet.clone();
    followSet.add(LexemeType.addop);
    operand = term(followSet, operand);
    while (lexeme.type == LexemeType.addop) {
      /* part of code generation */
      plantAccLoad(operand);
      operand.opType = OperandType.stack;
      operator = lexeme.addVal;
      
      /* part of lexical analysis */
      getLexeme();
      rOperand = term(followSet, rOperand);
      
      /* part of code generation */
      if (rOperand.opType == OperandType.stack) {
        plant(new Instruction(reverseAdd.get(operator), rOperand));
      } else {
        plant(new Instruction(forwardAdd.get(operator), rOperand));
      }
    }
    debug("\nexpression: end");
    return operand;
  }
  
  /**
  * returns address of if label
  **/
  private int comparison(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    /* part of code generation */
    RelValType compareOp;
    int ifLabel;
    /* part of lexical analysis */
    EnumSet<LexemeType> localSet = stopSet.clone();
    localSet.add(LexemeType.relop);
    Operand leftOperand = expression(localSet, new Operand(null, null));

    /* part of code generation */
    plantAccLoad(leftOperand);

    /* part of lexical analysis */
    localSet = stopSet.clone();
    localSet.addAll(startExp);
    if (checkOrSkip(EnumSet.of(LexemeType.relop), localSet)) {
      /* part of code generation */
      compareOp = lexeme.relVal;
      /* part of lexical analysis */
      getLexeme();
    } else {
      /* part of code generation */
      compareOp = RelValType.eq;
    }
    
    /* part of lexical analysis */
    localSet = stopSet.clone();
    localSet.addAll(startBlock);
    localSet.remove(LexemeType.identifier);
    Operand rightOperand = expression(localSet, new Operand(null, null));

    /* part of code generation */
    plant(new Instruction(FunctionType.accCompare, rightOperand));
    ifLabel = saveForwardLabel();
    Operand labelOperand = new Operand(OperandType.label, 0);
    if (rightOperand.opType != OperandType.stack) {
      plant(new Instruction(normalSkip.get(compareOp), labelOperand));
    } else {
      plant(new Instruction(reverseSkip.get(compareOp), labelOperand));
    }
    return ifLabel;
  }
  
  private void statement(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nstatement: start with stopSet = " + stopSet);
    /* part of code generation */
    accInUse = false;

    /* part of lexical analysis */
    EnumSet<LexemeType> localSet = stopSet.clone();
    localSet.addAll(startBlock);
    if (checkOrSkip(localSet, stopSet)) {
      if (lexeme.type == LexemeType.identifier) {
        debug("\nstatement: start assignment statement");
        /* part of semantic analysis */
        if (!identifiers.checkId(lexeme.idVal)) error(9); /* variable not declared */
 
        /* part of code generation */
        int assignTo = identifiers.getId(lexeme.idVal);
        /* part of lexical analysis */
        getLexeme();
        
        localSet = stopSet.clone();
        localSet.addAll(startExp);
        if (checkOrSkip(EnumSet.of(LexemeType.assign), localSet)) {
          getLexeme();
        }
        Operand operand = expression(stopSet, new Operand(null, null));
        debug("\nstatement: end of assignment statement");
        
        plantAccLoad(operand);
        plant(new Instruction(FunctionType.accStore, new Operand(OperandType.var, assignTo)));
      } else if (lexeme.type == LexemeType.iflexeme) {
        debug("\nstatement: start if statement");
        getLexeme();
        
        localSet = stopSet.clone();
        localSet.add(LexemeType.thenlexeme);
        localSet.addAll(startBlock);
        localSet.remove(LexemeType.identifier);
        int ifLabel = comparison(localSet);
        
        localSet = stopSet.clone();
        localSet.addAll(startBlock);
        if (checkOrSkip(EnumSet.of(LexemeType.thenlexeme), localSet)) {
          getLexeme();
        }
        block(stopSet);
        debug("\nstatement: end of if statement");

        /* part of code generation */
        plantForwardLabel(ifLabel);
      } else if (lexeme.type == LexemeType.whilelexeme) {
        debug("\nstatement: start while loop");
        getLexeme();

        /* part of code generation */
        int whileLabel = saveLabel();

        /* part of lexical analysis */
        localSet = stopSet.clone();
        localSet.add(LexemeType.dolexeme);
        localSet.addAll(startBlock);
        localSet.remove(LexemeType.identifier);
        int ifLabel = comparison(localSet);
        
        localSet = stopSet.clone();
        localSet.addAll(startBlock);
        if (checkOrSkip(EnumSet.of(LexemeType.dolexeme), localSet)) {
          getLexeme();
        }
        block(stopSet);
        debug("\nstatement: end of while loop");
        
        /* part of code generation */
        plant(new Instruction(FunctionType.br, new Operand(OperandType.label, whileLabel)));
        plantForwardLabel(ifLabel);
      } else if (lexeme.type == LexemeType.writelexeme) {
        debug("\nstatement: start write statement");
        getLexeme();

        localSet = stopSet.clone();
        localSet.add(LexemeType.rbracket);
        localSet.addAll(startExp);
        if (checkOrSkip(EnumSet.of(LexemeType.lbracket), localSet)) {
          getLexeme();
        }
        
        localSet = stopSet.clone();
        localSet.add(LexemeType.rbracket);
        Operand operand = expression(localSet, new Operand(null, null));
        
        /* part of code generation */
        plantAccLoad(operand);

        /* part of lexical analysis */
        if (checkOrSkip(EnumSet.of(LexemeType.rbracket), stopSet)) {
          getLexeme();
        }
        debug("\nstatement: end of write statement");

        /* part of code generation */
        plant(new Instruction(FunctionType.accStore, new Operand(OperandType.stack, 0)));
        plant(new Instruction(FunctionType.write));
      }
    }
    debug("\nstatement: end");
  }
  
  private void block(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nblock: start with stopSet = " + stopSet);
    EnumSet<LexemeType> stopOrStartSet = stopSet.clone();
    stopOrStartSet.addAll(startBlock);
    checkOrSkip(stopOrStartSet, stopOrStartSet);
    if (lexeme.type == LexemeType.beginlexeme) {
      getLexeme();
      
      EnumSet<LexemeType> semicolonOrEndSet = EnumSet.of(LexemeType.semicolon, LexemeType.endlexeme);
      EnumSet<LexemeType> blockSet = stopSet.clone();
      blockSet.addAll(semicolonOrEndSet);
      block(blockSet);
      
      stopOrStartSet.add(LexemeType.semicolon);
      checkOrSkip(semicolonOrEndSet, stopOrStartSet);
      
      EnumSet<LexemeType> startSet = startBlock.clone();
      startSet.add(LexemeType.semicolon);
      
      EnumSet<LexemeType> endOfBlockSet = stopSet.clone();
      endOfBlockSet.add(LexemeType.semicolon);
      endOfBlockSet.add(LexemeType.endlexeme);
      while (startSet.contains(lexeme.type)) {
        if (lexeme.type == LexemeType.semicolon) {
          getLexeme();
        }
        block(endOfBlockSet);
        checkOrSkip(semicolonOrEndSet, stopOrStartSet);
      }
      if (lexeme.type == LexemeType.endlexeme) {
        getLexeme();
      }
    } else {
      statement(stopSet);
    }
    debug("\nblock: end");
  }
  
  private void prog() throws IOException, FatalError {
    debug("\nprog: start");
    /* recognise a program */
    getLexeme();
    if (lexeme.type == LexemeType.varlexeme) {
      getLexeme();
      idList(EnumSet.of(LexemeType.beginlexeme, LexemeType.semicolon, LexemeType.dot));
    }
    do {
      block(EnumSet.of(LexemeType.dot));
    } while (!checkOrSkip(EnumSet.of(LexemeType.dot), EnumSet.noneOf(LexemeType.class)));
    debug("\nprog: end");
  }
  
  /*Class member methods for code generation phase */
  private void plantAccLoad(Operand operand) {
    if (operand.opType != OperandType.stack) {
      if (accInUse) {
          plant(new Instruction(FunctionType.stackAccLoad, operand));
        } else {
          plant(new Instruction(FunctionType.accLoad, operand));
      }
    }
    accInUse = true;
  }

  private void plant(Instruction instruction) {
    /* for debugging purposes */
    debug("\n->plant (accInUse=" + accInUse + "):");
    
    /* add original source code */
    if (!sourceCode.isEmpty()) {
      instruction.linesOfCode.addAll(sourceCode);
      sourceCode.clear();
    }

    /* insert M (virtual machine) code into memory */
    if (storeInstruction.size() >= MAX_M_CODE) {
      error (10);
      storeInstruction.clear();
    }
    storeInstruction.add(instruction);

    /* for debugging purposes */
    debug("\n" + String.format("%3d :", codePos) + instruction.toString());

    codePos++;
  };
  
  private void plantForwardLabel(int pos) {
    storeInstruction.get(pos).operand.opValue = storeInstruction.size();
    /* for debugging purposes */
    debug("\nlabel: used from " + pos);
  }

  private int saveForwardLabel() {
    /* for debugging purposes */
    debug("\nlabel used");

    return codePos;
  }

  private int saveLabel() {
    /* for debugging purposes */
    debug("\nlabel:");

    return codePos;
  }

}
