import java.io.BufferedReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

/**
 * Compiler for the miniJava programming language.
 * Inspired by the book Compiler Engineering Using Pascal by P.C. Capon and P.J. Jinks
 * and of course Java as developed by Sun.
 *
 * program        = "class" identifier "{" statements "}".
 * identifier     = "(_A-Za-z)(_A-Za-z0-9)+".
 * statements     = (statement)*.
 * statement      = assignment | writeStatement | ifStatement | forStatement | doStatement | whileStatement.
 * assignment     = [datatype] update ";".
 * datatype       = "byte" | "int".
 * update         = identifier++ | identifier-- | identifier "=" expression
 * writeStatement = "write" "(" expression ")" ";".
 * ifStatement    = "if" "(" comparison ")" block [ "else" block].
 * forStatement   = "for" "(" initialization ";" comparison ";" update ")" block.
 * initialization = "int" identifier "=" expression.
 * doStatement    = "do" block "while" "(" comparison ")" ";".
 * whileStatement = "while" "(" comparison ")" block.
 * block          = statement | "{" statements "}".
 * comparison     = expression relop expression.
 * expression     = term {addop term}.
 * term           = factor {mulop factor}.
 * factor         = identifier | constant | "read" | "(" expression ")".
 * addop          = "+" | "-".
 * mulop          = "*" | "/".
 * relop          = "==" | "!=" | ">" | ">=" | "<" | "<=".
 * constant       = "(0-9)*".
 *
 * Java style end of line comment.
 * Java style multi-line comment.
 * Multi-line comment may contain end of line comment.
 * Multi-line comment may not be nested.
 * A variable must be declared before it is used.
 * A declaration is valid within the scope within which it is defined (class, for statement, statement block) and it's sub-scopes.
 * The name of a valid declaration may only be declared once within its scope (overloading is not supported).
 * A variable declaration must include the datatype.
 * A variable of type byte takes one byte (8 bit).
 * A variable of type int takes two bytes (16 bit).
 * A variable of type byte has a range from 0 to 255.
 * A variable of type int has a range from -32768 to 32767.
 * An expression is initially evaluated in the type of the first (left most) factor.
 * A constant has a type byte if the value is between 0 and 255.
 * A byte expression is promoted to an int expression if a right-hand factor requires so.
 * The read() function returns an int value.
 * In an addop, mulop or relop the type of the lefthand operand and the right hand operand must be the same.
 * The value of the lefthand operand of an addop, mulop or relop is changed from byte to int if the type of the righthand operand is an int.
 * In an assignment the value of a byte expression can be assigned to an int variable.
 * In an assignment the value of a int expression assigned to a byte variable will be truncated.
 */
public class Compiler {
  /* global variables used by the constructor or the interface functions */
  private static boolean debugMode;
  private static boolean verboseMode;
  private static String fileName;
  private BufferedReader input;
  private ArrayList<Instruction> storeInstruction = new ArrayList<Instruction>();

  //constructor
  public Compiler(boolean debugMode, boolean verboseMode) {
    this.debugMode = debugMode;
    this.verboseMode = verboseMode;
  }
  
  /* Class member methods for lexical analysis phase */
  public ArrayList<Instruction> compile(String fileName, BufferedReader input) throws IOException {
    if (verboseMode) System.out.println("debugMode = " + debugMode);

    this.fileName = fileName;
    this.input = input;
    try {
      init();
      prog();
      plant(new Instruction(FunctionType.stop));
    } catch (FatalError e) {
      error(e.getErrorNumber());
      System.exit(1);
    }
    
    if (errors != 0) { 
      storeInstruction.clear();
      codePos = 0;
    }
    if (verboseMode || (errors != 0) ) {
      System.out.println();
      System.out.print(errors);
      if (errors == 1) {
        System.out.println(" error.");
      } else {
        System.out.println(" errors.");
      }
    }
    return storeInstruction;
  }
  
  private void debug(String message) {
    if (debugMode) {
      System.out.print(message);
    }
  }

  /* 
   * variable containing the branch instructions known by the M machine as generated by the P language.
   * variable used during the code generation phase.
   */
  public EnumSet<FunctionType> brFunctions = EnumSet.of(
    FunctionType.br
    , FunctionType.brEq
    , FunctionType.brNe
    , FunctionType.brLt
    , FunctionType.brLe
    , FunctionType.brGt
    , FunctionType.brGe
    );

  /* Constants and class member variables for lexical analysis phase */
  private static final int MAX_LINE_WIDTH = 128;
  private static final int MAX_IDENTIFIER_LENGTH = MAX_LINE_WIDTH;
  private static final int MAX_BYT_CONSTANT = 255; //8 bit constant
  private static final int MAX_INT_CONSTANT = 65535; //16 bit constant
  private static final String VALID_IDENTIFIER_CHARACTERS ="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
  private String line;
  private int lineNumber;
  private int lastLinePrinted;
  private int lineSize;
  private int linePos;
  private ArrayList<String> sourceCode;
  private Lexeme lexeme, firstLexeme, lastLexeme;
  private Map<String, LexemeType> keywords = new HashMap<String, LexemeType>();
  private int errors;

  /* Constants and class member variables for syntax analysis phase */
  private EnumSet<LexemeType> startStatement = EnumSet.of(
      LexemeType.identifier
    , LexemeType.bytelexeme
    , LexemeType.intlexeme
    , LexemeType.writelexeme
    , LexemeType.iflexeme
    , LexemeType.forlexeme
    , LexemeType.dolexeme
    , LexemeType.whilelexeme
  );
  private EnumSet<LexemeType> startAssignment = EnumSet.of(
      LexemeType.identifier
    , LexemeType.bytelexeme
    , LexemeType.intlexeme
  );
  private EnumSet<LexemeType> startExp = EnumSet.of(
      LexemeType.lbracket
    , LexemeType.identifier
    , LexemeType.constant
    , LexemeType.readlexeme
  );

  /* Constants and class member variables for semantic analysis phase */
  private Identifiers identifiers = new Identifiers();
 
  /* Constants and class member variables for code generation phase */
  private static final int NULL_OP = 0;
  private static final int MAX_M_CODE = 512;
  private boolean acc16InUse;
  private boolean acc8InUse;

  private Map<AddValType, FunctionType> forwardAdd16 = new HashMap<AddValType, FunctionType>();
  private Map<AddValType, FunctionType> reverseAdd16 = new HashMap<AddValType, FunctionType>();
  private Map<MulValType, FunctionType> forwardMul16 = new HashMap<MulValType, FunctionType>();
  private Map<MulValType, FunctionType> reverseMul16 = new HashMap<MulValType, FunctionType>();

  private Map<AddValType, FunctionType> forwardAdd8 = new HashMap<AddValType, FunctionType>();
  private Map<AddValType, FunctionType> reverseAdd8 = new HashMap<AddValType, FunctionType>();
  private Map<MulValType, FunctionType> forwardMul8 = new HashMap<MulValType, FunctionType>();
  private Map<MulValType, FunctionType> reverseMul8 = new HashMap<MulValType, FunctionType>();

  private Map<RelValType, FunctionType> normalSkip = new HashMap<RelValType, FunctionType>();
  private Map<RelValType, FunctionType> reverseSkip = new HashMap<RelValType, FunctionType>();
  private int codePos; /* position to plant next instruction */

  /*Class member methods for all phases */
  private void init() {
    /* initialisation of lexical analysis variables */
    lineNumber = 0;
    lineSize = 0;
    linePos = 0;
    sourceCode = new ArrayList<String>();
    errors = 0;
    firstLexeme = new Lexeme(LexemeType.constant);
    lexeme = new Lexeme(LexemeType.unknown);
    lastLexeme = new Lexeme(LexemeType.unknown);
    keywords.clear();
    for (LexemeType lexemeType = LexemeType.beginlexeme; lexemeType != LexemeType.unknown; lexemeType = lexemeType.next()) {
      keywords.put(lexemeType.getValue(), lexemeType);
    }


    /* initialisation of syntax analysis variables */

    /* initialisation of semantic analysis variables */
    identifiers.init();

    /* initialisation of code generation variables */
    acc16InUse = false;
    acc8InUse = false;
    codePos = 0;

    forwardAdd16.clear();
    reverseAdd16.clear();
    forwardMul16.clear();
    reverseMul16.clear();

    forwardAdd8.clear();
    reverseAdd8.clear();
    forwardMul8.clear();
    reverseMul8.clear();

    normalSkip.clear();
    reverseSkip.clear();
    storeInstruction.clear();

    forwardAdd16.put(AddValType.add, FunctionType.acc16Plus);
    forwardAdd16.put(AddValType.sub, FunctionType.acc16Minus);
    reverseAdd16.put(AddValType.add, FunctionType.acc16Plus);
    reverseAdd16.put(AddValType.sub, FunctionType.minusAcc16);

    forwardAdd8.put(AddValType.add, FunctionType.acc8Plus);
    forwardAdd8.put(AddValType.sub, FunctionType.acc8Minus);
    reverseAdd8.put(AddValType.add, FunctionType.acc8Plus);
    reverseAdd8.put(AddValType.sub, FunctionType.minusAcc8);

    forwardMul16.put(MulValType.muld, FunctionType.acc16Times);
    forwardMul16.put(MulValType.divd, FunctionType.acc16Div);
    reverseMul16.put(MulValType.muld, FunctionType.acc16Times);
    reverseMul16.put(MulValType.divd, FunctionType.divAcc16);

    forwardMul8.put(MulValType.muld, FunctionType.acc8Times);
    forwardMul8.put(MulValType.divd, FunctionType.acc8Div);
    reverseMul8.put(MulValType.muld, FunctionType.acc8Times);
    reverseMul8.put(MulValType.divd, FunctionType.divAcc8);

    normalSkip.put(RelValType.eq, FunctionType.brNe);
    normalSkip.put(RelValType.ne, FunctionType.brEq);
    normalSkip.put(RelValType.gt, FunctionType.brLe);
    normalSkip.put(RelValType.lt, FunctionType.brGe);
    normalSkip.put(RelValType.ge, FunctionType.brLt);
    normalSkip.put(RelValType.le, FunctionType.brGt);
    reverseSkip.put(RelValType.eq, FunctionType.brNe);
    reverseSkip.put(RelValType.ne, FunctionType.brEq);
    reverseSkip.put(RelValType.gt, FunctionType.brGe);
    reverseSkip.put(RelValType.lt, FunctionType.brLe);
    reverseSkip.put(RelValType.ge, FunctionType.brGt);
    reverseSkip.put(RelValType.le, FunctionType.brLt);
  }
  
  private void error() {
    errors++;
    if (lastLinePrinted != lineNumber) {
      //when in debug mode, make sure error message starts at a new line
      if (debugMode) System.out.println();
      System.out.println(fileName + ":" + lineNumber);
      System.out.print(line); //when line of source code was read, it was extended with a linefeed.
      lastLinePrinted = lineNumber;
    }
    for (int i=0; i<linePos-1; i++) {
      System.out.print(' ');
    }
    System.out.print('^');
  }
  
  private void error(int n) {
    error();
    switch (n) {
      case 0 : System.out.println("error opening file " + fileName);break;
      case 1 : System.out.println("end of input encountered");break;
      case 2 : System.out.println("line too long; max width=" + MAX_LINE_WIDTH);break;
      case 3 : System.out.print("unexpected symbol;");break;
      case 4 : System.out.println("unknown character");break;
      case 5 : System.out.println("'=' expected after '=' or '!' ");break;
      case 6 : System.out.print("unknown keyword : ");break;
      case 7 : System.out.println("lexeme skipped after error");break;
      case 8 : System.out.println("variable already declared");break;
      case 9 : System.out.println("variable not declared");break;
      case 10 : System.out.println("code overflow");break;
      case 11 : System.out.println("lexemetype is null");break;
      case 12 : System.out.println("internal compiler error during code generation");break;
      case 13 : System.out.println("constant too big"); break;
      case 14 : System.out.println("incompatible datatype between assignment variable and expression"); break;
      case 15 : System.out.println("incompatible datatype in write statement"); break;
    }
  }
  
  private void getLexeme() throws IOException, FatalError {
    char ch;
    //ignore white space and comments
    ch = getChar();
    while (ch == ' ' || ch == '\t' || ch == '\n' || (ch == '/' && (nextChar() == '*' || nextChar() == '/'))) {
      if (ch == '/' && nextChar() == '*') {
        ch = getChar();
        ch = getChar();
        while (ch != '*' || nextChar() != '/') {
          ch = getChar();
        }
        ch = getChar();
      } else if (ch == '/' && nextChar() == '/') {
        ch = getChar();
        while (nextChar() != '\n') {
          ch = getChar();
        }
      }
      ch = getChar();
    }

    if (ch >= '0' && ch <= '9') {
      /* try to recognise a constant */
      lexeme.type = LexemeType.constant;
      lexeme.constVal = (int)ch - (int)'0';
      boolean error = false;
      while (nextChar() >= '0' && nextChar() <= '9' && !error) {
        ch = getChar();
        lexeme.constVal = lexeme.constVal * 10 + ((int)ch - (int)'0');
        //assumption: lexeme.constVal can be larger than MAX_INT_CONSTANT.
        if (lexeme.constVal > MAX_INT_CONSTANT) {
          error = true;
        }
      }
      if (error) {
        /* constant too big */
        error(13);
        /* eat up remainder of constant */
        while (ch >= '0' && ch <= '9') {
          ch = getChar();
        }
      }
      lexeme.datatype = (lexeme.constVal <= MAX_BYT_CONSTANT) ? Datatype.byt : Datatype.integer;
    } else if (ch == '{') {
      lexeme.type = LexemeType.beginlexeme;
    } else if (ch == '}') {
      lexeme.type = LexemeType.endlexeme;
    }else if (VALID_IDENTIFIER_CHARACTERS.contains("" + ch)){
      /* try to recognise an identifier or a keyword */
      String name = String.valueOf(ch);
      int charno = 0;
      while ( VALID_IDENTIFIER_CHARACTERS.contains("" + nextChar()) && charno <= MAX_IDENTIFIER_LENGTH) {
        if (charno <= MAX_IDENTIFIER_LENGTH) {
          name += String.valueOf(getChar());
          charno++;
        } else {
          ch = getChar();
        }
      }
      /* separate identifiers from keywords */
      LexemeType keyword = keywords.get(name);
      if (keyword == null) {
        lexeme.type = LexemeType.identifier;
      }
      else {
        lexeme.type = keyword;
      }
      lexeme.idVal = name;
    } else {
      /* try to recognise keywords or , ; = ( ) + - * / <!=> */
      switch (ch) {
        case ',' : lexeme.type = LexemeType.comma; break;
        case ';' : lexeme.type = LexemeType.semicolon; break;
        case '(' : lexeme.type = LexemeType.lbracket; break;
        case ')' : lexeme.type = LexemeType.rbracket; break;
        case '+' :
          lexeme.type = LexemeType.addop;
          lexeme.addVal = AddValType.add;
          break;
        case '-' :
          lexeme.type = LexemeType.addop;
          lexeme.addVal = AddValType.sub;
          break;
        case '*' :
          lexeme.type = LexemeType.mulop;
          lexeme.mulVal = MulValType.muld;
          break;
        case '/' :
          lexeme.type = LexemeType.mulop;
          lexeme.mulVal = MulValType.divd;
          break;
        case '=' :
          if (nextChar() == '=') {
            ch = getChar();
            lexeme.type = LexemeType.relop;
            lexeme.relVal = RelValType.eq;
          } else {
            lexeme.type = LexemeType.assign;
          }
          break;
        case '!' :
          if (nextChar() == '=') {
            ch = getChar();
            lexeme.type = LexemeType.relop;
            lexeme.relVal = RelValType.ne;
          } else {
            lexeme.type = LexemeType.unknown;
            error(5); /* ! not followed by = */
          }
          break;
        case '>' :
          lexeme.type = LexemeType.relop;
          if (nextChar() == '=') {
            ch = getChar();
            lexeme.relVal = RelValType.ge;
          } else {
            lexeme.relVal = RelValType.gt;
          }
          break;
        case '<' :
          lexeme.type = LexemeType.relop;
          if (nextChar() == '=') {
            ch = getChar();
            lexeme.relVal = RelValType.le;
          } else {
            lexeme.relVal = RelValType.lt;
          }
          break;
        default :
          lexeme.type = LexemeType.unknown;
          error(4); /* unknown characters */
      }
    }
    debug("\ngetLexeme: " + lexeme.makeString(identifiers.getId(lexeme.idVal)));
  } //getLexeme()

  private char getChar() throws IOException, FatalError {
    char result = nextChar();
    linePos++;
    return result;
  }
  
  private char nextChar() throws IOException, FatalError {
    if (linePos >= lineSize) {
      line = input.readLine();
      
      if (line == null) {
        throw new FatalError(1); //end of file encountered
      };
      
      //when in debug mode, make sure the echoed source code starts on a new line.
      debug("\n");
      debug(line);
      sourceCode.add(line);
      
      //add P source code as comment to M machine code.
      plant(new Instruction(FunctionType.comment, new Operand(Datatype.string, OperandType.constant, line)));

      lineSize = line.length();
      if (lineSize > MAX_LINE_WIDTH) {
        throw new FatalError(2); //line too long
      }
      line += "\n";
      lineSize++;
      lineNumber++;
      linePos = 0;
    }
    return line.charAt(linePos);
  }
  
  /*Class member methods for syntax analysis phase */
  private boolean checkOrSkip(EnumSet<LexemeType> okSet, EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\ncheckOrSkip: start");
    boolean orFlag = false;
    boolean result = false;
    if (okSet.contains(lexeme.type)) {
      debug("\ncheckOrSkip: lexeme \"" + lexeme.type + "\" in okSet " + okSet);
      result = true;
    } else {
      error(3); /* okset expected */
      System.out.println(" found " + lexeme.type + ", expected " + okSet);
      if (stopSet.size() > 0) {
        while (!stopSet.contains(lexeme.type)) {
          error(7); /* lexeme skipped after error */
          getLexeme();
        }
      }
    }
    debug("\ncheckOrSkip: end");
    return result;
  }
  
  //factor = identifier | constant | "read" | "(" expression ")".
  private Operand factor(EnumSet<LexemeType> stopSet, Operand operand) throws IOException, FatalError {
    operand.opType = OperandType.stack;
    if (checkOrSkip(startExp, stopSet)) {
      if (lexeme.type == LexemeType.identifier) {
        /* part of semantic analysis */
        if (!identifiers.checkId(lexeme.idVal)) error(9); /* variable not declared */
        /* part of code generation */
        operand.opType = OperandType.var;
        Variable var = identifiers.getId(lexeme.idVal);
        operand.intValue = var.getAddress();
        operand.datatype = var.getDatatype();
        /* part of lexical analysis */
        getLexeme();
      } else if (lexeme.type == LexemeType.constant) {
        /* part of code generation */
        operand.opType = OperandType.constant;
        operand.intValue = lexeme.constVal;
        operand.datatype = lexeme.datatype;
        /* part of lexical analysis */
        getLexeme();
      } else if (lexeme.type == LexemeType.readlexeme) {
        getLexeme();
        /* 
         * Part of code generation.
         * The read() function always returns an int value.
         */
        if (acc16InUse) {
          plant(new Instruction(FunctionType.acc16Store, operand));
        }
        plant(new Instruction(FunctionType.read));
        operand.datatype = Datatype.integer;
        acc16InUse = true;
      } else if (lexeme.type == LexemeType.lbracket) {
        getLexeme();
        EnumSet<LexemeType> stopSetCopy = stopSet.clone();
        stopSetCopy.add(LexemeType.rbracket);
        operand = expression(stopSetCopy, operand);
        if (checkOrSkip(EnumSet.of(LexemeType.rbracket), stopSet)) {
          getLexeme();
        }
      }
    }
    return operand;
  } //factor()
  
  private Operand term(EnumSet<LexemeType> stopSet, Operand operand) throws IOException, FatalError {
    /* part of code generation */
    MulValType operator;
    Operand rOperand = new Operand(Datatype.unknown);

    /* part of lexical analysis */
    EnumSet<LexemeType> followSet = stopSet.clone();
    followSet.add(LexemeType.mulop);
    operand = factor(followSet, operand);
    while (lexeme.type == LexemeType.mulop) {
      /* part of code generation */
      plantAccLoad(operand);
      operand.opType = OperandType.stack;
      operator = lexeme.mulVal;
      /* part of lexical analysis */
      getLexeme();
      rOperand = factor(followSet, rOperand);
      /* part of code generation */
      if (rOperand.opType == OperandType.stack) {
        plant(new Instruction(reverseMul16.get(operator), rOperand));
      } else {
        plant(new Instruction(forwardMul16.get(operator), rOperand));
      }
    }
    return operand;
  } //term()
  
  private Operand expression(EnumSet<LexemeType> stopSet, Operand operand) throws IOException, FatalError {
    debug("\nexpression: start with stopSet = " + stopSet);
    /* part of lexical analysis */
    AddValType operator;
    Operand rOperand = new Operand(Datatype.unknown);
    
    /* part of lexical analysis */
    EnumSet<LexemeType> followSet = stopSet.clone();
    followSet.add(LexemeType.addop);
    operand = term(followSet, operand);
    debug("\nexpression: operand.datatype = " + operand.datatype + ", acc16InUse = " + acc16InUse + ", acc8InUse = " + acc8InUse + ", rOperand.datatype = " + rOperand.datatype);
    while (lexeme.type == LexemeType.addop) {
      /* part of code generation */
      plantAccLoad(operand);
      operand.opType = OperandType.stack;
      operator = lexeme.addVal;
      
      /* part of lexical analysis */
      getLexeme();
      rOperand = term(followSet, rOperand);
      
      /* part of code generation */
      debug("\nexpression loop: operand.datatype = " + operand.datatype + ", acc16InUse = " + acc16InUse + ", acc8InUse = " + acc8InUse + ", rOperand.datatype = " + rOperand.datatype + ", rOperand.opType = " + rOperand.opType);
      if (operand.datatype == Datatype.byt) {
        if (rOperand.datatype == Datatype.byt) {
          plant(new Instruction(forwardAdd8.get(operator), rOperand));
        } else if (rOperand.datatype == Datatype.integer) {
          plant(new Instruction(FunctionType.acc8ToAcc16));
          operand.datatype = Datatype.integer;
          plant(new Instruction(forwardAdd16.get(operator), rOperand));
        }
      } else if (operand.datatype == Datatype.integer) {
        if (rOperand.datatype == Datatype.integer) {
          plant(new Instruction(forwardAdd16.get(operator), rOperand));
        } else if (rOperand.datatype == Datatype.byt) {
          plantAccLoad(rOperand);
          plant(new Instruction(forwardAdd16.get(operator), new Operand(Datatype.byt, OperandType.acc8)));
        }
      }
      /*
      if (rOperand.opType == OperandType.stack) {
        plant(new Instruction(reverseAdd16.get(operator), rOperand));
      } else if (rOperand.datatype == Datatype.byt && acc8InUse) {
          plant(new Instruction(forwardAdd8.get(operator), rOperand));
      } else {
        plant(new Instruction(forwardAdd16.get(operator), rOperand));
      }
      */
    }
    debug("\nexpression: end");
    return operand;
  } //expression()
  
  //parse a comparison, and return the address of the jump instruction to be filled with the label at the end of the control statement block.
  //comparison = expression relop expression
  private int comparison(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\ncomparison: start with stopSet = " + stopSet);

    /* part of code generation */
    int ifLabel;
    
    /* part of lexical analysis */
    EnumSet<LexemeType> localSet = stopSet.clone();
    localSet.add(LexemeType.relop);
    Operand leftOperand = expression(localSet, new Operand(Datatype.unknown));

    /* part of code generation */
    plantAccLoad(leftOperand);

    /* part of lexical analysis */
    localSet = stopSet.clone();
    localSet.addAll(startExp);
    RelValType compareOp;
    if (checkOrSkip(EnumSet.of(LexemeType.relop), localSet)) {
      /* part of code generation */
      compareOp = lexeme.relVal;
      /* part of lexical analysis */
      getLexeme();
    } else {
      /* part of code generation */
      compareOp = RelValType.eq;
    }
    
    /* part of lexical analysis */
    localSet = stopSet.clone();
    localSet.addAll(startStatement);
    localSet.remove(LexemeType.identifier);
    Operand rightOperand = expression(localSet, new Operand(Datatype.unknown));

    /* part of code generation */
    plant(new Instruction(FunctionType.acc16Compare, rightOperand));
    ifLabel = saveForwardLabel();
    Operand labelOperand = new Operand(Datatype.integer, OperandType.label, 0);
    if (rightOperand.opType != OperandType.stack) {
      plant(new Instruction(normalSkip.get(compareOp), labelOperand));
    } else {
      plant(new Instruction(reverseSkip.get(compareOp), labelOperand));
    }

    debug("\ncomparison: end");
    return ifLabel;
  } //comparison
  
  //parse a comparison, jump back to the label if the comparison yields true.
  //comparison = expression relop expression
  private void comparison(EnumSet<LexemeType> stopSet, int doLabel) throws IOException, FatalError {
    debug("\ncomparison: start with stopSet = " + stopSet);

    /* part of lexical analysis */
    EnumSet<LexemeType> localSet = stopSet.clone();
    localSet.add(LexemeType.relop);
    Operand leftOperand = expression(localSet, new Operand(Datatype.unknown));

    /* part of code generation */
    plantAccLoad(leftOperand);

    /* part of lexical analysis */
    localSet = stopSet.clone();
    localSet.addAll(startExp);
    RelValType compareOp;
    if (checkOrSkip(EnumSet.of(LexemeType.relop), localSet)) {
      /* part of code generation */
      compareOp = lexeme.relVal;
      /* part of lexical analysis */
      getLexeme();
    } else {
      /* part of code generation */
      compareOp = RelValType.eq;
    }
    
    /* part of lexical analysis */
    localSet = stopSet.clone();
    localSet.addAll(startStatement);
    localSet.remove(LexemeType.identifier);
    Operand rightOperand = expression(localSet, new Operand(Datatype.unknown));

    /* part of code generation */
    plant(new Instruction(FunctionType.acc16Compare, rightOperand));
    Operand labelOperand = new Operand(Datatype.integer, OperandType.label, doLabel);
    if (rightOperand.opType == OperandType.stack) {
      plant(new Instruction(normalSkip.get(compareOp), labelOperand));
    } else {
      plant(new Instruction(reverseSkip.get(compareOp), labelOperand));
    }

    debug("\ncomparison: end");
  } //comparison()

  
  // block = statement | "{" statements "}".
  private void block(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nblock: start with stopSet = " + stopSet);
      
    //part of semantic analysis: start a new class level declaration scope for the statement block.
    identifiers.newScope();

    /* part of lexical analysis */
    EnumSet<LexemeType> startSet = stopSet.clone();
    startSet.addAll(startStatement);
    startSet.add(LexemeType.beginlexeme);

    EnumSet<LexemeType> stopBlockSet = startSet.clone();
    stopBlockSet.add(LexemeType.semicolon);
    stopBlockSet.add(LexemeType.endlexeme);

    checkOrSkip(startSet, stopBlockSet);
    if (lexeme.type == LexemeType.beginlexeme) {
      getLexeme();
      statements(EnumSet.of(LexemeType.endlexeme));
      if (checkOrSkip(EnumSet.of(LexemeType.endlexeme), EnumSet.noneOf(LexemeType.class))) {
		  getLexeme();
	  }
    } else {
      statement(stopSet);
    }
      
    //part of semantic analysis: close the declaration scope of the statement block.
    identifiers.closeScope();

    debug("\nblock: end");
  }
  
  //forStatement = "for" "(" initialization ";" comparison ";" update ")" block.
  private void forStatement(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nforStatement: start with stopSet = " + stopSet);
    
    //part of semantic analysis: start a new declaration scope for the for statement.
    identifiers.newScope();

    /* part of lexical analysis: "for" "(" initialization ";" */
    getLexeme();
    EnumSet<LexemeType> stopForSet = stopSet.clone();
    stopForSet.add(LexemeType.rbracket);
    if (checkOrSkip(EnumSet.of(LexemeType.lbracket), stopForSet)) {
      getLexeme();
    }
    
    EnumSet<LexemeType> stopInitializationSet = stopForSet.clone();
    stopInitializationSet.add(LexemeType.semicolon);
    //in the initialization part a new variable must be declared.
    String variable = assignment(stopInitializationSet);
    if (variable == null) {
      error();
      System.out.println("Loop variable must be declared in for statement; (int variable; .. ; ..) {..} expected.");
    }
    
    //order of steps during execution: comparison - block - update.

    /* part of lexical analysis: comparison ";" */
    stopInitializationSet.addAll(startStatement);
    stopInitializationSet.remove(LexemeType.identifier);
    int forLabel = saveLabel();
    int gotoEnd = comparison(stopInitializationSet);
    if (checkOrSkip(EnumSet.of(LexemeType.semicolon), stopInitializationSet)) {
      getLexeme();
    }
    
    /* part of code generation: skip update and jump forward to block */
    int gotoBlock = saveLabel();
    plant(new Instruction(FunctionType.br, new Operand(Datatype.integer, OperandType.label, 0)));
    int updateLabel = saveLabel();

    /* part of lexical analysis: update */
    stopForSet.add(LexemeType.beginlexeme);
    update(stopForSet);

    /* part of code generation: jump back to comparison */
    plant(new Instruction(FunctionType.br, new Operand(Datatype.integer, OperandType.label, forLabel)));

    /* part of lexical analysis: ")" */
    stopForSet = stopSet.clone();
    stopForSet.addAll(startStatement);
    if (checkOrSkip(EnumSet.of(LexemeType.rbracket), stopForSet)) {
      getLexeme();
    }

    /* part of code generation: start of block */
    plantForwardLabel(gotoBlock);

    /* part of lexical analysis: block */
    block(stopSet);
    
    /* part of code generation; jump back to update */
    plant(new Instruction(FunctionType.br, new Operand(Datatype.integer, OperandType.label, updateLabel)));
    plantForwardLabel(gotoEnd);
    
    //part of semantic analysis: close the declaration scope of the for statement.
    identifiers.closeScope();
    debug("\nforStatement: end");
  } //forStatement()

  //doStatement    = "do" block "while" "(" comparison ")" ";".
  private void doStatement(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\ndoStatement: start with stopSet = " + stopSet);
    getLexeme();

    /* part of code generation */
    int doLabel = saveLabel();

    /* part of lexical analysis */
    //expect block, terminated by "while".
    EnumSet<LexemeType> stopDoSet = stopSet.clone();
    stopDoSet.add(LexemeType.whilelexeme);
    block(stopSet);
    
    //expect "while" followed by "(".
    EnumSet<LexemeType> stopWhileSet = stopSet.clone();
    stopWhileSet.add(LexemeType.rbracket);
    if (checkOrSkip(EnumSet.of(LexemeType.whilelexeme), stopWhileSet)) {
      getLexeme();
    }
    if (checkOrSkip(EnumSet.of(LexemeType.lbracket), stopWhileSet)) {
      getLexeme();
    }

    //expect comparison, terminated by ")"
    stopWhileSet.addAll(startStatement);
    stopWhileSet.remove(LexemeType.identifier);
    comparison(stopWhileSet, doLabel);
    
    //expect ")" ";"
    stopWhileSet = stopSet.clone();
    stopWhileSet.add(LexemeType.semicolon);
    if (checkOrSkip(EnumSet.of(LexemeType.rbracket), stopSet)) {
      getLexeme();
    }
    if (checkOrSkip(EnumSet.of(LexemeType.semicolon), stopSet)) {
      getLexeme();
    }
    
    debug("\ndoStatement: end");
  } //doStatement()

  //whileStatement = "while" "(" comparison ")" block.
  private void whileStatement(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nwhileStatement: start with stopSet = " + stopSet);
    getLexeme();

    /* part of code generation */
    int whileLabel = saveLabel();

    /* part of lexical analysis */
    EnumSet<LexemeType> stopWhileSet = stopSet.clone();
    stopWhileSet.add(LexemeType.rbracket);
    if (checkOrSkip(EnumSet.of(LexemeType.lbracket), stopWhileSet)) {
      getLexeme();
    }

    /* part of lexical analysis */
    stopWhileSet.addAll(startStatement);
    stopWhileSet.remove(LexemeType.identifier);
    int endLabel = comparison(stopWhileSet);
    
    stopWhileSet = stopSet.clone();
    stopWhileSet.addAll(startStatement);
    if (checkOrSkip(EnumSet.of(LexemeType.rbracket), stopWhileSet)) {
      getLexeme();
    }
    block(stopSet);
    
    /* part of code generation */
    plant(new Instruction(FunctionType.br, new Operand(Datatype.integer, OperandType.label, whileLabel)));
    plantForwardLabel(endLabel);
    debug("\nwhileStatement: end");
  } //whileStatement()

  // ifStatement = "if" "(" comparison ")" block [ "else" block ].
  private void ifStatement(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nifStatement: start with stopSet = " + stopSet);

    getLexeme();
    
    //expect (
    EnumSet<LexemeType> stopSetIf = stopSet.clone();
    stopSetIf.add(LexemeType.rbracket);
    if (checkOrSkip(EnumSet.of(LexemeType.lbracket), stopSetIf)) {
      getLexeme();
    }

    //expect comparison
    stopSetIf = stopSet.clone();
    stopSetIf.add(LexemeType.rbracket);
    stopSetIf.addAll(startStatement);
    stopSetIf.remove(LexemeType.identifier);
    int ifLabel = comparison(stopSetIf);
    
    //expect )
    stopSetIf = stopSet.clone();
    stopSetIf.addAll(startStatement);
    if (checkOrSkip(EnumSet.of(LexemeType.rbracket), stopSetIf)) {
      getLexeme();
    }

    //expect statement block
    EnumSet<LexemeType> stopSetElse = stopSet.clone();
    stopSetElse.add(LexemeType.elselexeme);
    block(stopSetElse);

    if (lexeme.type == LexemeType.elselexeme) {
      //expect else
      checkOrSkip(EnumSet.of(LexemeType.elselexeme), stopSetElse);

      /* part of code generation */
      int elseLabel = saveLabel();
      plant(new Instruction(FunctionType.br, new Operand(Datatype.integer, OperandType.label, 0)));
      plantForwardLabel(ifLabel);

      /* part of lexical analysis */
      //expect statement block
      getLexeme();
      block(stopSet);
      
      /* part of code generation */
      plantForwardLabel(elseLabel);
    } else {
      /* part of code generation */
      plantForwardLabel(ifLabel);
    }
    debug("\nifStatement: end");
  } //ifStatement()
  
  //assignment = [datatype] update ";".
  //datatype   = "byte" | "int".
  private String assignment(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nassignment: start with stopSet = " + stopSet + "; lexeme.type=" + lexeme.type);

    EnumSet<LexemeType> stopAssignmentSet = stopSet.clone();
    stopAssignmentSet.addAll(startExp);
    stopAssignmentSet.add(LexemeType.semicolon);

    String variable = null;
    if (lexeme.type == LexemeType.bytelexeme || lexeme.type == LexemeType.intlexeme) {
      /* part of lexical analysis */
      LexemeType datatype = lexeme.type;
      getLexeme();
      if (checkOrSkip(EnumSet.of(LexemeType.identifier), stopAssignmentSet)) {

        // part of semantic analysis.
        if (identifiers.checkId(lexeme.idVal) && identifiers.getId(lexeme.idVal).getDatatype() != Datatype.unknown) {
         error(8); /* variable already declared */
        } else if (identifiers.declareId(lexeme, datatype)) {
          debug("\nassignment: var declared: " + lexeme.makeString(identifiers.getId(lexeme.idVal)));
          variable = lexeme.idVal;
        } else {
          error();
          System.out.println("Error declaring variable " + lexeme.idVal + " of type " + datatype);
        }
      }
    } else {
      /* part of lexical analysis */
      checkOrSkip(EnumSet.of(LexemeType.identifier), stopAssignmentSet);

      /* part of semantic analysis */
      if (!identifiers.checkId(lexeme.idVal)) error(9); /* variable not declared */
    }
    
    update(stopSet);

    /* part of lexical analysis */
    if (checkOrSkip(EnumSet.of(LexemeType.semicolon), stopSet)) {
      getLexeme();
    }

    debug("\nassignment: end");
    return variable;
  } //assignment()

  //update = identifier++ | identifier-- | identifier "=" expression
  private void update(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nupdate: start with stopSet = " + stopSet);

    EnumSet<LexemeType> stopAssignmentSet = stopSet.clone();
    stopAssignmentSet.addAll(startExp);
    stopAssignmentSet.add(LexemeType.semicolon);

    /* part of semantic analysis. */
    Variable var = identifiers.getId(lexeme.idVal);
    int varAddress = var.getAddress();
    Datatype varDatatype = var.getDatatype();

    /* part of lexical analysis */
    getLexeme();
    if (lexeme.type == LexemeType.addop && lexeme.addVal == AddValType.sub) {
      //identifier--
      getLexeme();
      if (lexeme.type == LexemeType.addop && lexeme.addVal == AddValType.sub) {
        getLexeme();

        /* part of code generation */
        if (varDatatype == Datatype.integer) {
          plant(new Instruction(FunctionType.decrement16, new Operand(Datatype.integer, OperandType.var, varAddress)));
        } else if (varDatatype == Datatype.byt) {
          plant(new Instruction(FunctionType.decrement8, new Operand(Datatype.byt, OperandType.var, varAddress)));
        } else {
          error(12); 
        }
      }
    } else if (lexeme.type == LexemeType.addop && lexeme.addVal == AddValType.add) {
      //identifier++
      getLexeme();
      if (lexeme.type == LexemeType.addop && lexeme.addVal == AddValType.add) {
        getLexeme();

        /* part of code generation */
        if (varDatatype == Datatype.integer) {
          plant(new Instruction(FunctionType.increment16, new Operand(Datatype.integer, OperandType.var, varAddress)));
        } else if (varDatatype == Datatype.byt) {
          plant(new Instruction(FunctionType.increment8, new Operand(Datatype.byt, OperandType.var, varAddress)));
        } else {
          error(12); 
        }
      }
    } else if (checkOrSkip(EnumSet.of(LexemeType.assign), stopAssignmentSet)) {
      //identifier "=" expression
      getLexeme();
      Operand operand = expression(stopSet, new Operand(Datatype.unknown));

      /* part of code generation */
      plantAccLoad(operand);
      if (varDatatype == Datatype.byt) {
        if (operand.datatype == Datatype.byt) {
          plant(new Instruction(FunctionType.acc8Store, new Operand(Datatype.byt, OperandType.var, varAddress)));
        } else if (operand.datatype == Datatype.integer) {
          plant(new Instruction(FunctionType.acc16ToAcc8));
          plant(new Instruction(FunctionType.acc8Store, new Operand(Datatype.byt, OperandType.var, varAddress)));
        } else {
          error(14);
        }
      } else if (varDatatype == Datatype.integer) {
        if (operand.datatype == Datatype.integer) {
          plant(new Instruction(FunctionType.acc16Store, new Operand(Datatype.integer, OperandType.var, varAddress)));
        } else if (operand.datatype == Datatype.byt) {
          plant(new Instruction(FunctionType.acc8ToAcc16));
          plant(new Instruction(FunctionType.acc16Store, new Operand(Datatype.integer, OperandType.var, varAddress)));
        } else {
          error(14);
        }
      } else {
        error(12);
      }
    }

    debug("\nupdate: end");
  } //update()

  // writeStatement = "write" "(" expression ")" ";".
  private void writeStatement(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nwriteStatement: start with stopSet = " + stopSet);
    getLexeme();

    EnumSet<LexemeType> stopWriteSet = stopSet.clone();
    stopWriteSet.addAll(startExp);
    stopWriteSet.add(LexemeType.rbracket);
    stopWriteSet.add(LexemeType.semicolon);
    if (checkOrSkip(EnumSet.of(LexemeType.lbracket), stopWriteSet)) {
      getLexeme();
    }
    
    EnumSet<LexemeType> stopExpressionSet = stopSet.clone();
    stopExpressionSet.add(LexemeType.rbracket);
    stopExpressionSet.add(LexemeType.semicolon);
    Operand operand = expression(stopExpressionSet, new Operand(Datatype.unknown));
    
    /* part of lexical analysis */
    if (checkOrSkip(EnumSet.of(LexemeType.rbracket), stopExpressionSet)) {
      getLexeme();
    }

    if (checkOrSkip(EnumSet.of(LexemeType.semicolon), stopSet)) {
      getLexeme();
    }

    /* part of code generation */
    plantAccLoad(operand);
    if (operand.datatype == Datatype.integer) {
      plant(new Instruction(FunctionType.writeAcc16));
    } else if (operand.datatype == Datatype.byt) {
      plant(new Instruction(FunctionType.writeAcc8));
    } else {
      error(15);
    }
    debug("\nwriteStatement: end");
  }

  //statement = assignment | writeStatement | ifStatement | forStatement | doStatement | whileStatement.
  private void statement(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nstatement: start with stopSet = " + stopSet);
    /* part of code generation */
    acc16InUse = false;
    acc8InUse = false;

    /* part of lexical analysis */
    EnumSet<LexemeType> startSet = stopSet.clone();
    startSet.addAll(startStatement);
    if (checkOrSkip(startSet, stopSet)) {
      if (startAssignment.contains(lexeme.type)) {
        assignment(stopSet);
      } else if (lexeme.type == LexemeType.writelexeme) {
        writeStatement(stopSet);
      } else if (lexeme.type == LexemeType.iflexeme) {
        ifStatement(stopSet);
      } else if (lexeme.type == LexemeType.forlexeme) {
        forStatement(stopSet);
      } else if (lexeme.type == LexemeType.dolexeme) {
        doStatement(stopSet);
      } else if (lexeme.type == LexemeType.whilelexeme) {
        whileStatement(stopSet);
      }
    }
    debug("\nstatement: end");
  }
  
  //statements = (statement)*.
  private void statements(EnumSet<LexemeType> stopSet) throws IOException, FatalError {
    debug("\nstatements: start with stopSet = " + stopSet);
    
    //while (checkOrSkip(startStatement, stopSet)) {
    while (startStatement.contains(lexeme.type)) {
      statement(stopSet);
      //getLexeme();
    }
    debug("\nstatements: end");
  }
  
  //program = "class" identifier "{" statements "}".
  private void prog() throws IOException, FatalError {
    debug("\nprog: start");
    /* recognise a class definition */
    getLexeme();
    if (checkOrSkip(EnumSet.of(LexemeType.classlexeme), EnumSet.of(LexemeType.identifier, LexemeType.beginlexeme))) {
      getLexeme();
      
      //part of semantic analysis: start a new class level declaration scope.
      identifiers.newScope();

      if (checkOrSkip(EnumSet.of(LexemeType.identifier), EnumSet.of(LexemeType.beginlexeme))) {
        /* next line + debug message is part of semantic analysis */
        if (identifiers.checkId(lexeme.idVal)) {
          error(8); /* variable already declared */
        } else if (identifiers.declareId(lexeme, LexemeType.classlexeme)) {
          debug("\nprog: class declared: " + lexeme.idVal);
        } else {
          error();
          System.out.println("Error declaring variable " + lexeme.idVal + " as a class.");
        }

        getLexeme();
        checkOrSkip(EnumSet.of(LexemeType.beginlexeme), EnumSet.noneOf(LexemeType.class));

        getLexeme();
        statements(EnumSet.of(LexemeType.endlexeme));

        //getLexeme();
        checkOrSkip(EnumSet.of(LexemeType.endlexeme), EnumSet.noneOf(LexemeType.class));
      }
      
      //part of semantic analysis: close the class level declaration scope.
      identifiers.closeScope();
    }
    debug("\nprog: end");
  }
  
  /*Class member methods for code generation phase */
  private void plantAccLoad(Operand operand) {
    if (operand.datatype == Datatype.integer) {
      if (operand.opType != OperandType.stack) {
        if (acc16InUse) {
            plant(new Instruction(FunctionType.stackAcc16Load, operand));
          } else {
            plant(new Instruction(FunctionType.acc16Load, operand));
        }
      }
      acc16InUse = true;
    } else { //operand.datatype == Datatype.byt
      if (operand.opType != OperandType.stack) {
        if (acc8InUse) {
            plant(new Instruction(FunctionType.stackAcc8Load, operand));
          } else {
            plant(new Instruction(FunctionType.acc8Load, operand));
        }
      }
      acc8InUse = true;
    }
  }

  private void plant(Instruction instruction) {
    /* for debugging purposes */
    debug("\n->plant (acc8InUse=" + acc8InUse + ", acc16InUse=" + acc16InUse + "):");
    
    /* add original source code */
    if (!sourceCode.isEmpty()) {
      instruction.linesOfCode.addAll(sourceCode);
      sourceCode.clear();
    }

    /* insert M (virtual machine) code into memory */
    if (storeInstruction.size() >= MAX_M_CODE) {
      error (10);
      storeInstruction.clear();
    }
    storeInstruction.add(instruction);
    
    if (instruction.function == FunctionType.acc8ToAcc16) {
      acc16InUse = true;
      acc8InUse = false;
    }

    /* for debugging purposes */
    debug("\n" + String.format("%3d :", codePos) + instruction.toString());

    codePos++;
  };
  
  private void plantForwardLabel(int pos) {
    storeInstruction.get(pos).operand.intValue = storeInstruction.size();
    /* for debugging purposes */
    debug("\nlabel: used from " + pos);
  }

  private int saveForwardLabel() {
    /* for debugging purposes */
    debug("\nlabel used");

    return codePos;
  }

  private int saveLabel() {
    /* for debugging purposes */
    debug("\nlabel:");

    return codePos;
  }

}
