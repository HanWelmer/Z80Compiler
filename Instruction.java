import java.util.ArrayList;
/**
 * This class defines an instruction for the M machine as generated by the P language.
 * Used in the code generation phase of the compiler.
 */
public class Instruction {
  public FunctionType function;
  public Operand operand;
  
  /* original source code lines */
  public ArrayList<String> linesOfCode = new ArrayList<String>(0);

  public Instruction(FunctionType fn) {
    function = fn;
  }

  public Instruction(FunctionType fn, Operand operand) {
    //todo add error detection regarding function type and value of operand (in particular opType and opValue).
    function = fn;
    //deep copy of operand, otherwise a reference to the mutable object operand is copied into the Instruction.
    this.operand = new Operand(operand.opType, operand.opValue);
  }
  
  public String toString() {
    String result = function.getValue();
    switch (function) {
      case accStore:
        switch(operand.opType) {
          case var: result += " variable " + operand.opValue; break;
          case stack: result += " stack"; break;
          default: throw new RuntimeException("accStore with unsupported operandType");
        };
        break;
      case accLoad:
      case stackAccLoad:
      case accPlus:
      case accMinus:
      case minusAcc:
      case accTimes:
      case accDiv:
      case divAcc:
      case accCompare:
        switch(operand.opType) {
          case var: result += " variable " + operand.opValue; break;
          case constant: result += " constant " + operand.opValue; break;
          case stack: result += " unstack"; break;
          default: throw new RuntimeException("accu related instruction with unsupported operandType");
        };
        break;
      case br:
      case brNe:
      case brEq:
      case brLt:
      case brLe:
      case brGe:
      case brGt:
      case call:
        result += " " + operand.opValue;
        break;
      case read:
        result = "call read";
        break;
      case write:
        result = "call write";
        break;
      case stop:
        break;
      default: throw new RuntimeException("unsupported instruction");
    }
    return result;
  }
}
