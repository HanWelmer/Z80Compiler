
prog start
{Print prime numbers less than 100}

VAR T, {test result; 1 if prime, 0 if not}

lexeme=VAR
lexeme=name T
idlist start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
name T@0
lexeme=,
idlist var declared
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
idlist ; or , ignored
idlist , skipped
    P, {prime to be tested}

lexeme=name P
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
name P@1
lexeme=,
idlist var declared
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
idlist ; or , ignored
idlist , skipped
    D, {divisor}

lexeme=name D
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
name D@2
lexeme=,
idlist var declared
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
idlist ; or , ignored
idlist , skipped
    M; {max prime to be tested}

lexeme=name M
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
name M@3
lexeme=;
idlist var declared
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
idlist ; or , ignored
idlist end of id list reached
idlist ; skipped
BEGIN

  M := (9+1)*(9+1); {max = 100}

lexeme=BEGIN
idlist end
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name M@3
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=(
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 9
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=)
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=* or / muld
lexeme=(
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 9
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=)
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
accInUse = true
operand.opType = special
operand.opValue = 9
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  WRITE(1);

lexeme=WRITE
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=(
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=)
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  WRITE(2);

lexeme=WRITE
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=(
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 2
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=)
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  P := 3;

lexeme=name P@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 3
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
accInUse = false
operand.opType = constant
operand.opValue = 3
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  WHILE P<M DO

lexeme=WHILE
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name P@1
label:

checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=<=> lt
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name M@3
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  BEGIN

lexeme=DO
label used

checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
    D := 2;

lexeme=BEGIN
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name D@2
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 2
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
accInUse = false
operand.opType = constant
operand.opValue = 2
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
    T := 1;

lexeme=name T@0
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
accInUse = false
operand.opType = constant
operand.opValue = 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
    WHILE D + D <= P DO

lexeme=WHILE
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name D@2
label:

checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
lexeme=name D@2
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=<=> le
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name P@1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
    BEGIN

lexeme=DO
label used

checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
      IF P / D * D = P

lexeme=BEGIN
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=IF
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name P@1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=* or / divd
lexeme=name D@2
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=* or / muld
lexeme=name D@2
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=<=> eq
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
      THEN T := 0;

lexeme=name P@1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=THEN
label used

checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name T@0
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
accInUse = false
operand.opType = constant
operand.opValue = 0
block end
label: used from 115

block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
      D := D + 1;

lexeme=name D@2
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name D@2
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
accInUse = true
operand.opType = special
operand.opValue = 2
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
    END;

lexeme=END
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
block end
label: used from 102

block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
    IF T = 1

lexeme=IF
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name T@0
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=<=> eq
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
    THEN WRITE(P);

lexeme=THEN
label used

checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=WRITE
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=(
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name P@1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=)
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
block end
label: used from 132

block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
    P := P + 1;

lexeme=name P@1
block start
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=:=
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=name P@1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=+ or - add
lexeme=digit 1
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
lexeme=;
accInUse = true
operand.opType = special
operand.opValue = 1
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
  END

END.

  ^unknown keyword

lexeme=?
block start
checkOrSkip start
  ^unexpected symbol
. or name or ; or BEGIN or WRITE or IF or WHILE or END expected.

  ^lexeme skipped after error

lexeme=.
checkOrSkip end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
block end
checkOrSkip start
   ^unexpected symbol
; or END expected.

checkOrSkip end
block end
label: used from 87

block end
checkOrSkip start
   ^unexpected symbol
; or END expected.

checkOrSkip end
block end
checkOrSkip start
checkOrSkip lexeme in okSet
checkOrSkip end
prog end